<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue-element-admin</title>
      <link href="/A-lyc/2099/11/12/vue/vue-element-admin/"/>
      <url>/A-lyc/2099/11/12/vue/vue-element-admin/</url>
      
        <content type="html"><![CDATA[<p>这是一个极简的 vue admin 管理后台。它只包含了 Element UI &amp; axios &amp; iconfont &amp; permission control &amp; lint，这些搭建后台必要的东西</p><h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><p>这是一个极简的 vue admin 管理后台。它只包含了 Element UI &amp; axios &amp; iconfont &amp; permission control &amp; lint，这些搭建后台必要的东西。<br>下载安装vue-elenemt-admin 下载admin和template，需要使用npm进行安装使用,访问地址：<a href="https://panjiachen.gitee.io/vue-admin-template/#/login?redirect=%2Fdashboard" target="_blank" rel="noopener">https://panjiachen.gitee.io/vue-admin-template/#/login?redirect=%2Fdashboard</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// vue-elenemt-admin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 克隆项目</span></span><br><span class="line">git clone https://github.com/PanJiaChen/vue-element-admin.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入项目目录</span></span><br><span class="line">cd vue-element-admin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建议不要用 cnpm 安装 会有各种诡异的bug 可以通过如下操作解决 npm 下载速度慢的问题</span></span><br><span class="line">npm install --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 本地开发 启动项目</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 构建测试环境</span></span><br><span class="line">npm run build:stage</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建生产环境</span></span><br><span class="line">npm run build:prod</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 预览发布环境效果</span></span><br><span class="line">npm run preview</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 预览发布环境效果 + 静态资源分析</span></span><br><span class="line">npm run preview -- --report</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 代码格式检查</span></span><br><span class="line">npm run lint</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 代码格式检查并自动修复</span></span><br><span class="line">npm run lint -- --fix</span><br></pre></td></tr></table></figure><h2 id="登录注册"><a href="#登录注册" class="headerlink" title="登录注册"></a>登录注册</h2><p>删除一些请求，在vue.config.js中删除，删除之后会导致登录不上去的，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">before: require('./mock/mock-server.js')</span><br></pre></td></tr></table></figure><h3 id="配置跨域"><a href="#配置跨域" class="headerlink" title="配置跨域"></a>配置跨域</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    '/dev-api': &#123; // 重点</span><br><span class="line">      target: 'http://localhost:3000',// 重点</span><br><span class="line">      ws: true,</span><br><span class="line">      changeOrigin: true,</span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        '^/dev-api': ''</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  port: port,</span><br><span class="line">  open: true,</span><br><span class="line">  overlay: &#123;</span><br><span class="line">    warnings: false,</span><br><span class="line">    errors: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p>请求是在vuex中发出的之后保存token到浏览器，由于在router的导航首位中重复获取所以保证了一直处于登录状态<br>请求之前保证数据库内有这个用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">// login - index</span><br><span class="line">this.$store.dispatch('user/login', this.loginForm).then(() =&gt; &#123;</span><br><span class="line">        this.$router.push(&#123; path: this.redirect || '/' &#125;)</span><br><span class="line">        this.loading = false</span><br><span class="line">      &#125;).catch(() =&gt; &#123;</span><br><span class="line">        this.loading = false</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">//  store - modules - user</span><br><span class="line">// 导入了请求方式</span><br><span class="line">import &#123; login, logout, getInfo &#125; from '@/api/user'</span><br><span class="line">import &#123; getToken, setToken, removeToken &#125; from '@/utils/auth'</span><br><span class="line">  login(&#123; commit &#125;, userInfo) &#123;</span><br><span class="line">    const &#123; username, password &#125; = userInfo</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      // 网络请求 .trim()去除空格</span><br><span class="line">      login(&#123; username: username.trim(), password: password &#125;).then(response =&gt; &#123;</span><br><span class="line">        const &#123; data &#125; = response</span><br><span class="line">        console.log('---- 登录成功 ----')</span><br><span class="line">        commit('SET_TOKEN', data.token)</span><br><span class="line">         // 保存token 方便使用token来获取用户的信息</span><br><span class="line">        setToken(data.token)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;).catch(error =&gt; &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">// 获取用户信息</span><br><span class="line"> // get user info</span><br><span class="line">  getInfo(&#123; commit, state &#125;) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      // 网络请求获取数据</span><br><span class="line">      getInfo(state.token).then(response =&gt; &#123;</span><br><span class="line">        console.log('---- 获取用户信息 ----')</span><br><span class="line">        const &#123; data &#125; = response</span><br><span class="line">        if (!data) &#123;</span><br><span class="line">          return reject('验证失败，请重新登录。')</span><br><span class="line">        &#125;</span><br><span class="line">        const &#123; name, avatar &#125; = data</span><br><span class="line">        // 更改数据</span><br><span class="line">        commit('SET_NAME', name)</span><br><span class="line">        commit('SET_AVATAR', avatar)</span><br><span class="line">        resolve(data)</span><br><span class="line">      &#125;).catch(error =&gt; &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="axios请求"><a href="#axios请求" class="headerlink" title="axios请求"></a>axios请求</h3><p>在api文件夹中创建user.js之后关于用户的请求在这</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import request from '@/utils/request'</span><br><span class="line"></span><br><span class="line">// 传输账号密码，获取token</span><br><span class="line">export function login(data) &#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: '/users/login',</span><br><span class="line">    method: 'post',</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="layout自己理解的机制"><a href="#layout自己理解的机制" class="headerlink" title="layout自己理解的机制"></a>layout自己理解的机制</h2><p>在layout文件夹：是一个公共文件这个文件属于公共信息，之后可以直接引入<br>类似于nuxt.js<br>这个layout作为父级其他的作为子集</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">import Vue from 'vue'</span><br><span class="line">import Router from 'vue-router'</span><br><span class="line">Vue.use(Router)</span><br><span class="line">/* Layout */</span><br><span class="line">import Layout from '@/layout'</span><br><span class="line">  &#123;</span><br><span class="line">    path: '/example', // 名称</span><br><span class="line">    component: Layout, // 父组件 组件</span><br><span class="line">    redirect: '/example/table', // 重定向</span><br><span class="line">    name: 'example',</span><br><span class="line">    meta: &#123; title: '展示列表', icon: 'el-icon-s-help' &#125;,</span><br><span class="line">    children: [ // 组件的孩子</span><br><span class="line">      &#123;</span><br><span class="line">        path: 'edit',</span><br><span class="line">        name: 'edit',</span><br><span class="line">        component: () =&gt; import('@/views/table/edit'),</span><br><span class="line">        meta: &#123; title: '新闻添加', icon: 'el-icon-s-help' &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: 'table',</span><br><span class="line">        name: 'table',</span><br><span class="line">        component: () =&gt; import('@/views/table/index'),</span><br><span class="line">        meta: &#123; title: '新闻列表', icon: 'table' &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: '/nested',</span><br><span class="line">    component: Layout,</span><br><span class="line">    redirect: '/nested/menu1',</span><br><span class="line">    name: 'nested',</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: '内容',</span><br><span class="line">      icon: 'nested'</span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: 'menu1',</span><br><span class="line">        component: () =&gt; import('@/views/nested/menu1/index'), // Parent router-view</span><br><span class="line">        name: 'menu1',</span><br><span class="line">        meta: &#123; title: 'Menu1' &#125;,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            path: 'menu1-2',</span><br><span class="line">            component: () =&gt; import('@/views/nested/menu1/menu1-2'),</span><br><span class="line">            name: 'menu1-2',</span><br><span class="line">            meta: &#123; title: '菜单-2' &#125;,</span><br><span class="line">            children: [</span><br><span class="line">              &#123;</span><br><span class="line">                path: 'menu1-2-1',</span><br><span class="line">                component: () =&gt; import('@/views/nested/menu1/menu1-2/menu1-2-1'),</span><br><span class="line">                name: 'menu1-2-1',</span><br><span class="line">                meta: &#123; title: '菜单-2-1' &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                path: 'menu1-2-2',</span><br><span class="line">                component: () =&gt; import('@/views/nested/menu1/menu1-2/menu1-2-2'),</span><br><span class="line">                name: 'menu1-2-2',</span><br><span class="line">                meta: &#123; title: '菜单-2-2' &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><a href="#"></a></p><h2 id="h2全局导航首位-router"><a href="#h2全局导航首位-router" class="headerlink" title="h2全局导航首位 router"></a>h2全局导航首位 router</h2><p>在这个文件permission.js<br>组件生命周期操作路由</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 路由进入的时候</span><br><span class="line">beforeRouteEnter(to, from, next) &#123;</span><br><span class="line">  console.log('---- 4 ----')</span><br><span class="line">  console.log(to)</span><br><span class="line">  console.log(from)</span><br><span class="line">  next()</span><br><span class="line">&#125;,</span><br><span class="line">// 路由离开之前</span><br><span class="line">beforeRouteLeave(to, from, next) &#123;</span><br><span class="line">  console.log('---- 5 ----')</span><br><span class="line">  console.log(to)</span><br><span class="line">  console.log(from)</span><br><span class="line">  next()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="element上传图片"><a href="#element上传图片" class="headerlink" title="element上传图片"></a>element上传图片</h2><p>上传插件：:before-upload=’beforeUpload’</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">beforeUpload(file) &#123;</span><br><span class="line">   console.log('用户上传之前')</span><br><span class="line">   let param = new FormData()</span><br><span class="line">   param.append('files', file)</span><br><span class="line">   getUpImage(param).then(res =&gt; &#123;</span><br><span class="line">     this.tempUrl = res.data.url</span><br><span class="line">     this.dataObj = &#123;</span><br><span class="line">       url: res.data.url,</span><br><span class="line">       name: res.data.originalname,</span><br><span class="line">       filename: res.data.filename,</span><br><span class="line">       uid: file.uid</span><br><span class="line">     &#125;</span><br><span class="line">     this.emitInput(res.data.url)</span><br><span class="line">   &#125;)</span><br><span class="line">   return true</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="例子template"><a href="#例子template" class="headerlink" title="例子template"></a>例子template</h2><p>template自己定义模板这个需要有后端的支持<br><a href="./newAdmin.zip" target="_blank"> template自己定义模板 </a><br>选要后端支持 npm i<br><a href="./demo01.zip" target="_blank"> node+express+mongoose后端模板 </a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-element-admin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3.0X更新文档</title>
      <link href="/A-lyc/2099/10/24/vue/vue3.0X%E6%9B%B4%E6%96%B0%E6%96%87%E6%A1%A3/"/>
      <url>/A-lyc/2099/10/24/vue/vue3.0X%E6%9B%B4%E6%96%B0%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-3-0-项目初始化"><a href="#Vue-3-0-项目初始化" class="headerlink" title="Vue 3.0 项目初始化"></a>Vue 3.0 项目初始化</h2><h2 id="第一步，安装-vue-cli："><a href="#第一步，安装-vue-cli：" class="headerlink" title="第一步，安装 vue-cli："></a>第一步，安装 vue-cli：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>注意以下命令是错误的！<br>npm install -g vue<br>npm install -g vue-cli</p><h2 id="安装成功后，我们即可使用-vue-命令，测试方法"><a href="#安装成功后，我们即可使用-vue-命令，测试方法" class="headerlink" title="安装成功后，我们即可使用 vue 命令，测试方法"></a>安装成功后，我们即可使用 vue 命令，测试方法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vue -V</span></span><br><span class="line">@vue/cli 4.3.1</span><br></pre></td></tr></table></figure><h2 id="第二步，初始化-vue-项目："><a href="#第二步，初始化-vue-项目：" class="headerlink" title="第二步，初始化 vue 项目："></a>第二步，初始化 vue 项目：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue-next-test</span><br></pre></td></tr></table></figure><h2 id="输入命令后，会出现命令行交互窗口，这里我们选择-Manually-select-features："><a href="#输入命令后，会出现命令行交互窗口，这里我们选择-Manually-select-features：" class="headerlink" title="输入命令后，会出现命令行交互窗口，这里我们选择 Manually select features："></a>输入命令后，会出现命令行交互窗口，这里我们选择 Manually select features：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v4.3.1</span><br><span class="line">? Please pick a preset: </span><br><span class="line">  default (babel, eslint) </span><br><span class="line">❯ Manually select features</span><br></pre></td></tr></table></figure><p>随后我们勾选：Router、Vuex、CSS Pre-processors 和 Linter / Formatter，<br>这些都是开发商业级项目必须的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v4.3.1</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: </span><br><span class="line"> ◉ Babel</span><br><span class="line"> ◯ TypeScript</span><br><span class="line"> ◯ Progressive Web App (PWA) Support</span><br><span class="line"> ◉ Router</span><br><span class="line"> ◉ Vuex</span><br><span class="line"> ◉ CSS Pre-processors</span><br><span class="line">❯◉ Linter / Formatter</span><br><span class="line"> ◯ Unit Testing</span><br><span class="line"> ◯ E2E Testing</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意：Vue 3.0 项目目前需要从 Vue 2.0 项目升级而来，所以为了直接升级到 Vue 3.0 全家桶，</span><br><span class="line">我们需要在 Vue 项目创建过程中勾选 Router 和 Vuex，所以避免手动写初始化代码</span><br></pre></td></tr></table></figure><h2 id="升级-Vue-3-0-项目"><a href="#升级-Vue-3-0-项目" class="headerlink" title="升级 Vue 3.0 项目"></a>升级 Vue 3.0 项目</h2><p>目前创建 Vue 3.0 项目需要通过插件升级的方式来实现，</p><p>vue-cli 还没有直接支持，我们进入项目目录，并输入以下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd vue-next-test</span><br><span class="line">vue add vue-next</span><br></pre></td></tr></table></figure><p>执行上述指令后，会自动安装 vue-cli-plugin-vue-next 插件（查看项目代码），该插件会完成以下操作：</p><p>安装 Vue 3.0 依赖<br>更新 Vue 3.0 webpack loader 配置，使其能够支持 .vue 文件构建（这点非常重要）<br>创建 Vue 3.0 的模板代码<br>自动将代码中的 Vue Router 和 Vuex 升级到 4.0 版本，如果未安装则不会升级<br>自动生成 Vue Router 和 Vuex 模板代码<br>完成上述操作后，项目正式升级到 Vue 3.0，</p><p>注意该插件还不能支持 typescript，用 typescript 的同学还得再等等。（就是目前还不太支持TS）</p><h3 id="Vue-3-0-基本特性体验"><a href="#Vue-3-0-基本特性体验" class="headerlink" title="Vue 3.0 基本特性体验"></a>Vue 3.0 基本特性体验</h3><h2 id="创建路由-router-index"><a href="#创建路由-router-index" class="headerlink" title="创建路由 router/index"></a>创建路由 router/index</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createRouter, createWebHashHistory &#125; from 'vue-router'</span><br><span class="line">import Home from '../views/Home.vue'</span><br><span class="line"></span><br><span class="line">const routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: '/home',</span><br><span class="line">    name: 'Home',</span><br><span class="line">    component: Home,// 父组件模板 Layout 机制</span><br><span class="line">    redirect: '/dashboard', // 重定向</span><br><span class="line">    meta: &#123; title: '标题', icon: 'dashboard' &#125; // mate标签， 可做权限设置</span><br><span class="line">    children:[&#123;</span><br><span class="line">      path: 'dashboard',// 连接是/home/dashboard</span><br><span class="line">      name: 'Dashboard', // 和模板文件最好对应</span><br><span class="line">      component: () =&gt; import('@/views/dashboard/index'), // 模板文件路径</span><br><span class="line">      meta: &#123; title: '标题', icon: 'dashboard' &#125; // mate标签， 可做权限设置</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: '/about',</span><br><span class="line">    name: 'About',</span><br><span class="line">    component: () =&gt; import(/* webpackChunkName: "about" */ '../views/About.vue')</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const router = createRouter(&#123;</span><br><span class="line">  history: createWebHistory(process.env.BASE_URL),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><p>初始化 Vue Router 的过程与 3.0 版本变化不大，只是之前采用构造函数的方式，<br>这里改为使用 createRouter 来创建 Vue Router 实例，<br>建一个公共的layout文件是一个公共的文件header和footer公用 都是home的子文件所以改变的是router-view这个状态<br>可以使用循环来便利路由内的标题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;header&lt;/h1&gt;</span><br><span class="line">        &lt;div class="nav"&gt;</span><br><span class="line">            &lt;router-link to="/home/dashboard"&gt;首页&lt;/router-link&gt; |</span><br><span class="line">            &lt;router-link to="/home/index"&gt;关于我们&lt;/router-link&gt; |</span><br><span class="line">            &lt;router-link to="/home/Content"&gt;内容 - Content&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        ==========================&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">        &lt;router-view :key="key"/&gt; // key() &#123;return this.$route.path&#125;,</span><br><span class="line">        ==========================&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">        &lt;h1&gt;footer&lt;/h1&gt;</span><br><span class="line">        &lt;div class="nav"&gt;</span><br><span class="line">            &lt;router-link to="/"&gt;首页&lt;/router-link&gt; |</span><br><span class="line">            &lt;router-link to="/about/index"&gt;关于我们&lt;/router-link&gt; |</span><br><span class="line">            &lt;router-link to="/about/Content"&gt;内容 - Content&lt;/router-link&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>app.vue   放置内容的一个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="app"&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="启动项目："><a href="#启动项目：" class="headerlink" title="启动项目："></a>启动项目：</h2><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h2 id="watch的应用"><a href="#watch的应用" class="headerlink" title="watch的应用"></a>watch的应用</h2><p>· watch监听器可以监听一个getter函数</p><ul><li>这个getter要返回一个响应式对象</li><li>当该对象更新后，会执行对应的回调函<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; reactive, watch &#125; from 'vue'</span><br><span class="line">const state = reactive(&#123; count: 0 &#125;)</span><br><span class="line">watch(() =&gt; state.count, (newValue, oldValue) =&gt; &#123;</span><br><span class="line">    // 因为watch被观察的对象只能是getter/effect函数、ref、热active对象或者这些类型是数组</span><br><span class="line">    // 所以需要将state.count变成getter函数</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>· watch可以监听响应式对象<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ref, watch &#125; from 'vue' </span><br><span class="line">const count = ref(0) </span><br><span class="line">watch(count, (newValue, oldValue) =&gt; &#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>· watch可以监听多个响应式对线，任何一个响应式对象更新，就会执行回调函数<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ref, watch &#125; from 'vue' </span><br><span class="line">const count = ref(0) </span><br><span class="line">const count2 = ref(1) </span><br><span class="line">watch([count, count2], ([newCount, newCount2], [oldCount, oldCount2]) =&gt; &#123; </span><br><span class="line">&#125;)</span><br><span class="line">//还有第二种写法</span><br><span class="line">watch([count, count2], (newValue, oldVlaue) =&gt; &#123;</span><br><span class="line">    console.log(newValue)//[newCount, newCount2]</span><br><span class="line">    console.log(oldValue)//[oldCount, oldCount2]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="状态和事件绑定"><a href="#状态和事件绑定" class="headerlink" title="状态和事件绑定"></a>状态和事件绑定</h2><p>Vue 3.0 中定义状态的方法改为类似 React Hooks 的方法，下面我们在 Test.vue 中定义一个状态 count：<br>setup(){}函数内return 出的值可以使用this访问的到 这里面无法访问methods和data中的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="test"&gt;</span><br><span class="line">    &lt;h1 :ref='countOne'&gt;test count: &#123;&#123;count&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; ref &#125; from 'vue'</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    setup () &#123;</span><br><span class="line">// 设置默认值位0</span><br><span class="line">      const count = ref(0)</span><br><span class="line">      return &#123;</span><br><span class="line">        count</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        countOne(el)&#123;</span><br><span class="line">            // 返回的是一个Proxy 可以直接点后面跟着方法即可 </span><br><span class="line">            console.log(el)</span><br><span class="line">            // 直接点可以直接调出来即可    </span><br><span class="line">            console.log(el.message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue-3-0-中初始化状态通过-setup-方法，"><a href="#Vue-3-0-中初始化状态通过-setup-方法，" class="headerlink" title="Vue 3.0 中初始化状态通过 setup 方法，"></a>Vue 3.0 中初始化状态通过 setup 方法，</h2><p>组件也可使用<br>定义状态需要调用 ref 方法。接下来我们定义一个事件，用来更新 count 状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="about"&gt;</span><br><span class="line">&lt;input type="text" v-model="text"&gt;</span><br><span class="line">        &lt;h3&gt;&#123;&#123;text&#125;&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;count02&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt; 关于我们 &#123;&#123;count&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;div&gt;count,</span><br><span class="line">      test： &#123;&#123;test&#125;&#125;,</span><br><span class="line">      doubleCount：&#123;&#123;doubleCount&#125;&#125;,</span><br><span class="line">      a：&#123;&#123;a&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;h1 @click="add"&gt;add&lt;/h1&gt;</span><br><span class="line">    &lt;h1 @click="update"&gt;update&lt;/h1&gt;</span><br><span class="line">    &lt;h1 @click="getgreet"&gt;methods ====&gt;&gt;&gt;&gt; getgreet&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  import &#123; ref, computed, watch, getCurrentInstance,</span><br><span class="line">    onMounted,onRenderTracked,onRenderTriggered,</span><br><span class="line">    onBeforeMount,onBeforeUpdate,onUpdated,onBeforeUnmount,onUnmounted,</span><br><span class="line">    onErrorCaptured</span><br><span class="line">  &#125; from "vue";</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name:'about',</span><br><span class="line">    // 初始化数据使用，生命周期使用 需要在里面定义请求函数，来请求初始化数据</span><br><span class="line">    // 监听不到data和methods内的数据</span><br><span class="line">    setup() &#123;</span><br><span class="line">      // 方法获取当前组件的实例</span><br><span class="line">      console.log(getCurrentInstance());</span><br><span class="line">      const &#123; ctx &#125; = getCurrentInstance(); // 获取当前实例</span><br><span class="line">      onBeforeMount(()=&gt;&#123;</span><br><span class="line">        console.log("在挂载开始之前被调用")</span><br><span class="line">      &#125;)</span><br><span class="line">      onRenderTracked(() =&gt; &#123;</span><br><span class="line">        console.log('渲染跟踪');</span><br><span class="line">      &#125;);</span><br><span class="line">      onBeforeUnmount(()=&gt;&#123;</span><br><span class="line">        console.log("实例销毁之前调用")</span><br><span class="line">      &#125;)</span><br><span class="line">      onBeforeUpdate(()=&gt;&#123;</span><br><span class="line">        console.log("数据更新时调用")</span><br><span class="line">      &#125;)</span><br><span class="line">      onUnmounted(()=&gt;&#123;</span><br><span class="line">        console.log("组件已完成了销毁")</span><br><span class="line">      &#125;)</span><br><span class="line">      onErrorCaptured(()=&gt;&#123;</span><br><span class="line">        console.log("在错误捕获")</span><br><span class="line">      &#125;)</span><br><span class="line">      onUpdated(()=&gt;&#123;</span><br><span class="line">        console.log("页面也完成了更新")</span><br><span class="line">      &#125;)</span><br><span class="line">      onMounted(() =&gt; &#123;</span><br><span class="line">        console.log("挂载后 &gt;&gt;&gt;&gt;&gt;&gt;01");</span><br><span class="line">      &#125;);</span><br><span class="line">      onRenderTriggered(() =&gt; &#123;</span><br><span class="line">        console.log('渲染 - 触发')</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      // 页面加载的时候触发</span><br><span class="line">      const count = ref(0);</span><br><span class="line">      const count02 = ref('文字');</span><br><span class="line">      const text = ref('文字');</span><br><span class="line">      let test = ref("我们都是好孩子"); // 定义test默认显示内容</span><br><span class="line">      // 获取当前路由</span><br><span class="line">      console.log(ctx.$router.currentRoute.value);</span><br><span class="line">      // 页面加载前计算属性获取vuex上的属性</span><br><span class="line">      const a = computed(() =&gt; ctx.$store.state.test.a);</span><br><span class="line">      const update = () =&gt; &#123;</span><br><span class="line">        // 修改vuex的信息</span><br><span class="line">        ctx.$store.commit("setTestA", count.value * 10);</span><br><span class="line">        count.value = count.value*10</span><br><span class="line">        console.log(ctx.$store.state.test.a);</span><br><span class="line">      &#125;;</span><br><span class="line">      const add = () =&gt; &#123;</span><br><span class="line">        // 点击动作</span><br><span class="line">        test.value = "我是好人"; // 修改值</span><br><span class="line">        count.value++; // count加一</span><br><span class="line">      &#125;;</span><br><span class="line">      watch(() =&gt; &#123;</span><br><span class="line">                // 页面加载就读取这个信息 监听属性的变化</span><br><span class="line">                console.log("---- 页面加载就读取这个信息 监听属性的变化 ----");</span><br><span class="line">                console.log(count);</span><br><span class="line">                count.value;</span><br><span class="line">              &#125;,(val) =&gt; &#123;</span><br><span class="line">                console.log("---- 页面加载就读取这个信息 ----");</span><br><span class="line">                console.log(`count is $&#123;val&#125;`);</span><br><span class="line">              &#125;</span><br><span class="line">      );</span><br><span class="line">      // 计算属性获取和写入</span><br><span class="line">      const doubleCount = computed(()=&gt;&#123;</span><br><span class="line">        // 计算属性获取 count.value * 2</span><br><span class="line">        return count.value * 2;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      return &#123;</span><br><span class="line">        // 和vue2的data 默认在上面ref('')定义 返回定义的对象</span><br><span class="line">        count,</span><br><span class="line">        count02,</span><br><span class="line">        test,</span><br><span class="line">        doubleCount,</span><br><span class="line">        add,</span><br><span class="line">        a,</span><br><span class="line">        update,</span><br><span class="line">        text</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 数据改变的时候使用，事件数据，表单数据 - 和原先的data一样</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      // 这个比上面的on要晚</span><br><span class="line">      console.log('挂载后 &gt;&gt;&gt;&gt;&gt;&gt;02')</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getgreet() &#123;</span><br><span class="line">        console.log("---- methods的点击动作 ----");</span><br><span class="line">        this.count02 = "四叶草02"</span><br><span class="line">        console.log(this.doubleCount)</span><br><span class="line">        this.count = 10</span><br><span class="line">        console.log("---- end methods的点击动作 ----");</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    watch:&#123;</span><br><span class="line">      count(old,newVal)&#123;</span><br><span class="line">        console.log(old,newVal)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这里的 add 方法不再需要定义在 methods 中，这样会造成setup内代码复杂化，找不到那个<br>但注意更新 count 值的时候不能直接使用 count++，而应使用 count.value++，<br>更新代码后，点击按钮，count 的值就会更新了：<br>在 methods 中不需要count.value++ 直接 count++ 即可</p><h2 id="计算属性和监听器"><a href="#计算属性和监听器" class="headerlink" title="计算属性和监听器"></a>计算属性和监听器</h2><p>Vue 3.0 中计算属性和监听器的实现依赖 computed 和 watch 方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="test"&gt;</span><br><span class="line">    &lt;h1&gt;test count: &#123;&#123;count&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;div&gt;count * 2 = &#123;&#123;doubleCount&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click="add"&gt;add&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; ref, computed, watch &#125; from 'vue'</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    setup () &#123;</span><br><span class="line">      const count = ref(0)</span><br><span class="line">      const add = () =&gt; &#123;</span><br><span class="line">        count.value++</span><br><span class="line">      &#125;</span><br><span class="line">      watch(() =&gt; count.value, val =&gt; &#123;</span><br><span class="line">        console.log(`count is $&#123;val&#125;`)</span><br><span class="line">      &#125;)</span><br><span class="line">      const doubleCount = computed(() =&gt; count.value * 2)</span><br><span class="line">      return &#123;</span><br><span class="line">        count,</span><br><span class="line">        doubleCount,</span><br><span class="line">        add</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>计算属性 computed 是一个方法，里面需要包含一个回调函数，当我们访问计算属性返回结果时，会自动获取回调函数的值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const doubleCount = computed(() =&gt; count.value * 2)</span><br></pre></td></tr></table></figure><p>监听器 watch 同样是一个方法，它包含 2 个参数，2 个参数都是 function：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">watch(() =&gt; count.value, </span><br><span class="line">  val =&gt; &#123;</span><br><span class="line">    console.log(`count is $&#123;val&#125;`)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>第一个参数是监听的值，count.value 表示当 count.value 发生变化就会触发监听器的回调函数，即第二个参数，第二个参数可以执行监听时候的回调</p><p>如果是2 个以上的监听属性 就这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">watch(</span><br><span class="line">  [refA, () &#x3D;&gt; refB.value],</span><br><span class="line">  ([a, b], [prevA, prevB]) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#96;a is: $&#123;a&#125;&#96;)</span><br><span class="line">    console.log(&#96;b is: $&#123;b&#125;&#96;)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="获取路由"><a href="#获取路由" class="headerlink" title="获取路由"></a>获取路由</h2><p>Vue 3.0 中通过 getCurrentInstance 方法获取当前组件的实例，然后通过 ctx 属性获得当前上下文，</p><p>ctx.$router 是 Vue Router 实例，里面包含了 currentRoute 可以获取到当前的路由信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; getCurrentInstance &#125; from &#39;vue&#39;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    setup () &#123;</span><br><span class="line">      const &#123; ctx &#125; &#x3D; getCurrentInstance()</span><br><span class="line">      console.log(ctx.$router.currentRoute.value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>配置axios</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//git请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.创建axios的实例</span></span><br><span class="line">    <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">        baseURL: <span class="string">'/api'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.axios的拦截器</span></span><br><span class="line">    <span class="comment">// 2.1.请求拦截的作用</span></span><br><span class="line">    instance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"请求拦截器"</span>)</span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;,err =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> err.data</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.2.响应拦截</span></span><br><span class="line">    instance.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"响应拦截"</span>)</span><br><span class="line">        <span class="keyword">return</span> res.data</span><br><span class="line">    &#125;,err =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> err.data</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.发送真正的网络请求</span></span><br><span class="line">    <span class="keyword">return</span> instance(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vue.confing.js - 跨域配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api'</span>: &#123;</span><br><span class="line">                target: <span class="string">'http://localhost:3000/'</span>, <span class="comment">//接口域名</span></span><br><span class="line">                changeOrigin: <span class="literal">true</span>,             <span class="comment">//是否跨域</span></span><br><span class="line">                ws: <span class="literal">true</span>,                       <span class="comment">//是否代理 websockets</span></span><br><span class="line">                secure: <span class="literal">true</span>,                   <span class="comment">//是否https接口</span></span><br><span class="line">                pathRewrite: &#123;                  <span class="comment">//路径重置</span></span><br><span class="line">                    <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>配置请求方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">"./index"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        url: <span class="string">'/goods'</span>,</span><br><span class="line">        method:<span class="string">'get'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        url: <span class="string">'/goods/add'</span>,</span><br><span class="line">        method:<span class="string">'get'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        url: <span class="string">`/goods/del?id=<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">        method:<span class="string">'get'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">amend</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        url: <span class="string">`/goods/amend`</span>,</span><br><span class="line">        data:data,</span><br><span class="line">        method:<span class="string">'post'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">upImage</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(&#123;</span><br><span class="line">        url: <span class="string">`/goods/upImage`</span>,</span><br><span class="line">        data:data,</span><br><span class="line">        method:<span class="string">'post'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $api = <span class="built_in">require</span>(<span class="string">'@/api/ceshi.js'</span>)</span><br><span class="line">$api.getHomeMultidata().then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  message.value = res.data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Vuex-的集成方法如下："><a href="#Vuex-的集成方法如下：" class="headerlink" title="Vuex 的集成方法如下："></a>Vuex 的集成方法如下：</h2><p>定义 Vuex 状态<br>第一步，修改 src/store/index.js 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import Vuex from &#39;vuex&#39;</span><br><span class="line"></span><br><span class="line">export default Vuex.createStore(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    test: &#123;</span><br><span class="line">      a: 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    setTestA(state, value) &#123;</span><br><span class="line">      state.test.a &#x3D; value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Vuex 的语法和 API 基本没有改变,我们在 state 中创建了一个 test.a 状态，在 mutations 中添加了修改 state.test.a 状态的方法： setTestA</p><h2 id="引用-Vuex-状态"><a href="#引用-Vuex-状态" class="headerlink" title="引用 Vuex 状态"></a>引用 Vuex 状态</h2><p>第二步，在 Test.vue 中，通过计算属性使用 Vuex 状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;test&quot;&gt;</span><br><span class="line">    &lt;h1&gt;test count: &#123;&#123;count&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;div&gt;count * 2 &#x3D; &#123;&#123;doubleCount&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;state from vuex &#123;&#123;a&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;add&quot;&gt;add&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; ref, computed, watch, getCurrentInstance &#125; from &#39;vue&#39;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    setup () &#123;</span><br><span class="line">      const count &#x3D; ref(0)</span><br><span class="line">      const add &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        count.value++</span><br><span class="line">      &#125;</span><br><span class="line">      watch(() &#x3D;&gt; count.value, val &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#96;count is $&#123;val&#125;&#96;)</span><br><span class="line">      &#125;)</span><br><span class="line">      const doubleCount &#x3D; computed(() &#x3D;&gt; count.value * 2)</span><br><span class="line">      const &#123; ctx &#125; &#x3D; getCurrentInstance()</span><br><span class="line">      console.log(ctx.$router.currentRoute.value)</span><br><span class="line">      const a &#x3D; computed(() &#x3D;&gt; ctx.$store.state.test.a)</span><br><span class="line">      return &#123;</span><br><span class="line">        count,</span><br><span class="line">        doubleCount,</span><br><span class="line">        add,</span><br><span class="line">        a</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>这里我们通过计算属性来引用 Vuex 中的状态：</p><p>const a = computed(() =&gt; ctx.$store.state.test.a)<br>ctx 是上节中我们提到的当前组件实例</p><h2 id="更新-Vuex-状态"><a href="#更新-Vuex-状态" class="headerlink" title="更新 Vuex 状态"></a>更新 Vuex 状态</h2><p>更新 Vuex 状态仍然使用 commit 方法，这点和 Vuex 3.0 版本一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;test&quot;&gt;</span><br><span class="line">    &lt;h1&gt;test count: &#123;&#123;count&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;div&gt;count * 2 &#x3D; &#123;&#123;doubleCount&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div&gt;state from vuex &#123;&#123;a&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;add&quot;&gt;add&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;update&quot;&gt;update a&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; ref, computed, watch, getCurrentInstance &#125; from &#39;vue&#39;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    setup () &#123;</span><br><span class="line">      const count &#x3D; ref(0)</span><br><span class="line">      const add &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        count.value++</span><br><span class="line">      &#125;</span><br><span class="line">      watch(() &#x3D;&gt; count.value, val &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#96;count is $&#123;val&#125;&#96;)</span><br><span class="line">      &#125;)</span><br><span class="line">      const doubleCount &#x3D; computed(() &#x3D;&gt; count.value * 2)</span><br><span class="line">      const &#123; ctx &#125; &#x3D; getCurrentInstance()</span><br><span class="line">      console.log(ctx.$router.currentRoute.value)</span><br><span class="line">      const a &#x3D; computed(() &#x3D;&gt; ctx.$store.state.test.a)</span><br><span class="line">      const update &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        ctx.$store.commit(&#39;setTestA&#39;, count)</span><br><span class="line">      &#125;</span><br><span class="line">      return &#123;</span><br><span class="line">        count,</span><br><span class="line">        doubleCount,</span><br><span class="line">        add,</span><br><span class="line">        a,</span><br><span class="line">        update</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>这里我们点击 update a 按钮后，会触发 update 方法，此时会通过 ctx.$store.commit 调用 setTestA 方法，将 count 的值覆盖 state.test.a 的值</p><p>总的效果呢是这样的<br>文章来源于：<a href="https://www.cnblogs.com/yf-html/p/12753540.html" target="_blank" rel="noopener">https://www.cnblogs.com/yf-html/p/12753540.html</a></p><h2 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a>render函数</h2><p>新建一个js文件之后直接写js即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// 基础写法，不完全，需要查询官网所给出的api</span><br><span class="line"> export default &#123;</span><br><span class="line">     data()&#123;</span><br><span class="line">         return &#123;</span><br><span class="line">             red:'red',</span><br><span class="line">             cont:1</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     render() &#123;</span><br><span class="line">         return ('div',&#123;</span><br><span class="line">             'class': &#123;</span><br><span class="line">                 'isRed':this.red</span><br><span class="line">             &#125;,</span><br><span class="line">         &#125;,[</span><br><span class="line">             ('p','我是p标签' + this.cont)</span><br><span class="line">         ])</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line">     &#125;,</span><br><span class="line"> &#125;</span><br><span class="line">// jsx 写法，很多需要自己去查写法，比如文字在div中显示不出来，在span标签中显示出来</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            red:'red',</span><br><span class="line">            cont:1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    render() &#123;</span><br><span class="line">let text = `&lt;div class="works-wrapper" class="$&#123;this.red&#125;"&gt;</span><br><span class="line">                            &lt;span&gt;Hello&lt;/span&gt;</span><br><span class="line">                        &lt;/div&gt;`</span><br><span class="line">        return text</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import 命名的名称 from "@/components/render的js文件.js";</span><br></pre></td></tr></table></figure><h3 id="在render中使用"><a href="#在render中使用" class="headerlink" title="在render中使用"></a>在render中使用</h3><p>在模板中导入直接使用 - 和模板一个使用方式</p><h2 id="背景问题"><a href="#背景问题" class="headerlink" title="背景问题"></a>背景问题</h2><p>如果背景在div的style标签上显示不出来的时候，需要添加 require(‘图片的路径’)，下面由魔法字符串组成<br> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="machine-bg" :style="&#123;</span><br><span class="line">      backgroundImage:`url($&#123;require('../common/sprite-map.jpg')&#125;)`</span><br><span class="line">    &#125;"&gt;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue3.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node基本插件</title>
      <link href="/A-lyc/2099/10/19/node/node%E5%9F%BA%E6%9C%AC%E6%8F%92%E4%BB%B6/"/>
      <url>/A-lyc/2099/10/19/node/node%E5%9F%BA%E6%9C%AC%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="后端：Strapi-非常好的后端框架"><a href="#后端：Strapi-非常好的后端框架" class="headerlink" title="后端：Strapi 非常好的后端框架"></a>后端：Strapi 非常好的后端框架</h2><p>官网：<a href="https://strapi.io/" target="_blank" rel="noopener">https://strapi.io/</a></p><ul><li>使用npm<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-strapi-app my-project --quickstart</span><br></pre></td></tr></table></figure></li></ul><h2 id="express-node框架可查官网"><a href="#express-node框架可查官网" class="headerlink" title="express node框架可查官网"></a>express node框架可查官网</h2><ul><li>官网：<a href="https://www.expressjs.com.cn/starter/installing.html" target="_blank" rel="noopener">https://www.expressjs.com.cn/starter/installing.html</a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save express</span><br></pre></td></tr></table></figure></li></ul><h2 id="art-template-模板插件"><a href="#art-template-模板插件" class="headerlink" title="art-template 模板插件"></a>art-template 模板插件</h2><ul><li>官网：<a href="https://aui.github.io/art-template/zh-cn/index.html" target="_blank" rel="noopener">https://aui.github.io/art-template/zh-cn/index.html</a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save art-template express-art-template</span><br></pre></td></tr></table></figure></li></ul><h2 id="nodemon-修改自动更新代码"><a href="#nodemon-修改自动更新代码" class="headerlink" title="nodemon 修改自动更新代码"></a>nodemon 修改自动更新代码</h2><ul><li>node自带应该 最好全局安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nodemon -g</span><br></pre></td></tr></table></figure></li></ul><h2 id="解析post请求体的插件"><a href="#解析post请求体的插件" class="headerlink" title="解析post请求体的插件"></a>解析post请求体的插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save body-parser</span><br></pre></td></tr></table></figure><h2 id="在Node中操作mongod数据库"><a href="#在Node中操作mongod数据库" class="headerlink" title="在Node中操作mongod数据库"></a>在Node中操作mongod数据库</h2><ul><li>使用官方的mongod包来操作<br>· 网址gethup：<a href="https://github.com/mongodb/node-mongodb-native" target="_blank" rel="noopener">https://github.com/mongodb/node-mongodb-native</a></li></ul><h2 id="使用第三方mongoose框架来操作mongoDB操作数据库"><a href="#使用第三方mongoose框架来操作mongoDB操作数据库" class="headerlink" title="使用第三方mongoose框架来操作mongoDB操作数据库"></a>使用第三方mongoose框架来操作mongoDB操作数据库</h2><ul><li>第三方包，基于mongoDB官方第三方包做了封装，名字交mongoose<br>· 官网：<a href="http://www.mongoosejs.net/" target="_blank" rel="noopener">http://www.mongoosejs.net/</a></li><li>安装使用<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save mongoose</span><br></pre></td></tr></table></figure></li></ul><h2 id="处理excel文件的读写"><a href="#处理excel文件的读写" class="headerlink" title="处理excel文件的读写"></a>处理excel文件的读写</h2><h3 id="一、读取"><a href="#一、读取" class="headerlink" title="一、读取"></a>一、读取</h3><h4 id="1-安装-node-xlsx"><a href="#1-安装-node-xlsx" class="headerlink" title="1. 安装 node-xlsx"></a>1. 安装 node-xlsx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install node-xlsx --save</span><br></pre></td></tr></table></figure><h4 id="2-解析代码"><a href="#2-解析代码" class="headerlink" title="2. 解析代码"></a>2. 解析代码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const xlsx = require('node-xlsx');</span><br><span class="line"> </span><br><span class="line">// 解析得到文档中的所有 sheet</span><br><span class="line">let sheets = xlsx.parse('xxx.xls');</span><br><span class="line"> </span><br><span class="line">// 遍历 sheet</span><br><span class="line">sheets.forEach(function(sheet)&#123;</span><br><span class="line">    console.log(sheet['name']);</span><br><span class="line">    // 读取每行内容</span><br><span class="line">    for(let rowId in sheet['data'])&#123;</span><br><span class="line">        console.log(rowId);</span><br><span class="line">        let row=sheet['data'][rowId];</span><br><span class="line">        console.log(row);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="二、写入"><a href="#二、写入" class="headerlink" title="二、写入"></a>二、写入</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">var data = [</span><br><span class="line">    &#123;</span><br><span class="line">        name: 'sheet1',</span><br><span class="line">        data: [</span><br><span class="line">            [</span><br><span class="line">                'ID',</span><br><span class="line">                'Name',</span><br><span class="line">                'Score'</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                '1',</span><br><span class="line">                'Michael',</span><br><span class="line">                '99'</span><br><span class="line"></span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                '2',</span><br><span class="line">                'Jordan',</span><br><span class="line">                '98'</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: 'sheet2',</span><br><span class="line">        data: [</span><br><span class="line">            [</span><br><span class="line">                'AA',</span><br><span class="line">                'BB'</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                '23',</span><br><span class="line">                '24'</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">var buffer = xlsx.build(data);</span><br><span class="line"></span><br><span class="line">// 写入文件</span><br><span class="line">fs.writeFile('a.xlsx', buffer, function(err) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        console.log("Write failed: " + err);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    console.log("Write completed.");</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="文件解压"><a href="#文件解压" class="headerlink" title="文件解压"></a>文件解压</h2><h3 id="安装node-stream-zip"><a href="#安装node-stream-zip" class="headerlink" title="安装node-stream-zip"></a>安装node-stream-zip</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save node-stream-zip</span><br></pre></td></tr></table></figure><p>新建文件夹为fileType内有files-1605681955440.zip文件<br>同级别的新建unapi.js,代码如下，<br>这个是导出了一个Promise</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">// 导入压缩包</span><br><span class="line">const StreamZip = require('node-stream-zip');</span><br><span class="line"></span><br><span class="line">// 导入文件模块</span><br><span class="line">const fs = require('fs');</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 插件字写 格式化时间</span><br><span class="line">const &#123; getNowFormatDate &#125; = require('./common/dateTime')</span><br><span class="line">let time = getNowFormatDate('')</span><br><span class="line"></span><br><span class="line">// 手动删除压缩包</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * path:传入路径压缩包的路径，包括文件夹和文件名</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">module.exports = function unzipCompress(path,) &#123;</span><br><span class="line">  // 文件路径，固定的</span><br><span class="line">  let filesType = './fileType/'</span><br><span class="line"></span><br><span class="line">  // 根据路径裁切出文件名</span><br><span class="line">  // let name = path.split(filesType)[1]</span><br><span class="line"></span><br><span class="line">  // 查找 某个文件 测试使用</span><br><span class="line">  const zip = new StreamZip(&#123;</span><br><span class="line">    file: './fileType/files-1605681955440.zip',</span><br><span class="line">    storeEntries: true</span><br><span class="line">  &#125;);</span><br><span class="line">  // 返回一个promise</span><br><span class="line">  return new Promise((res,rej)=&gt; &#123;</span><br><span class="line">    // 错误的时候</span><br><span class="line">    zip.on('error', err =&gt; &#123;</span><br><span class="line">      rej(err)</span><br><span class="line">    &#125;);</span><br><span class="line">    // 返回一个数组，但是会少去一个文件</span><br><span class="line">    let arr = []</span><br><span class="line"></span><br><span class="line">    // 在解压文件夹时，您可以侦听解压事件 - 图片重命名</span><br><span class="line">    zip.on('extract', (entry, file) =&gt; &#123;</span><br><span class="line">      console.log(`Extracted $&#123;entry.name&#125; to $&#123;file&#125;`);</span><br><span class="line">      let name = file.split('.')[1]</span><br><span class="line">      /**</span><br><span class="line">       * 1：旧文件所在的目录，包括文件名，2：新文件所在的目录，包括文件名，3：回调</span><br><span class="line">       */</span><br><span class="line">      fs.rename(`$&#123;file&#125;`, `./fileType/files-$&#123;Date.now()&#125;$&#123;time&#125;.$&#123;name&#125;`, err =&gt; &#123;</span><br><span class="line">        if (err) throw err;</span><br><span class="line">        console.log('重命名完成')</span><br><span class="line">        arr.push(`./fileType/files-$&#123;Date.now()&#125;$&#123;time&#125;.$&#123;name&#125;`)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 提取所有</span><br><span class="line">    zip.on('ready', () =&gt; &#123;</span><br><span class="line">      // 创建目录</span><br><span class="line">      // fs.mkdirSync('extracted');</span><br><span class="line">      // 1：unll ，2：文件路径， 3：回调函数</span><br><span class="line">      zip.extract(null, './fileType', (err, count) =&gt; &#123;</span><br><span class="line">        console.log(err ? 'Extract error' : `Extracted $&#123;count&#125; entries`);</span><br><span class="line">        res(arr)</span><br><span class="line">        zip.close();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 在加载期间为每个条目生成条目事件</span><br><span class="line">    zip.on('entry', entry =&gt; &#123;</span><br><span class="line">      console.log('在加载期间为每个条目生成条目事件')</span><br><span class="line">      // you can already stream this entry,</span><br><span class="line">      // without waiting until all entry descriptions are read (suitable for very large archives)</span><br><span class="line">      console.log(`XXX ：  $&#123;entry.name.split('.')[1]&#125; + ./fileType/$&#123;entry.name&#125;`);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新建文件使用"><a href="#新建文件使用" class="headerlink" title="新建文件使用"></a>新建文件使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const xlsxCompress = require('./xlsx');</span><br><span class="line">async function name(params) &#123;</span><br><span class="line">  xlsxCompress().then(res =&gt; &#123;</span><br><span class="line">   console.log('---- 1 ----')</span><br><span class="line">   console.log(res)</span><br><span class="line">   console.log('---- 2 ----')</span><br><span class="line"> &#125;)</span><br><span class="line">  </span><br><span class="line">&#125; </span><br><span class="line">name()</span><br></pre></td></tr></table></figure><h2 id="图片批处理插件-images"><a href="#图片批处理插件-images" class="headerlink" title="图片批处理插件 images"></a>图片批处理插件 images</h2><h3 id="首先先安装npm-install-images"><a href="#首先先安装npm-install-images" class="headerlink" title="首先先安装npm install images"></a>首先先安装npm install images</h3><p>文件夹：models内建立一个上传图片插件文件夹例如名字：uploadimg<br>uploadimg.js</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// 导入可接收图片的插件</span><br><span class="line">const multer = require('multer')</span><br><span class="line"></span><br><span class="line">const fs = require('fs')</span><br><span class="line"></span><br><span class="line">// 插件字写 格式化时间</span><br><span class="line">const &#123; getNowFormatDate &#125; = require('../common/dateTime')</span><br><span class="line">let time = getNowFormatDate('')</span><br><span class="line"></span><br><span class="line">// 定义图片中间件的内容</span><br><span class="line">const storage = multer.diskStorage(&#123;</span><br><span class="line">  // 定义保存图片的地址</span><br><span class="line">  destination: function (req, file, cb) &#123;</span><br><span class="line">    // 某个文件夹下的日期文件下的图片目录</span><br><span class="line">    let path = __dirname + '/../uploads/' + time</span><br><span class="line">    // 返回这个目录</span><br><span class="line">    file.time = time</span><br><span class="line">    let ifFile = fs.existsSync(path)</span><br><span class="line">    </span><br><span class="line">    if (ifFile)&#123;</span><br><span class="line">      cb(null, path)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      fs.mkdirSync(path)</span><br><span class="line">      cb(null, path)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 定义保存图片的名称，默认没有后缀名，需要添加后缀名</span><br><span class="line">  filename: function (req, file, cb) &#123;</span><br><span class="line">    let suffix = file.originalname.split('.')</span><br><span class="line">    suffix = suffix[suffix.length - 1]</span><br><span class="line">    // console.log(suffix)</span><br><span class="line"></span><br><span class="line">    // 图片使用</span><br><span class="line">    // let mimetype = file.mimetype.split('/')[1]</span><br><span class="line">    cb(null, file.fieldname + '-' + Date.now() + time + '.' + suffix)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">module.exports = multer(&#123; storage &#125;)</span><br></pre></td></tr></table></figure><h3 id="router"><a href="#router" class="headerlink" title="router"></a>router</h3><p>之后在router路由文件内写上传的图片批处理的过程<br>内有一个批量压缩的文件，可以直接去除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 导入express</span><br><span class="line">const express = require('express')</span><br><span class="line"></span><br><span class="line">// 导入文件系统</span><br><span class="line">const fs = require('fs')</span><br><span class="line"></span><br><span class="line">// 导入路径</span><br><span class="line">const path = require('path')</span><br><span class="line"></span><br><span class="line">// 压缩图片插件</span><br><span class="line">var images = require("images");</span><br><span class="line"></span><br><span class="line">// 导入压缩图片 - 批量压缩图片</span><br><span class="line">const imageCompress = require('../img.js')</span><br><span class="line"></span><br><span class="line">// 使用Router</span><br><span class="line">const router = express.Router()</span><br><span class="line"></span><br><span class="line">// 导入上面的图片压缩插件</span><br><span class="line">const upload = require('../models/uploadimg')</span><br><span class="line"></span><br><span class="line"> // 上传图片并进行压缩 upload.single('files') - 必选</span><br><span class="line">router.post('/', upload.single('files'), async (req, res) =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    let file = req.file</span><br><span class="line">    console.log(file)</span><br><span class="line">    // 返回的线上地址</span><br><span class="line">    file.url = `http://localhost:3000/uploads/$&#123;file.filename&#125;`</span><br><span class="line">    /**</span><br><span class="line">    *压缩图片的比例</span><br><span class="line">    * 上传之后直接进行压缩</span><br><span class="line">    *file.path：图片路径</span><br><span class="line">    *size：图片宽高</span><br><span class="line">    *save：（保存路径 - quality：保存质量）</span><br><span class="line">    */</span><br><span class="line">    images(file.path).size(500).save(file.path, &#123; quality: 90&#125;)</span><br><span class="line"></span><br><span class="line">    // 返回json数据</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      code: 20000,</span><br><span class="line">      data: file,// 返回数据的名称</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.log(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 删除图片</span><br><span class="line">router.delete('/', async (req, res) =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    // 传来的数据</span><br><span class="line">    let body = req.body</span><br><span class="line">    // 传来的名称</span><br><span class="line">    let name = body.filename</span><br><span class="line">    // 使用node的fs删除当前图片，可以直接传路径</span><br><span class="line">    fs.unlinkSync(path.join(__dirname, '../uploads/' + name))</span><br><span class="line">    // 返回数据</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      code: 20000,</span><br><span class="line">      data: [],// 返回数据的名称</span><br><span class="line">      message: '文件已删除',// 返回数据的名称</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.log('错误')</span><br><span class="line">    console.log(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 批量压缩图片</span><br><span class="line">router.get('/compress',async (req,res)=&gt;&#123;</span><br><span class="line">  try&#123;</span><br><span class="line">    // 插件时导入的 const imageCompress = require('../img.js') </span><br><span class="line">    // 需要传入压缩路径</span><br><span class="line">    imageCompress('uploads')</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.log('错误')</span><br><span class="line">    console.log(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 导出这个路由</span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><h3 id="批量压缩图片-img-js"><a href="#批量压缩图片-img-js" class="headerlink" title="批量压缩图片 - img.js"></a>批量压缩图片 - img.js</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">const images = require("images");</span><br><span class="line">const fs = require("fs");</span><br><span class="line">// 导入路径</span><br><span class="line">const WithPath = require('path')</span><br><span class="line">// 需要传入一个参数是文件目录</span><br><span class="line">const path = "uploads"; </span><br><span class="line">// 压缩后的文件夹，是否保存源文件的问题</span><br><span class="line">const outpath = "compress"; </span><br><span class="line">module.exports = function compress(path) &#123;</span><br><span class="line">  // 操作文件 读取目录的内容</span><br><span class="line">  fs.readdir(path, function (err, files) &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">      console.log('error:\n' + err);</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    // 循环遍历当前文件目录</span><br><span class="line">    files.forEach(function (file) &#123;</span><br><span class="line">      fs.stat(WithPath.join(__dirname, path + '/' + file), function (err, stat) &#123;</span><br><span class="line">        if (err) &#123; console.log(err); return; &#125;</span><br><span class="line">        if (stat.isDirectory()) &#123;</span><br><span class="line">          // 如果是文件夹遍历</span><br><span class="line">          compress(path + '/' + file);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          //遍历图片</span><br><span class="line">          // console.log(__dirname + '文件名:' + path + '/' + file);</span><br><span class="line">          // console.log(WithPath.join(__dirname, path + '/' + file))</span><br><span class="line">          // 要处理的文件夹</span><br><span class="line">          var name = path + '/' + file;</span><br><span class="line">          // 处理之后另保存的文件夹</span><br><span class="line">          var outName = outpath + '/' + file</span><br><span class="line">            /**</span><br><span class="line">            * 压缩图片的比例</span><br><span class="line">            * name：图片路径</span><br><span class="line">            * size：图片宽高</span><br><span class="line">            * save：（保存路径 - quality：保存质量）</span><br><span class="line">            */</span><br><span class="line">          images(name).size(20).save(name, &#123;</span><br><span class="line">          &#125;);            quality: 82                   </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="附注：api接口"><a href="#附注：api接口" class="headerlink" title="附注：api接口"></a>附注：api接口</h3><p>images(file)<br>Load and decode image from file<br>从指定文件加载并解码图像</p><p>images(width, height)<br>Create a new transparent image<br>创建一个指定宽高的透明图像</p><p>images(buffer[, start[, end]])<br>Load and decode image from a buffer<br>从Buffer数据中解码图像</p><p>images(image[, x, y, width, height])<br>Copy from another image<br>从另一个图像中复制区域来创建图像</p><p>.fill(red, green, blue[, alpha])<br>eg:images(200, 100).fill(0xff, 0x00, 0x00, 0.5) Fill image with color<br>以指定颜色填充图像</p><p>.draw(image, x, y)<br>Draw image on the current image position( x , y )<br>在当前图像( x , y )上绘制 image 图像</p><p>.encode(type[, config])<br>eg:images(“input.png”).encode(“jpg”, {operation:50}) Encode image to buffer, config is image setting.<br>以指定格式编码当前图像到Buffer，config为图片设置，目前支持设置JPG图像质量<br>Return buffer<br>返回填充好的Buffer<br>Note:The operation will cut off the chain<br>注意:该操作将会切断调用链<br>See:.save(file[, type[, config]]) 参考:.save(file[, type[, config]])</p><p>.save(file[, type[, config]])<br>eg:images(“input.png”).encode(“output.jpg”, {operation:50}) Encoding and save the current image to a file, if the type is not specified, type well be automatically determined according to the file, config is image setting. eg: { operation:50 }<br>编码并保存当前图像到 file ,如果type未指定,则根据 file 自动判断文件类型，config为图片设置，目前支持设置JPG图像质量</p><p>.size([width[, height]])<br>Get size of the image or set the size of the image,if the height is not specified, then scaling based on the current width and height<br>获取或者设置图像宽高，如果height未指定，则根据当前宽高等比缩放</p><p>.resize(width[, height])<br>Set the size of the image,if the height is not specified, then scaling based on the current width and height<br>设置图像宽高，如果height未指定，则根据当前宽高等比缩放, 默认采用 bicubic 算法。</p><p>.width([width])<br>Get width for the image or set width of the image<br>获取或设置图像宽度</p><p>.height([height])<br>Get height for the image or set height of the image<br>获取或设置图像高度</p><p>images.setLimit(width, height)<br>Set the limit size of each image<br>设置库处理图片的大小限制,设置后对所有新的操作生效(如果超限则抛出异常)</p><p>images.setGCThreshold(value)<br>Set the garbage collection threshold<br>设置图像处理库自动gc的阈值(当新增内存使用超过该阈值时，执行垃圾回收)</p><p>images.getUsedMemory()<br>Get used memory (in bytes)<br>得到图像处理库占用的内存大小(单位为字节)</p><p>images.gc()<br>Forced garbage collection<br>强制调用V8的垃圾回收机制</p><h2 id="node的实时通讯socket-io"><a href="#node的实时通讯socket-io" class="headerlink" title="node的实时通讯socket.io"></a>node的实时通讯socket.io</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save socket.io</span><br></pre></td></tr></table></figure><p>需要研究一下 。。。。。。</p><h2 id="pdf-lib-模块可让你处理PDF，"><a href="#pdf-lib-模块可让你处理PDF，" class="headerlink" title="pdf-lib 模块可让你处理PDF，"></a>pdf-lib 模块可让你处理PDF，</h2><p>后台文件的functionLife中的psfLid.js中</p><h2 id="sharp-可让您处理几乎所有带有图像的东西，"><a href="#sharp-可让您处理几乎所有带有图像的东西，" class="headerlink" title="sharp 可让您处理几乎所有带有图像的东西，"></a>sharp 可让您处理几乎所有带有图像的东西，</h2><p>暂时为使用。。。。。。</p><h2 id="pkg-将Node项目捆绑到独立的可执行文件中"><a href="#pkg-将Node项目捆绑到独立的可执行文件中" class="headerlink" title="pkg 将Node项目捆绑到独立的可执行文件中"></a>pkg 将Node项目捆绑到独立的可执行文件中</h2><p>暂时为使用。。。。。。</p><h2 id="qrcode生成二维码"><a href="#qrcode生成二维码" class="headerlink" title="qrcode生成二维码"></a>qrcode生成二维码</h2><p>前端直接使用，之后把图传给后端，或者前端把需要生成的东西传给后端后端进行生成之后返回图片</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let canvas = this.$refs['canvas']</span><br><span class="line">  QRCode.toCanvas(canvas, 'sample text', function (error) &#123;</span><br><span class="line">    if (error) console.error(error)</span><br><span class="line">    console.log('success!')</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="百度图表"><a href="#百度图表" class="headerlink" title="百度图表"></a>百度图表</h2><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install echarts --save</span><br></pre></td></tr></table></figure><p>简单使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// 此方法是挂载dom之后</span><br><span class="line"> mounted() &#123;</span><br><span class="line">    // 图表 - 需要页面挂在之后完成</span><br><span class="line">    let echart = this.$refs['echarts']</span><br><span class="line">    var myChart = echarts.init(echart)</span><br><span class="line">    var option = &#123;</span><br><span class="line">      legend: &#123;&#125;,</span><br><span class="line">      tooltip: &#123;&#125;,</span><br><span class="line">      dataset: &#123;</span><br><span class="line">        // 提供一份数据。</span><br><span class="line">        source: [</span><br><span class="line">          ['product', '2015', '2016', '2017', '2018'],</span><br><span class="line">          ['Matcha', 43.3, 85.8, 93.7],</span><br><span class="line">          ['Milk', 83.1, 73.4, 55.1],</span><br><span class="line">          ['Cheese', 86.4, 65.2, 82.5],</span><br><span class="line">          ['W', 72.4, 53.9, 39.1],</span><br><span class="line">          ['Wal=', 70, 1, 90,100],</span><br><span class="line">          ['Waln', 70, 1, 90,100],</span><br><span class="line">          ['Walnu', 70, 1, 90,100],</span><br><span class="line">          ['Walnut', 70, 1, 90,100],</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      // 声明一个 X 轴，类目轴（category）。默认情况下，</span><br><span class="line">      // 类目轴对应到 dataset 第一列。</span><br><span class="line">      xAxis: &#123;type: 'category'&#125;,</span><br><span class="line">      // 声明一个 Y 轴，数值轴。</span><br><span class="line">      yAxis: &#123;&#125;,</span><br><span class="line">      // 声明多个 bar 系列，默认情况下，每个系列会自动对应到 dataset 的每一列。</span><br><span class="line">      series: [</span><br><span class="line">        &#123;type: 'bar'&#125;,</span><br><span class="line">        &#123;type: 'bar'&#125;,</span><br><span class="line">        &#123;type: 'bar'&#125;,</span><br><span class="line">        &#123;type: 'bar'&#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">    // 使用刚指定的配置项和数据显示图表。</span><br><span class="line">    myChart.setOption(option)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> node服务器，node插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodDB数据库</title>
      <link href="/A-lyc/2099/10/11/node/mongodDB%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/A-lyc/2099/10/11/node/mongodDB%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>网址：<a href="https://www.mongodb.com/try/download/community" target="_blank" rel="noopener">https://www.mongodb.com/try/download/community</a></li><li>下载社区级别的，免费 也就是本地的第二个</li><li>根绝菜鸟教程进行安装 网址：<a href="https://www.runoob.com/mongodb/mongodb-window-install.html" target="_blank" rel="noopener">https://www.runoob.com/mongodb/mongodb-window-install.html</a></li><li>环境变量配置，把mongod的路径给到path添加上即可 我的电脑右键属性。。。。。</li><li>mongod –version  =&gt; 查看是否安装很成功</li></ul><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><ul><li>打开控制台输入 mongod<br>· mongod 默认使用执行mongod命令所处盘符根目录下的/data/db作为自己的数据存储<br>· 第一次执行mongod时候需要在根盘符创建/data/db文件夹<br>· 在那个盘符输入，需要在哪一个盘符中创建一个/data/db 文件夹<br>· 修改默认的储存目录  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath-数据存储目录路径</span><br></pre></td></tr></table></figure></li></ul><h2 id="停止数据库"><a href="#停止数据库" class="headerlink" title="停止数据库"></a>停止数据库</h2><ul><li>开启服务的控制台ctrl+c，或者直接关闭数据库</li></ul><h2 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h2><ul><li>开启服务的控制台ctrl+c，或者直接关闭</li></ul><h2 id="连接数据库和退出数据库"><a href="#连接数据库和退出数据库" class="headerlink" title="连接数据库和退出数据库"></a>连接数据库和退出数据库</h2><ul><li>连接之前确保开启数据库</li><li>重新打开控制台<br>· 使用命令mongo 默认打开本机的数据库mongod服务</li><li>退出<br>· exit 在连接状态输入exit 就是退出连接</li></ul><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li>show dbs<br>· 查看当前数据库列表</li><li>db<br>· 查看当前操作的数据库</li><li>use 数据库名称<br>· 切换到指定的数据库（如果没有会新建,没有数据show dbs命令显示不出来）</li><li>db.student.insertOne({‘name’:’syc’})<br>· 插入数据库 名称为student 插入数据</li><li>show collections<br>· 查看数据库名称</li><li>db.student.find()<br>· 查看数据库内容</li><li>db.dropDatabase()<br>· 删除数据库</li><li>db.createCollection(name, options)<br>· 创建集合</li><li>db.名称.drop()<br>· 删除集合 在show collections查看之后删出</li></ul><h2 id="在Node中操作mongod数据库"><a href="#在Node中操作mongod数据库" class="headerlink" title="在Node中操作mongod数据库"></a>在Node中操作mongod数据库</h2><ul><li>使用官方的mongod包来操作<br>· 网址gethup：<a href="https://github.com/mongodb/node-mongodb-native" target="_blank" rel="noopener">https://github.com/mongodb/node-mongodb-native</a></li></ul><h2 id="使用第三方mongoose框架来操作mongoDB操作数据库"><a href="#使用第三方mongoose框架来操作mongoDB操作数据库" class="headerlink" title="使用第三方mongoose框架来操作mongoDB操作数据库"></a>使用第三方mongoose框架来操作mongoDB操作数据库</h2><ul><li>第三方包，基于mongoDB官方第三方包做了封装，名字交mongoose<br>· 官网：<a href="http://www.mongoosejs.net/" target="_blank" rel="noopener">http://www.mongoosejs.net/</a></li><li>安装使用<br>· npm i –save mongoose<br>· 引入mongoose<br>· 设计Schema<br>· 发布model（得到模型构造函数）<ul><li>所有操作基于model操作</li><li>查询，增加，修改，删除<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载包</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="comment">// 连接mongoDB数据库</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/test'</span>,&#123;<span class="attr">useMongoClient</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个模型，设计数据库</span></span><br><span class="line"><span class="comment">// mongoDB时动态的，非常灵活，只需要在代码中设计你的数据库就可以了</span></span><br><span class="line"><span class="comment">// mongoose这个包就可以让你的设计编写过程变得简单</span></span><br><span class="line"><span class="comment">// 第一个参数：表名(生成小写复数表明)，第二个参数：数据结构 表中存储的文档，有个name时字符串格式</span></span><br><span class="line"><span class="keyword">const</span> Cat = mongoose.model(<span class="string">'Cat'</span>, &#123; <span class="attr">name</span>: <span class="built_in">String</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化一个Cat</span></span><br><span class="line"><span class="keyword">const</span> kitty = <span class="keyword">new</span> Cat(&#123; <span class="attr">name</span>: <span class="string">'四叶草'</span> + i &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 持久化保存kitty实例</span></span><br><span class="line">kitty.save().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'meow,成功'</span>)).catch(<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(e)&#125;);</span><br></pre></td></tr></table></figure></li></ul><ul><li>查看是否存进去了<br>· 数据库的名叫test<br>· use test中去<br>· show collections 查看数据库名<br>· db.cats.find()</li><li>问题 如何让在数据库中出来到最初始目录</li></ul></li></ul><h2 id="mongoDB的基本概念"><a href="#mongoDB的基本概念" class="headerlink" title="mongoDB的基本概念"></a>mongoDB的基本概念</h2><ul><li>多个数据库 - 最外层的对象是数据库</li><li>一个数据库中可以有多个集合 - 是里面对象中的数组（user:[]）</li><li>一个集合当中可以有多个文档 - 是集合里面的每一个对象 </li><li>文档结构没有任何限制</li><li>mongodb多个数据库表<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    QQ:&#123;</span><br><span class="line">     users:[</span><br><span class="line">      &#123;dom:"文档"&#125;,&#123;&#125;,&#123;&#125;...</span><br><span class="line">    ],</span><br><span class="line">     products:[],</span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br><span class="line">    taobao:&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;,</span><br><span class="line">    baidu:&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="mongoose-router文件加内的路由"><a href="#mongoose-router文件加内的路由" class="headerlink" title="mongoose router文件加内的路由"></a>mongoose router文件加内的路由</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">const express = require('express')</span><br><span class="line">// 引用数据模块</span><br><span class="line">const mongoose = require('mongoose')</span><br><span class="line"></span><br><span class="line">// 导入可接收图片的插件</span><br><span class="line">var multer = require('multer')</span><br><span class="line"></span><br><span class="line">// 使用Router</span><br><span class="line">const router = express.Router()</span><br><span class="line"></span><br><span class="line">// 定义图片中间件的内容</span><br><span class="line">var storage = multer.diskStorage(&#123;</span><br><span class="line">    // 定义保存图片的地址</span><br><span class="line">    destination: function (req, file, cb) &#123;</span><br><span class="line">        cb(null, __dirname + '/../uploads')</span><br><span class="line">    &#125;,</span><br><span class="line">    // 定义保存图片的名称，默认没有后缀名，需要添加后缀名</span><br><span class="line">    filename: function (req, file, cb) &#123;</span><br><span class="line">        let mimetype = file.mimetype.split('/')[1]</span><br><span class="line">        cb(null, file.fieldname + '-' + Date.now() + '.' + mimetype)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 使用图片中间见</span><br><span class="line">var upload = multer(&#123; storage &#125;)</span><br><span class="line"></span><br><span class="line">const Goods = require('../models/goods')</span><br><span class="line"></span><br><span class="line">// 连接数据库 数据库的表名叫shop </span><br><span class="line">mongoose.connect('mongodb://localhost/shop', &#123;useNewUrlParser: true&#125;)</span><br><span class="line"></span><br><span class="line">//下面就进行判断，（连接成功，连接失败，连接断开）</span><br><span class="line">mongoose.connection.on('connected', function () &#123;</span><br><span class="line">    console.log("连接成功 - 1");</span><br><span class="line">&#125;)</span><br><span class="line">mongoose.connection.on('error', function () &#123;</span><br><span class="line">    console.log("连接失败 - 2");</span><br><span class="line">&#125;)</span><br><span class="line">mongoose.connection.on('disconnected', function () &#123;</span><br><span class="line">    console.log("断开连接 - 3");</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//路由获取 列表</span><br><span class="line">router.get('/', function (req, res, next) &#123;</span><br><span class="line">    //查询mongoDB的goods数据</span><br><span class="line">    Goods.find().then((doc) =&gt;&#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            data:doc,// 返回数据的名称</span><br><span class="line">            count:doc.length // 返回数据的长度</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).catch(err=&gt;&#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            status: '1',</span><br><span class="line">            msg: err.message</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 添加</span><br><span class="line">router.get('/add', function (req, res, next) &#123;</span><br><span class="line">    //查询mongoDB的goods数据</span><br><span class="line">    let obj = new Goods(&#123;</span><br><span class="line">        name:'四叶草',</span><br><span class="line">        title:'这是内容信息'</span><br><span class="line">    &#125;)</span><br><span class="line">    obj.save().then(doc =&gt;&#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            data:doc,// 返回数据的名称</span><br><span class="line">            count:doc.length // 返回数据的长度</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 删除</span><br><span class="line">router.get('/del',(req, res, next) =&gt; &#123;</span><br><span class="line">    let id = req.query.id</span><br><span class="line">    Goods.remove(&#123;_id: id&#125;).then(data=&gt;&#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            data:data,// 返回数据的名称</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 修改</span><br><span class="line">router.post('/amend',(req,res)=&gt;&#123;</span><br><span class="line">    let data = req.body</span><br><span class="line">    Goods.findByIdAndUpdate(data.id,&#123;</span><br><span class="line">        name: data.name,</span><br><span class="line">    &#125;).then(data =&gt; &#123;</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            data: data,// 返回数据的名称</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 上传upload.single('files') files上传文件类型</span><br><span class="line">router.post('/upImage',upload.single('files'),async (req,res)=&gt;&#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        // 接收传来的信息 </span><br><span class="line">        let file = req.file</span><br><span class="line">        // 传来之后返回数据 定义返回数据的 url，方便线上访问</span><br><span class="line">        file.url = `http://localhost:3000/uploads/$&#123;file.filename&#125;`</span><br><span class="line">        console.log('---- 1 ----')</span><br><span class="line">        console.log(file)</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            data: file,// 返回数据的名称</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;catch(e)&#123;</span><br><span class="line">        console.log(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports = router; //暴露路由</span><br></pre></td></tr></table></figure><h2 id="官方指南"><a href="#官方指南" class="headerlink" title="官方指南"></a>官方指南</h2><h3 id="设计Scheme，发布model"><a href="#设计Scheme，发布model" class="headerlink" title="设计Scheme，发布model"></a>设计Scheme，发布model</h3><ul><li><p>Schema({opstion})：<br>· required: 布尔值或函数 如果值为真，为此属性添加 required 验证器<br>· default: 任何值或函数 设置此路径默认值。如果是函数，函数返回值为默认值<br>· select: 布尔值 指定 query 的默认 projections<br>· validate: 函数 adds a validator function for this property<br>· get: 函数 使用 Object.defineProperty() 定义自定义 getter<br>· set: 函数 使用 Object.defineProperty() 定义自定义 setter<br>· alias: 字符串 仅mongoose &gt;= 4.10.0。 为该字段路径定义虚拟值 gets/sets</p></li><li><p>索引<br>· index: 布尔值 是否对这个属性创建索引<br>· unique: 布尔值 是否对这个属性创建唯一索引<br>· sparse: 布尔值 是否对这个属性创建稀疏索引</p></li><li><p>String<br>lowercase: 布尔值 是否在保存前对此值调用 .toLowerCase()<br>uppercase: 布尔值 是否在保存前对此值调用 .toUpperCase()<br>trim: 布尔值 是否在保存前对此值调用 .trim()<br>match: 正则表达式 创建验证器检查这个值是否匹配给定正则表达式<br>enum: 数组 创建验证器检查这个值是否包含于给定数组</p></li><li><p>Number<br>min: 数值 创建验证器检查属性是否大于或等于该值<br>max: 数值 创建验证器检查属性是否小于或等于该值</p></li><li><p>Date<br>min: Date<br>max: Date<br>网址：<a href="http://www.mongoosejs.net/docs/schematypes.html" target="_blank" rel="noopener">http://www.mongoosejs.net/docs/schematypes.html</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="comment">//拿到mongoose的架构</span></span><br><span class="line"><span class="keyword">const</span> &#123; Schema &#125; = mongoose;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 连接mongoDB数据库</span></span><br><span class="line">mongoose.createConnection(<span class="string">'mongodb://localhost/test'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 设计文档结构 （表结构）</span></span><br><span class="line"><span class="comment">// 就是常见的js数据类型 就是属性名称</span></span><br><span class="line"><span class="comment">// 要求每个文档是下面的类型  Date：是日期  default: Date.now： 默认值</span></span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    title:  <span class="built_in">String</span>,</span><br><span class="line">    email:&#123;</span><br><span class="line">        type:<span class="built_in">String</span></span><br><span class="line">    &#125;,<span class="comment">// 名字是title，类型String 可以不填写</span></span><br><span class="line">    userName:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,<span class="comment">// 类型</span></span><br><span class="line">        <span class="keyword">default</span>:<span class="literal">true</span>, <span class="comment">// 默认值</span></span><br><span class="line">        age:&#123; <span class="attr">type</span>: <span class="built_in">Number</span>, <span class="attr">min</span>: <span class="number">18</span>, <span class="attr">max</span>: <span class="number">65</span> &#125;,<span class="comment">//最大最小值</span></span><br><span class="line">        test: &#123;</span><br><span class="line">            type: <span class="built_in">String</span>,</span><br><span class="line">            index: <span class="literal">true</span>, <span class="comment">// 索引值</span></span><br><span class="line">            unique: <span class="literal">true</span> <span class="comment">// Unique index. If you specify `unique: true`</span></span><br><span class="line">            <span class="comment">// specifying `index: true` is optional if you do `unique: true`</span></span><br><span class="line">          &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    password:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,<span class="comment">// 类型String,Number,Date,Buffer,Boolean,Mixed,Obj,Array</span></span><br><span class="line">        required:<span class="literal">true</span>, <span class="comment">// 必选项required required: [true, 'Why no bacon?']</span></span><br><span class="line">        binary:  Buffer, <span class="comment">//binary = new Buffer(0);</span></span><br><span class="line">        <span class="keyword">default</span>:<span class="string">'12'</span>, <span class="comment">// 默认default</span></span><br><span class="line">        date: <span class="built_in">Date</span>.now,</span><br><span class="line">        enum: [<span class="string">'Coffee'</span>, <span class="string">'Tea'</span>],<span class="comment">// 可选项</span></span><br><span class="line">        age:&#123; <span class="comment">// 最大值最小值</span></span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        min:<span class="number">18</span>,</span><br><span class="line">        max:<span class="number">60</span></span><br><span class="line">        &#125;,</span><br><span class="line">        stuff: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">lowercase</span>: <span class="literal">true</span>, <span class="attr">trim</span>: <span class="literal">true</span> &#125; <span class="comment">// lowercase：小写字体，trim：修剪</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 将文档结构发布为模型 - 第一个参数为字符串，第二个为表架构</span></span><br><span class="line"><span class="comment">// mongoose.model用来将一个架构发布为model</span></span><br><span class="line"><span class="comment">// 第一个参数：传入一个大写名词但数字字符串表示你的数据库名称</span></span><br><span class="line"><span class="comment">//            mongoose会将自动大写名词的字符串生成小写复数集合名称</span></span><br><span class="line"><span class="comment">//            举例：这里的User会变成users集合名称</span></span><br><span class="line"><span class="comment">// 第二个参数：是架构 Schema</span></span><br><span class="line"><span class="comment">// 返回值：模型构造函数</span></span><br><span class="line"><span class="built_in">module</span>.exports =  mongoose.model(<span class="string">'User'</span>, userSchema);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 当有了模型构造函数之后，就可以使用这个构造函数对users集合中的数据操作了（增删改查）</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4 当有了模型构造函数之后，就可以使用这个构造函数对users集合中的数据操作了（增删改查）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> admin = <span class="keyword">new</span> User(&#123;</span><br><span class="line">    userName:<span class="string">"admin"</span>,</span><br><span class="line">    password: <span class="string">"12345"</span>,</span><br><span class="line">    email: <span class="string">"admin@admin.com"</span>,</span><br><span class="line">    title:<span class="string">"user"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">admin.save().then(<span class="function">(<span class="params">ret</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ret)</span><br><span class="line">    res.json(&#123;</span><br><span class="line">            data:doc,<span class="comment">// 返回数据的名称</span></span><br><span class="line">            count:doc.length <span class="comment">// 返回数据的长度</span></span><br><span class="line">        &#125;)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line">User.find().then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'查询'</span>)</span><br><span class="line">     res.json(&#123;</span><br><span class="line">                data:doc,<span class="comment">// 返回数据的名称</span></span><br><span class="line">                count:doc.length <span class="comment">// 返回数据的长度</span></span><br><span class="line">            &#125;)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'失败'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示翻页</span></span><br><span class="line"><span class="comment">// 根据query获取page后的参数为1，2.。。。。</span></span><br><span class="line"> <span class="keyword">let</span> page = req.query.page</span><br><span class="line"> <span class="keyword">let</span> data = &#123;&#125;</span><br><span class="line">    <span class="comment">// page*5 - 5 = 0   =&gt;页码*也页显示条数 - 也页显示条数</span></span><br><span class="line">    <span class="comment">// page为1的时候结果为0   page为2的时候结果为limit内的参数</span></span><br><span class="line">    <span class="comment">// limit：一页显示多少个 skip跳过多少个显示  公式：(page-1)*5</span></span><br><span class="line">    User.find().limit(<span class="number">5</span>).skip((page<span class="number">-1</span>)*<span class="number">5</span>).then(<span class="function"><span class="params">doc</span> =&gt;</span> &#123;</span><br><span class="line">       data.doc = doc</span><br><span class="line">        <span class="keyword">return</span> active.find()</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">doc</span> =&gt;</span>&#123;</span><br><span class="line">        data.doc2 = doc</span><br><span class="line">        res.json(&#123;</span><br><span class="line">            data,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按条件查询 - 得到一个数组。查询多个</span></span><br><span class="line">User.find(&#123;<span class="attr">userName</span>:<span class="string">'admin'</span>&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'查询'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(ret)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'失败'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 得到一个对象。直接找到第一个直接返回，没有返回第一个</span></span><br><span class="line">User.findOne(&#123;<span class="attr">userName</span>:<span class="string">'张三'</span>&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'查询'</span>)</span><br><span class="line">     res.json(&#123;</span><br><span class="line">                data:doc,<span class="comment">// 返回数据的名称</span></span><br><span class="line">                count:doc.length <span class="comment">// 返回数据的长度</span></span><br><span class="line">            &#125;)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'失败'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line">User.remove(&#123;<span class="attr">_id</span>:<span class="string">'5f82a84a875939195ceff0e3'</span>&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'---- 1 ----'</span>)</span><br><span class="line">     res.json(&#123;</span><br><span class="line">                data:doc,<span class="comment">// 返回数据的名称</span></span><br><span class="line">                count:doc.length <span class="comment">// 返回数据的长度</span></span><br><span class="line">            &#125;)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'---- 2 ----'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//根据条件删除一个</span></span><br><span class="line">User.findOneAndRemove(conditions,[options],callback)</span><br><span class="line"><span class="comment">// 根据id删除一个</span></span><br><span class="line">User.findByIdAndRemove(id,[options],callback)</span><br></pre></td></tr></table></figure><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// conditions:条件</span></span><br><span class="line"><span class="comment">// 根据条件更新所有</span></span><br><span class="line">User.update(conditions,doc,[options],callback)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据条件更新一个</span></span><br><span class="line">User.findOneAndUpdate(conditions,doc,[options],callback)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据ID更新</span></span><br><span class="line">User.findByIdAndUpdate(<span class="string">'5f82a8741c097b40345a29f6'</span>,&#123;</span><br><span class="line">    password: <span class="string">'1111'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">                    data:doc,<span class="comment">// 返回数据的名称</span></span><br><span class="line">                    count:doc.length <span class="comment">// 返回数据的长度</span></span><br><span class="line">                &#125;)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'shibai'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="express-mongoose-上传图片"><a href="#express-mongoose-上传图片" class="headerlink" title="express + mongoose 上传图片"></a>express + mongoose 上传图片</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装：npm i multer //express插件上有</span></span><br><span class="line"><span class="comment">/** 在路由文件内 **/</span></span><br><span class="line"><span class="comment">// 初始化安装</span></span><br><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>)</span><br><span class="line"><span class="keyword">var</span> storage = multer.diskStorage(&#123;</span><br><span class="line">    destination: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 图片上传路径 根目录下的/../uploads 需要公开这个目录  </span></span><br><span class="line"><span class="comment">// 返回路径：F:\ceshiXM\demo01\routes/../uploads</span></span><br><span class="line">        cb(<span class="literal">null</span>, __dirname + <span class="string">'/../uploads'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    filename: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 图片默认上传没有后缀的，添加后缀名称</span></span><br><span class="line">        <span class="keyword">let</span> mimetype = file.mimetype.split(<span class="string">'/'</span>)[<span class="number">1</span>]</span><br><span class="line">        cb(<span class="literal">null</span>, file.fieldname + <span class="string">'-'</span> + <span class="built_in">Date</span>.now() + <span class="string">'.'</span> + mimetype)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 导出storage 为upload</span></span><br><span class="line"><span class="comment">// 上传 upload.single('files') 可以req结构出file</span></span><br><span class="line">router.post(<span class="string">'/upImage'</span>,upload.single(<span class="string">'files'</span>),<span class="keyword">async</span> (req,res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> file = req.file</span><br><span class="line">        <span class="comment">// 返回的线上地址</span></span><br><span class="line">        file.url = <span class="string">`http://localhost:3000/uploads/<span class="subst">$&#123;file.filename&#125;</span>`</span></span><br><span class="line">        <span class="comment">// 返回json数据</span></span><br><span class="line">        res.json(&#123;</span><br><span class="line">                    data: file,<span class="comment">// 返回数据的名称</span></span><br><span class="line">                &#125;)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node入门 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> node </tag>
            
            <tag> mongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组字符串方法</title>
      <link href="/A-lyc/2099/05/18/js/%E6%95%B0%E7%BB%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95/"/>
      <url>/A-lyc/2099/05/18/js/%E6%95%B0%E7%BB%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>总结的数组字符串的基本应用</p><h3 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h3><p>.concat(数组名称)—–拼接数组</p><p>.filter(函数三个参数)—–返回满足函数的新数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。不会改变原始数组</p><p>.forEach(函数三个参数) ———–遍历数组数组中都是执行个函数，返回这个数组</p><p>.every(函数三个参数)—– 如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测</p><p>.some() 方法用于检测数组中的元素是否满足指定条件（函数提供）如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。</p><p>.map(函数三个参数) 数组中的值都执行这个函数，执行后的结果，返回新的数组</p><p>.find(item =&gt; !ture)—-找到一个元素之后停止掉。方法返回数组中符合测试函数条件的第一个元素。否则返回undefined </p><p>.findIndex()找到一个元素之后停止掉。方法返回数组中符合测试函数条件的第一个索引。否则返回-1</p><p>.push(值) ————— 把值追加到数组中最后一个，返回值是追加后的数组 arr.push(…arr),返回数组   let a = arr.push(…arr)返回数组长度</p><p>.pop() ————— 删除最后一个元素，并且返回删除的这个值</p><p>.shift() ———–删除数组中第一个元素的 返回值是删除的这个值</p><p>.unshift() —————像数组的前面第一个元素插入值，返回值是追加后的数组</p><p>.indexOf(元素值,开始位置) —-有这个元素值，返回的是这个元素值所在的索引，没有返回-1</p><p>.slice(x,y) 前拷贝，在x的位置开始到y的位置结束，截取后的值放置新的数组中，不包含结束索引包含的值。返回一个新数组</p><p>.splice(开始的位置，删除的个数，替换元素的值)； 一般用于删除数组中的元素或者替换元素，或者替换元素</p><p>.reduce((a,b)=&gt;{return a + b})：计算这个数组中所有数字的和，如果有字符串后面的将进行拼接</p><p>.from属性可以把对象键是索引的的对象转换成数组，可以把字符传转成数组</p><p>.includes();传入一个数组内有的值，返回true，反之返回false</p><p>Array.of(3, 11, 8) // [3,11,8]将一组值转化为数组</p><p>Array.prototype.copyWithin(target, start = 0, end = this.length)它接受三个参数。<br>target（必需）：从该位置开始替换数据。如果为负值，表示倒数。<br>start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示从末尾开始计算。<br>end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算。<br>这三个参数都应该是数值，如果不是，会自动转为数值。[1, 2, 3, 4, 5].copyWithin(0, 3)// [4, 5, 3, 4, 5]<br>会修改当前数组</p><p>fill方法使用给定值，填充一个数组。fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。</p><p>// 过滤重复的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">          [<span class="string">'asdasdasdas'</span>,<span class="string">'adsdasdasd'</span>,<span class="string">'gggg'</span>,<span class="string">'aaaa'</span>,<span class="string">'gggg'</span>].forEach(<span class="function"><span class="params">x</span> =&gt;</span> s.add(x));</span><br><span class="line">          <span class="built_in">console</span>.log(s)</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> s) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">          &#125;</span><br><span class="line"><span class="comment">// Set转数组</span></span><br><span class="line"><span class="keyword">let</span> set4 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="comment">//方法一   es6的...解构</span></span><br><span class="line"><span class="keyword">let</span> arr1 =  [...set4];</span><br><span class="line"><span class="comment">//方法二  Array.from()解析类数组为数组</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(set4)</span><br></pre></td></tr></table></figure><hr><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>.charAt(索引) //返回值是指定索引的字符串，超出索引结果是空字符串</p><p>.formCharCode(数值，可以是多个)；//返回的是ascii码对应的值</p><p>.concat(字符串数值可以添加多个：’nihao’,’我好’,) //拼接字符串，返回新的字符串</p><p>.indexOf(“字符串中的值”,5：从某个位置的索引) //调用这个值在字符串中的位置,是字符串‘’，没有则返回-1</p><p>.lastIndexOf(“字符串中的值”) ///从后向前找</p><p>.replace(源字符串的值,替换的值) //提花九年第一个，第一个是 被替换的，第二个是替换的，下面例子</p><p>.slice(开始，结束) //开始的数字，到结束的数字内得字符串的值如：5-10提取的是5-9的字符串，返回截取的字符串</p><p>.split(“相同的分割符”,分割多少个数组) //在一个字符传中有相同的符号，提取出来作为分割符使用，形成一个数组类型，后面传入数字，分割多少个数组，</p><p>.substr(开始的位置，截取的个数) //在一个字符串中截取从开开始的索引截取，到截取多长结束</p><p>.substring(开始位置，结束位置) //在开始位置开始截取，到结束位置-1结束（不包含结束字符串）</p><p>.toLocaleLowerCase() //转小写</p><p>.toLocaleUpperCase() //转大写</p><p>.trim() //去掉两端的空格</p><p>.includes()// 返回布尔值，表示是否找到了参数字符串</p><p>.startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。</p><p>.endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部<br>这三个方法(endsWith,startsWith,includes)都支持第二个参数，表示开始搜索的位置 例子：s.startsWith(‘world’, 6) </p><p>repeat方法返回一个新字符串，表示将原字符串重复n次。 例子：’x’.repeat(3) // “xxx”</p><p>padStart()用于头部补全，一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串’x’.padStart(4, ‘ab’) // ‘abax’’x’.padEnd(5, ‘ab’) // ‘xabab’</p><p>padEnd()用于尾部补全,一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串’x’.padStart(4, ‘ab’) // ‘abax’’x’.padEnd(5, ‘ab’) // ‘xabab’</p><p>trimStart()消除字符串头部的空格，trimEnd()消除尾部的空格 - 它们返回的都是新字符串</p><p>Number.isInteger()用来判断一个数值是否为整数。如果参数不是数值，Number.isInteger返回false</p><p>Math.trunc方法用于去除一个数的小数部分，返回整数部分。</p><p>Math.sign方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。<br>它会返回五种值。<br>参数为正数，返回+1；<br>参数为负数，返回-1；<br>参数为 0，返回0；<br>参数为-0，返回-0;<br>其他值，返回NaN。</p><hr><h3 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h3><p>1：深拷贝对象，保持源对象不变</p><ul><li>let obj = Object.assign(target = {},source)</li><li>target // 目标对象 - 将源属性应用到的对象，修改后将返回该对象。</li><li>sources // 源对象—包含要应用的属性的对象。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> source = &#123; <span class="attr">b</span>: <span class="number">4</span>, <span class="attr">c</span>: <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> returnedTarget = <span class="built_in">Object</span>.assign(&#123;&#125;,source);</span><br><span class="line"><span class="built_in">console</span>.log(target);<span class="comment">// expected output: Object &#123; a: 1, b: 2&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(returnedTarget);<span class="comment">// expected output: Object &#123; b: 4, c: 5 &#125;</span></span><br></pre></td></tr></table></figure><hr><p>2：使用现有对象作为新创建的对象的原型来创建新对象 - 创建对象的原型 <strong>proto</strong></p><ul><li>let obj = Object.create(proto, [propertiesObject])</li><li>方法使用现有person对象作为新创建的对象的原型来创建新对象。创建对象的原型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  isHuman: <span class="literal">false</span>, <span class="comment">// 出现在原型上的</span></span><br><span class="line">  printIntroduction: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我叫<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>. 你好 <span class="subst">$&#123;<span class="keyword">this</span>.isHuman&#125;</span>`</span>);</span><br><span class="line">  &#125;<span class="comment">// 出现在原型上的</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> me = <span class="built_in">Object</span>.create(person);</span><br><span class="line">me.name = <span class="string">'Matthew'</span>; <span class="comment">// 出现原型之外的</span></span><br><span class="line">me.isHuman = <span class="literal">true</span>; <span class="comment">// 出现原型之外的</span></span><br><span class="line">me.printIntroduction(); <span class="comment">// 使用原型上的方法</span></span><br></pre></td></tr></table></figure><hr><p>3 方法直接在对象上定义新属性或修改现有属性，并返回该对象。- 几乎用不到</p><ul><li>Object.defineProperties(obj, props)</li><li>obj:在其上定义或修改属性的对象。</li><li>props:一个对象，其键表示要定义或修改的属性的名称，其值是描述这些属性的对象。中的每个值都props必须是数据描述符或访问器描述符；不能同时使用两者</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(object1, &#123;</span><br><span class="line">  property1: &#123;<span class="comment">//set，get，enumerable.....</span></span><br><span class="line">    value: <span class="number">42</span>,<span class="comment">// 与属性关联的值。可以是任何有效的JavaScript值（数字，对象，函数等）。</span></span><br><span class="line">    writable: <span class="literal">true</span>, <span class="comment">// true当且仅当与属性关联的值可以使用赋值运算符更改时</span></span><br><span class="line">    configurable:<span class="literal">false</span>, <span class="comment">// 默认false  true当且仅当此属性描述符的类型可以更改并且该属性可以从相应对象中删除时</span></span><br><span class="line">  &#125;,</span><br><span class="line">  property2: &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(object1.property1);</span><br><span class="line"><span class="comment">// expected output: 42</span></span><br></pre></td></tr></table></figure><hr><p>4 冻结对象。冻结的对象无法再更改</p><ul><li>Object.freeze(obj)</li><li>obj - 冻结的对象</li><li>方法冻结对象。冻结的对象无法再更改；冻结对象可防止向其添加新属性，删除现有属性，防止更改现有属性的可枚举性，可配置性或可写性，并防止更改现有属性的值。此外，冻结对象还可以防止更改其原型。freeze()返回传入的相同对象。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  prop: <span class="number">42</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.freeze(obj);</span><br><span class="line">obj.prop = <span class="number">33</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.prop); <span class="comment">// 不可修改</span></span><br></pre></td></tr></table></figure><hr><p>5 方法将键值对列表转换为对象</p><ul><li>Object.fromEntries(iterable);</li><li>iterable - 可迭代如Array或Map或其他物体执行迭代协议</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> entries = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'foo'</span>, <span class="string">'bar'</span>],<span class="comment">// 多个数组无效[建,值]</span></span><br><span class="line">  [<span class="string">'baz'</span>, <span class="number">42</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.fromEntries(entries);</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="comment">// 结果: Object &#123; foo: "bar", baz: 42 &#125;</span></span><br></pre></td></tr></table></figure><hr><p>6 方法返回给定对象的所有自己的属性描述符。</p><ul><li>Object.getOwnPropertyDescriptors(obj)</li><li>iterable - 可迭代如Array或Map或其他物体执行迭代协议</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">  property1: <span class="number">42</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> descriptors1 = <span class="built_in">Object</span>.getOwnPropertyDescriptors(object1);</span><br><span class="line"><span class="built_in">console</span>.log(descriptors1.property1);</span><br><span class="line"><span class="comment">// 参考原型的参数value，writable，enumerable</span></span><br><span class="line"><span class="comment">// 结果: Object &#123; value: 42, writable: true, enumerable: true, configurable: true &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(descriptors1.property1.value);</span><br><span class="line"><span class="comment">// 结果 : 42</span></span><br></pre></td></tr></table></figure><hr><p>7 方法确定两个值是否相同。</p><ul><li>Object.is(value1, value2);</li><li>value1 - 要比较的第一个值。</li><li>value2 - 要比较的第二个值</li></ul><hr><p>8 方法返回给定对象自己的可枚举属性名称的数组，并以与普通循环相同的顺序进行迭代。。</p><ul><li>Object.keys(obj)</li><li>obj - 要枚举其自身属性的对象。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">  a: <span class="string">'somestring'</span>,</span><br><span class="line">  b: <span class="number">42</span>,</span><br><span class="line">  c: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(object1));</span><br></pre></td></tr></table></figure><hr><p>9 循环提供的顺序返回给定对象自己的可枚举属性值的数组</p><ul><li>Object.values(obj)</li><li>obj - 要枚举其自身属性的对象。</li><li>方法以for…in循环提供的顺序返回给定对象自己的可枚举属性值的数组。（唯一的区别是for…in循环还枚举了原型链中的属性。）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object1 = &#123;</span><br><span class="line">  a: <span class="string">'somestring'</span>,</span><br><span class="line">  b: <span class="number">42</span>,</span><br><span class="line">  c: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(object1));</span><br><span class="line"><span class="comment">// expected output: Array ["somestring", 42, false]</span></span><br></pre></td></tr></table></figure><hr><h3 id="数组的set方法"><a href="#数组的set方法" class="headerlink" title="数组的set方法"></a>数组的set方法</h3><p>1 添加元素 add</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let list &#x3D; new Set();</span><br><span class="line">list.add(1)</span><br></pre></td></tr></table></figure><p>2 删除元素 delete</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let list &#x3D; new Set([1,20,30,40])</span><br><span class="line">list.delete(30)      &#x2F;&#x2F;删除值为30的元素，这里的30并非下标</span><br></pre></td></tr></table></figure><p>3 判断某元素是否存在 has</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let list &#x3D; new Set([1,2,3,4])</span><br><span class="line">list.has(2)&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><p>4 清除所有元素 clear</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let list &#x3D; new Set([1,2,3,4])</span><br><span class="line">list.clear()</span><br></pre></td></tr></table></figure><p>5 遍历 keys()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let list2 &#x3D; new Set([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])</span><br><span class="line">for(let key of list2.keys())&#123;</span><br><span class="line">   console.log(key)&#x2F;&#x2F;a,b,c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6 遍历 values()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let list &#x3D; new Set([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])</span><br><span class="line">for(let value of list.values())&#123;</span><br><span class="line">console.log(value)&#x2F;&#x2F;a,b,c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7 遍历 forEach()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let list &#x3D; new Set([&#39;4&#39;,&#39;5&#39;,&#39;hello&#39;])</span><br><span class="line">list.forEach(function(item)&#123;</span><br><span class="line">  console.log(item)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>8 数组转Set (用于数组去重)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let set2 &#x3D; new Set([4,5,6])</span><br></pre></td></tr></table></figure><p>9 Set转数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let set4 &#x3D; new Set([4, 5, 6])</span><br><span class="line">&#x2F;&#x2F;方法一   es6的...解构</span><br><span class="line">let arr1 &#x3D;  [...set4];</span><br><span class="line">&#x2F;&#x2F;方法二  Array.from()解析类数组为数组</span><br><span class="line">let arr2 &#x3D; Array.from(set4)</span><br></pre></td></tr></table></figure><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>setInterval() ：按照指定的周期（以毫秒计）来调用函数或计算表达式。方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。<br>setTimeout() ：在指定的毫秒数后调用函数或计算表达式。停止定时器clearTimeout() </p><h3 id="JSON转格式"><a href="#JSON转格式" class="headerlink" title="JSON转格式"></a>JSON转格式</h3><p> 我们可以使用 JSON.parse() 方法将数据转换为 JavaScript 对象  接收的JSON转成JavaScript<br> 我们可以使用 JSON.stringify() 方法将 JavaScript 对象转换为字符串。 JavaScript转成JSON格式传给服务器</p><h3 id="回到顶部"><a href="#回到顶部" class="headerlink" title="回到顶部"></a>回到顶部</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.body.scrollTop = 0</span><br><span class="line">document.documentElement.scrollTop = 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js数组字符串方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js 数组字符串方法 常用数组字符串api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请求拦截器和响应式拦截</title>
      <link href="/A-lyc/2099/05/01/vue/%E8%AF%B7%E6%B1%82%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E5%93%8D%E5%BA%94%E5%BC%8F%E6%8B%A6%E6%88%AA/"/>
      <url>/A-lyc/2099/05/01/vue/%E8%AF%B7%E6%B1%82%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E5%93%8D%E5%BA%94%E5%BC%8F%E6%8B%A6%E6%88%AA/</url>
      
        <content type="html"><![CDATA[<p>headers需要三个参数，url {} {}可参靠打印出来的值 ，请求之前需要做点什么和请求中处理之后发给页面做点什么，可以使用拦截器，在全局使用一下，min.js</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use( <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> token = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">'token'</span>)</span><br><span class="line">  <span class="keyword">if</span>(config.token === <span class="literal">true</span>)&#123;</span><br><span class="line">    config.headers[<span class="string">'token'</span>] = token<span class="comment">//传输token的时候需要在第三个值内传输token = true，才可以传到headers中</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(config)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'请求之前拦截 + 成功'</span>)</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;,  (error) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请求之前拦截 + 失败'</span>)</span><br><span class="line">  <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'请求之后 + 成功'</span>)</span><br><span class="line">  <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;, (error) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请求之后 + 失败'</span>)</span><br><span class="line">  <span class="comment">//全局错误提示</span></span><br><span class="line">  <span class="keyword">if</span> (error.response &amp;&amp; error.response.data &amp;&amp; error.response.data.errorCode) &#123;</span><br><span class="line">    Message.error(error.response.data.msg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端布局神器display:flex</title>
      <link href="/A-lyc/2099/03/20/css/%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E7%A5%9E%E5%99%A8display-flex/"/>
      <url>/A-lyc/2099/03/20/css/%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E7%A5%9E%E5%99%A8display-flex/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Flex不仅可以水平方向布局也可以垂直方向布局"><a href="#一、Flex不仅可以水平方向布局也可以垂直方向布局" class="headerlink" title="一、Flex不仅可以水平方向布局也可以垂直方向布局"></a>一、Flex不仅可以水平方向布局也可以垂直方向布局</h3><ul><li><p>Flex是Flexible Box的缩写，翻译成中文就是“弹性盒子”，用来为盒装模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。</p><a id="more"></a></li><li><p>.box{<br>  display: -webkit-flex; /<em>在webkit内核的浏览器上使用要加前缀</em>/<br>  display: flex; //将对象作为弹性伸缩盒显示<br>  }</p></li><li><p>当然，行内元素也可以使用Flex布局。<br>.box {</p><pre><code>display: inline-flex; //将对象作为内联块级弹性伸缩盒显示}</code></pre></li><li><p>兼容性写法<br>.box {</p><pre><code>display: flex || inline-flex;</code></pre><p>}</p></li></ul><h3 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h3><blockquote><p>采用Flex布局的元素，被称为Flex容器(flex container)，简称“容器”。其所有子元素自动成为容器成员，成为Flex项目(Flex item)，简称“项目”。</p></blockquote>{% image ./前端布局神器display-flex/image.png '查入图片' '' %}<ul><li>结构示意图<br>容器默认存在两根主轴：水平方向主轴(main axis)和垂直方向交叉轴(cross axis)，默认项目按主轴排列。<br>• main start/main end：主轴开始位置/结束位置；<br>• cross start/cross end：交叉轴开始位置/结束位置；<br>• main size/cross size：单个项目占据主轴/交叉轴的空间；</li></ul><h3 id="三、容器属性"><a href="#三、容器属性" class="headerlink" title="三、容器属性"></a>三、容器属性</h3><ul><li><p>设置在容器上的属性有6种。</p><p>flex-direction<br>flex-wrap<br>flex-flow<br>justify-content<br>align-item<br>align-content</p></li></ul><h3 id="flex-direction属性：决定主轴的方向（即项目的排列方向）"><a href="#flex-direction属性：决定主轴的方向（即项目的排列方向）" class="headerlink" title="flex-direction属性：决定主轴的方向（即项目的排列方向）"></a>flex-direction属性：决定主轴的方向（即项目的排列方向）</h3><ul><li><p>.box {<br>flex-direction: row | row-reverse | column | column-reverse;<br>}</p><p>row（默认）：主轴水平方向，起点在左端；<br>row-reverse：主轴水平方向，起点在右端；<br>column：主轴垂直方向，起点在上边沿；<br>column-reserve：主轴垂直方向，起点在下边沿。</p></li></ul>{% image /前端布局神器display-flex/02.png '查入图片' '' %}<h2 id="flex-wrap属性：定义换行情况-默认情况下，项目都排列在一条轴线上，但有可能一条轴线排不下。"><a href="#flex-wrap属性：定义换行情况-默认情况下，项目都排列在一条轴线上，但有可能一条轴线排不下。" class="headerlink" title="flex-wrap属性：定义换行情况 默认情况下，项目都排列在一条轴线上，但有可能一条轴线排不下。"></a>flex-wrap属性：定义换行情况 默认情况下，项目都排列在一条轴线上，但有可能一条轴线排不下。</h2><ul><li>.box{<br>flex-wrap: nowrap | wrap | wrap-reverse;<br>}<br>nowrap（默认）：不换行；<br>wrap：换行，第一行在上方；<br>wrap-reverse：换行，第一行在下方。</li></ul><h2 id="flex-flow属性：flex-direction和flex-wrap的简写，默认row-nowrap"><a href="#flex-flow属性：flex-direction和flex-wrap的简写，默认row-nowrap" class="headerlink" title="flex-flow属性：flex-direction和flex-wrap的简写，默认row nowrap"></a>flex-flow属性：flex-direction和flex-wrap的简写，默认row nowrap</h2><ul><li><p>.box{<br>  flex-flow: <flex-direction> || <flex-wrap>;<br>}</flex-wrap></flex-direction></p><p>justify-content属性：定义项目在主轴上的对齐方式。<br>对齐方式与轴的方向有关，本文中假设主轴从左到右。</p><p>.box {<br>justify-content: start | end | flex-start | flex-end | center | left | right | space-between | space-around | space-evenly | stretch | safe | unsafe | baseline | first baseline | last baseline;<br>}</p></li><li><p>flex-start（默认值）：左对齐；</p>{% image /前端布局神器display-flex/03.png '查入图片' '' %}</li><li><p>flex-end：右对齐；</p>{% image /前端布局神器display-flex/04.png '查入图片' '' %}</li><li><p>center：居中；</p>{% image /前端布局神器display-flex/05.png '查入图片' '' %}</li><li><p>space-between：两端对齐，项目之间间隔相等；</p>{% image /前端布局神器display-flex/06.png '查入图片' '' %}</li><li><p>space-around：每个项目两侧的间隔相等，即项目之间的间隔比项目与边框的间隔大一倍。</p>{% image /前端布局神器display-flex/07.png '查入图片' '' %}</li></ul><h3 id="align-items属性：定义在交叉轴上的对齐方式"><a href="#align-items属性：定义在交叉轴上的对齐方式" class="headerlink" title="align-items属性：定义在交叉轴上的对齐方式"></a>align-items属性：定义在交叉轴上的对齐方式</h3><ul><li><p>对齐方式与交叉轴的方向有关，假设交叉轴从下到上。</p><p>.box{<br>  align-items: flex-start | flex-end | center | baseline | stretch;<br>}</p><p>flex-start：起点对齐；</p>{% image /前端布局神器display-flex/08.png '查入图片' '' %}</li><li><p>flex-end：终点对齐；</p>{% image /前端布局神器display-flex/09.png '查入图片' '' %}</li><li><p>center：中点对齐；</p>{% image /前端布局神器display-flex/10.png '查入图片' '' %}</li><li><p>baseline：项目的第一行文字的基线对齐；</p>{% image /前端布局神器display-flex/11.png '查入图片' '' %}</li><li><p>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</p>{% image /前端布局神器display-flex/12.png '查入图片' '' %}</li></ul><h3 id="align-content属性：定义多根轴线的对齐方式"><a href="#align-content属性：定义多根轴线的对齐方式" class="headerlink" title="align-content属性：定义多根轴线的对齐方式"></a>align-content属性：定义多根轴线的对齐方式</h3><ul><li><p>如果项目只有一根轴线，该属性不起作用。<br>所以，容器必须设置flex-wrap：···；</p><p>.box{<br>  align-content: flex-start | flex-end | center | space-between | space-around | stretch;<br>}</p></li><li><p>flex-start：与交叉轴的起点对齐；</p>{% image /前端布局神器display-flex/13.png '查入图片' '' %}</li><li><p>flex-end：与交叉轴的终点对齐；</p>{% image /前端布局神器display-flex/14.png '查入图片' '' %}</li><li><p>center：与交叉轴的中点对齐；</p>{% image /前端布局神器display-flex/15.png '查入图片' '' %}</li><li><p>space-between：与交叉轴的两端对齐，轴线之间的间隔平均分布；</p>{% image /前端布局神器display-flex/16.png '查入图片' '' %}</li><li><p>space-around：每根轴线两侧的间隔相等，即轴线之间的间隔比轴线与边框的间隔大一倍；</p>{% image /前端布局神器display-flex/17.png '查入图片' '' %}</li><li><p>stretch（默认值）：轴线占满整个交叉轴。</p>{% image /前端布局神器display-flex/18.png '查入图片' '' %}</li><li><p>有意思的是，当你不给项目设置高度但是给容器设置align-content不为stretch时，同一轴线上的项目的高度将等于项目中高度最高的项目。</p>{% image /前端布局神器display-flex/19.png '查入图片' '' %}</li></ul><h3 id="四、项目的属性"><a href="#四、项目的属性" class="headerlink" title="四、项目的属性"></a>四、项目的属性</h3><ul><li><p>设置在项目上的属性也有6个。</p><ul><li>order<br>flex-grow<br>flex-shrink<br>flex-basis<br>flex<br>align-self<br>order属性：定义项目的排列顺序。</li></ul><p>数值越小，排列越靠前，默认为0，可以是负值。</p><p>.item {</p><pre><code>order: &lt;整数&gt;;</code></pre><p>}</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/A-lyc/A-lyc/2099/03/20/css/%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E7%A5%9E%E5%99%A8display-flex/20.png" alt="查入图片" title>                </div>                <div class="image-caption">查入图片</div>            </figure><ul><li><p>展示效果不明显，直接盗图</p><p>flex-grow属性：定义项目的放大比例</p><p>默认值为0，即如果空间有剩余，也不放大。<br>可以是小数，按比例占据剩余空间。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/A-lyc/A-lyc/2099/03/20/css/%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E7%A5%9E%E5%99%A8display-flex/21.png" alt="查入图片" title>                </div>                <div class="image-caption">查入图片</div>            </figure></li><li><p>.item{<br>  flex-grow: &lt;数字&gt;;<br>}<br>若所有项目的flex-grow的数值都相同，则等分剩余空间<br>等分剩余空间</p><img src="/A-lyc/A-lyc/2099/03/20/css/%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E7%A5%9E%E5%99%A8display-flex/%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E7%A5%9E%E5%99%A8display-flex/22.png" class></li><li><p>若果有一个项目flex-grow为2，其余都为1，则该项目占据剩余空间是其余的2倍</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/A-lyc/A-lyc/2099/03/20/css/%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E7%A5%9E%E5%99%A8display-flex/22.png" alt="查入图片" title>                </div>                <div class="image-caption">查入图片</div>            </figure></li></ul><ul><li><p>flex-shrink属性：定义项目的缩小比例</p><ul><li>默认值都为1，即如果空间不足将等比例缩小。<br>如果有一个项目的值为0，其他项目为1，当空间不足时，该项目不缩小。<br>负值对该属性无效，容器不应该设置flex-wrap。</li></ul><p>.item{</p><pre><code>flex-shrink: &lt;非负整数&gt;;</code></pre><p>}<br>如果一个项目设置flex-shrink为0；而其他项目都为1，则空间不足时，该项目不缩小。</p>{% image /前端布局神器display-flex/23.png '查入图片' '' %}<ul><li><p>如果所有项目都为0，则当空间不足时，项目撑破容器而溢出。</p>{% image /前端布局神器display-flex/24.png '查入图片' '' %}</li><li><p>如果设置项目的flex-shrink不为0的非负数效果同设置为1。</p>{% image /前端布局神器display-flex/25.png '查入图片' '' %}</li><li><p>flex-basis属性：定义在分配多余空间之前，项目占据的主轴空间。</p>{% image /前端布局神器display-flex/26.png '查入图片' '' %}</li></ul></li></ul><h3 id="默认值为auto，浏览器根据此属性检查主轴是否有多余空间。"><a href="#默认值为auto，浏览器根据此属性检查主轴是否有多余空间。" class="headerlink" title="默认值为auto，浏览器根据此属性检查主轴是否有多余空间。"></a>默认值为auto，浏览器根据此属性检查主轴是否有多余空间。</h3><ul><li><p>.item{<br>  flex-basis:  &lt;auto或者px&gt;;<br>}</p><p>注意设置的flex-basis是分配多余空间之前项目占据的主轴空间，如果空间不足则默认情况下该项目也会缩小。</p>{% image /前端布局神器display-flex/27.png '查入图片' '' %}</li></ul><ul><li><p>设置flex-basis为350px，但空间充足</p>{% image /前端布局神器display-flex/28.png '查入图片' '' %}<ul><li>空间不足，项目缩小，小于设定值<br>flex属性是flex-grow，flex-shrink和flex-basis的简写<br>默认值为0 1 auto，第一个属性必须，后两个属性可选。</li></ul><p>.item{</p><pre><code>flex: none | [&lt;flex-grow&gt;&lt;flex-shrink&gt;&lt;flex-basis&gt;];</code></pre><p>}</p><p>可以用 flex:auto; 代替 flex: 1 1 auto;；<br>可以用 flex: none;代替 flex: 0 0 auto；</p></li></ul><h4 id="align-self属性：允许单个项目与其他项目有不一样的对齐方式"><a href="#align-self属性：允许单个项目与其他项目有不一样的对齐方式" class="headerlink" title="align-self属性：允许单个项目与其他项目有不一样的对齐方式"></a>align-self属性：允许单个项目与其他项目有不一样的对齐方式</h4><ul><li>默认值为auto，表示继承父元素的align-items属性，并可以覆盖align-items属性。<br>.item{<br>align-self: auto | flex-start | flex-end | center | baseline | stretch;<br>}</li></ul><p>内容以共享、参考、研究为目的,不存在任何商业目的。其版权属原作者所有,如有侵权,请与小编联系!情况属实本人将予以删除!</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flex布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxt的基本组件安装</title>
      <link href="/A-lyc/2099/01/01/nuxt/nuxt%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
      <url>/A-lyc/2099/01/01/nuxt/nuxt%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<hr><p>中途的bug 一定熟练使用element有很大的帮助</p><a id="more"></a><p>0：上传服务器运行 - 服务器有缓存问题，把自身的缓存关闭，之后开启服务端缓存，期间有很多bug<br>1：状态存储到vuex中会使网页分享的时候带有用户的token，所以这个token需要在浏览器中获取之后发送网络请求，不要在vuex直接获取发送请求，会有bug<br>2：vuex有的时候进入页面点击刷新的时候很多东西没有了，因为存储的状态管理没有了，所以导致显示或者不显示的问题，等等，如果用户的话，这个还是判断浏览器中的token有没有，在使用浏览器的token获取用户信息，之后在进行判断，以防刷新之后不显示问题<br>3：页面数据加载不出来：因为没有正确使用asyncData数据请求，或者axios写错了位置，应该在插件目录下<br>4：vuex中nuxtServerInit的使用， mutations内使用大写TOKEN(){},之操作一件事情<br>5：nuxt使用node_mode中的axios的时候会报错官方解释是，所以尽量使用自己带的axios<br>6：上传之前需要把debug: process.env._ENV == ‘production’ ? false : true, 关闭注释掉这个是检查debug模式<br>如果您的项目中直接使用了node_modules中的axios，并且使用axios.interceptors添加拦截器对请求或响应数据进行了处理，确保使用 axios.create创建实例后再使用。否则多次刷新页面请求服务器，服务端渲染会重复添加拦截器，导致数据处理错误。</p><hr><h3 id="自己初始化的nuxt的模板文件"><a href="#自己初始化的nuxt的模板文件" class="headerlink" title="自己初始化的nuxt的模板文件"></a>自己初始化的nuxt的模板文件</h3><p><a href="./template.zip" target="_blank"> template自己定义模板 </a></p><h4 id="1：安装"><a href="#1：安装" class="headerlink" title="1：安装"></a>1：安装</h4><p>npx create-nuxt-app <project-name><br>cd <project-name><br>进入环境命令：<br>npm run dev<br>打包编译<br>npm run dev<br>之后生成 dist（vue）和.nuxt（服务器:如果用中间件需要把中间件的文件一起打包发给后端，基本文件：.nuxt,state,nuxt.confige.js,package.json）<br>npm i 之后 npm start - 项目可以跑起来了</project-name></project-name></p><p>首先新建项目安装完成npm和node，使用脚手架的命令去新建一个初始化的项目，我基本使用的是npm进行安装，输入命令行就可<br>npx create-nuxt-app &lt;项目名&gt;<br>选择默认初始化的项目名称，比如选择UI框架，安装axios，选择渲染方式，之后下一步下一步即可<br>npm run dev即可进入开发环境<br>页面内网络请求获取的数据使用asyncData获取，下面会有介绍<br>点击动作请求数据可使用插件导出的网络请求，下面有介绍 this.$api.getInfo()<br>使用cscc选要提前安装 npm install –save-dev node-sass sass-loader</p><!-- more --><h3 id="配置nuxt-config-js"><a href="#配置nuxt-config-js" class="headerlink" title="配置nuxt.config.js"></a>配置nuxt.config.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  mode: <span class="string">'universal'</span>,</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * 头部显示区域 - 页面组件内可以使用</span></span><br><span class="line"><span class="comment">  *  head()&#123;return&#123;title:'',</span></span><br><span class="line"><span class="comment">  *  meta:[&#123;hid: '网站描述',name: 'description',content:''&#125;]&#125;&#125;</span></span><br><span class="line"><span class="comment">  *  来重定义头部标签</span></span><br><span class="line"><span class="comment">  *  </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  head: &#123;</span><br><span class="line">    title: <span class="string">'头部标题'</span> || <span class="string">''</span>,<span class="comment">//</span></span><br><span class="line">    meta: [</span><br><span class="line">      &#123; <span class="attr">charset</span>: <span class="string">'utf-8'</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        content: <span class="string">`viewport, width=device-width, initial-scale=1, </span></span><br><span class="line"><span class="string">minimum-scale=1.0,maximum-scale=1.0,user-scalable=no`</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    link: [<span class="comment">//使用到的css可以使用link标签引入</span></span><br><span class="line">      &#123; <span class="attr">rel</span>: <span class="string">'icon'</span>, <span class="attr">type</span>: <span class="string">'image/x-icon'</span>, <span class="attr">href</span>: <span class="string">'/favicon.ico'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">href</span>: <span class="string">'https://static.com/css/index.css'</span>, <span class="attr">rel</span>: <span class="string">'stylesheet'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">href</span>: <span class="string">'https://static.com/css/bootstrap.min.css'</span>, <span class="attr">rel</span>: <span class="string">'stylesheet'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">href</span>: <span class="string">'https://static.com/css/bootstrap-vue.min.css'</span>, <span class="attr">rel</span>: <span class="string">'stylesheet'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  ** loading的颜色</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  loading: &#123; <span class="attr">color</span>: <span class="string">'#000'</span> &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 新加导入scss - 需要提前安装 npm install --save-dev node-sass sass-loader</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  styleResources: &#123;</span><br><span class="line">    scss: <span class="string">'@/assets/style/global.scss'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  **  外部导入的css可以直接在这显示，查看源码的时候会直接显示到页面上的</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  css: [</span><br><span class="line">    <span class="comment">// 'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line">    <span class="comment">// '@/assets/css/main.scss'</span></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  ** 插件配置目录，安装的插件都需要在这个位置配置，有的插件需要获取dom后者win</span></span><br><span class="line"><span class="comment">  ** 建议安装插件的时候全局安装 &#123; src: '@/plugins/map', ssr: false &#125;,可以获取dom后者win</span></span><br><span class="line"><span class="comment">  ** 这样即可使用的时候之间按照官网的文档标签使用即可</span></span><br><span class="line"><span class="comment">  ** 插件不单独使用的是因为需要获取dom和win的原因</span></span><br><span class="line"><span class="comment">  ** '@/plugins/api'  api是封装的网络请求，下面会解释到的</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">'@/plugins/element-ui'</span>,<span class="comment">//element</span></span><br><span class="line">    <span class="string">'@/plugins/api'</span>,<span class="comment">//封装的axios</span></span><br><span class="line">    <span class="string">'@/plugins/bootstrap-vue'</span>,<span class="comment">//栅格</span></span><br><span class="line">    <span class="string">'@/plugins/vue-moment'</span>,<span class="comment">//格式化时间</span></span><br><span class="line">    &#123; <span class="attr">src</span>: <span class="string">'@/plugins/map'</span>, <span class="attr">ssr</span>: <span class="literal">false</span> &#125;,<span class="comment">//地图</span></span><br><span class="line">    &#123; <span class="attr">src</span>: <span class="string">'@/plugins/vue-quill-editor'</span>, <span class="attr">ssr</span>: <span class="literal">false</span> &#125;,<span class="comment">//富文本</span></span><br><span class="line">    &#123; <span class="attr">src</span>: <span class="string">'@/plugins/vue-cropper'</span>, <span class="attr">ssr</span>: <span class="literal">false</span> &#125;,<span class="comment">//裁切</span></span><br><span class="line">    &#123; <span class="attr">src</span>: <span class="string">'@/plugins/md5'</span>, <span class="attr">ssr</span>: <span class="literal">false</span> &#125;<span class="comment">//md5加密</span></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  ** Nuxt.js dev-modules</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  buildModules: [],</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  ** Nuxt.js modules - 请求需要</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  modules: [</span><br><span class="line">    <span class="comment">// Doc: https://axios.nuxtjs.org/usage</span></span><br><span class="line"><span class="comment">//没有的话都需要安装</span></span><br><span class="line">    <span class="string">'@nuxtjs/axios'</span>,</span><br><span class="line">    <span class="string">'@gauseen/nuxt-proxy'</span>,</span><br><span class="line">    <span class="string">'@nuxtjs/style-resources'</span>,</span><br><span class="line">    <span class="comment">//缓存</span></span><br><span class="line">    <span class="comment">// '@nuxtjs/component-cache',</span></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  ** Axios 配置跨域的问题，外部使用 /api/</span></span><br><span class="line"><span class="comment">  ** See https://axios.nuxtjs.org/options</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  axios: &#123;</span><br><span class="line">    prefix: <span class="string">'/api/'</span>,</span><br><span class="line">    <span class="comment">//是否允许跨域</span></span><br><span class="line">    proxy: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 最多重发三次</span></span><br><span class="line">    retry: &#123; <span class="attr">retries</span>: <span class="number">5</span> &#125;,</span><br><span class="line">    <span class="comment">//开发模式下开启debug</span></span><br><span class="line">    debug: process.env._ENV == <span class="string">'production'</span> ? <span class="literal">false</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//设置不同环境的请求地址</span></span><br><span class="line">    baseURL:</span><br><span class="line">      process.env._ENV == <span class="string">'production'</span></span><br><span class="line">        ? <span class="string">'http://localhost:3000/api'</span></span><br><span class="line">        : <span class="string">'http://localhost:3000/api'</span>,</span><br><span class="line">    <span class="comment">//是否是可信任</span></span><br><span class="line">    withCredentials: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">//切换网页url不正确 - 具体是意思不明</span></span><br><span class="line">  publicRuntimeConfig: &#123;</span><br><span class="line">    axios: &#123;</span><br><span class="line">      browserBaseURL: process.env.BROWSER_BASE_URL</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">//切换网页url不正确 - 具体是意思不明</span></span><br><span class="line">  privateRuntimeConfig: &#123;</span><br><span class="line">    axios: &#123;</span><br><span class="line">      baseURL: process.env.BASE_URL</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 代理服务器</span></span><br><span class="line">  proxyTable: &#123;</span><br><span class="line">    <span class="string">'/api/'</span>: &#123;</span><br><span class="line">      target: <span class="string">'https://www.baidu.com/api'</span>,  <span class="comment">// 线上地址</span></span><br><span class="line">      pathRewrite: &#123; <span class="string">'^/api/'</span>: <span class="string">''</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  ** Build configuration</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  build: &#123;</span><br><span class="line">    transpile: [<span class="regexp">/^element-ui/</span>],</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ** You can extend webpack config here</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    extend( config, &#123; isDev, isClient &#125;) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 中间件</span></span><br><span class="line">  serverMiddleware: [</span><br><span class="line">    <span class="string">'~/middleware/cookie.js'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取win"><a href="#获取win" class="headerlink" title="获取win"></a>获取win</h3><p>if (process.browser) {<br> 逻辑<br>}</p><h3 id="layouts文件夹"><a href="#layouts文件夹" class="headerlink" title="layouts文件夹"></a>layouts文件夹</h3><p>layouts文件夹：是放置内容的，公共的部分可以在这个位置去引入一个组件，公共的头，footer等<br>错误页也是在此文件夹内，error.vue,官网有详细写法<br>这里定义的东西是全局都使用的，慎用</p><h3 id="自定义页面布局"><a href="#自定义页面布局" class="headerlink" title="自定义页面布局"></a>自定义页面布局</h3><p>在layouts中定义一个页面比如cishi.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      layouts</span><br><span class="line">      &lt;nuxt&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;ceshi&#39;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>如何使用呢，在page文件内的.vue文件内加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  asdsadas</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    layout: &#39;ceshi&#39;, &#x2F;&#x2F;重要的是这个代码和上面定义的页面相关联</span><br><span class="line">    name: &#39;ceshi&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="错误页面的定义"><a href="#错误页面的定义" class="headerlink" title="错误页面的定义"></a>错误页面的定义</h3><p>举一个个性化错误页面的例子 layouts/error.vue:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;h1 v-if&#x3D;&quot;error.statusCode &#x3D;&#x3D;&#x3D; 404&quot;&gt;页面不存在&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1 v-else&gt;应用发生错误异常&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;nuxt-link to&#x3D;&quot;&#x2F;&quot;&gt;首 页&lt;&#x2F;nuxt-link&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#39;error&#39;],</span><br><span class="line">  layout: &#39;blog&#39; &#x2F;&#x2F; 你可以为错误页面指定自定义的布局</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="关于页面的"><a href="#关于页面的" class="headerlink" title="关于页面的"></a>关于页面的</h3><p>页面组件实际上是 Vue 组件，只不过 Nuxt.js 为这些组件添加了一些特殊的配置项（对应 Nuxt.js 提供的功能特性）以便你能快速开发通用应用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1 class&#x3D;&quot;red&quot;&gt;Hello &#123;&#123; name &#125;&#125;!&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">&#x2F;&#x2F; 每次在加载组件之前调用 - 初始加载数据在这位置请求，（动作方法不在这）</span><br><span class="line">  asyncData (context) &#123;return &#123; name: &#39;World&#39; &#125;&#125;,</span><br><span class="line">  fetch () &#123;&#125;,&#x2F;&#x2F; fetch方法用于在呈现页面之前填充存储</span><br><span class="line">  head () &#123;&#125;,&#x2F;&#x2F; 为此页设置元标记</span><br><span class="line">  layout()&#123;&#125;,&#x2F;&#x2F;指定当前页面使用的布局（layouts 根目录下的布局文件）</span><br><span class="line">  middleware()&#123;&#125;,&#x2F;&#x2F;中间件</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.red &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="asyncData-fetch"><a href="#asyncData-fetch" class="headerlink" title="asyncData,fetch"></a>asyncData,fetch</h3><p>这里需要一个axios请求，等会会写道如何进行网络请求,需要服务器端加载的数据支持seo优化的信息要全部渲染到这个位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里接收一个上下文的对象；app//可以结构出stort，和自定义的插件内导出全局的方法，route//路由，params//路由参数，query，req，res，等等。见网址：https://www.nuxtjs.cn/api/context</span></span><br><span class="line"><span class="keyword">async</span> asyncData (&#123;app&#125;) &#123;<span class="comment">//结构app进来</span></span><br><span class="line">      <span class="keyword">let</span> &#123;$api&#125; = app<span class="comment">//app进行结构初api全局暴漏的一个api的方法，请求中自己封装的</span></span><br><span class="line">      <span class="comment">// 下面试简单的axios请求，安装axios即可使用 </span></span><br><span class="line">      <span class="keyword">let</span> &#123; data &#125; = <span class="keyword">await</span> axios.get(<span class="string">'https://www.baidu.com/api/v1/config-info'</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">//使用 Promise.all 结果是个数组$api.getHotType(id1[0].class_id)</span></span><br><span class="line">      <span class="keyword">let</span> obj = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([ $api.getHotType(id1[<span class="number">0</span>].class_id) , $api.getHotType(id1[<span class="number">1</span>].class_id) , $api.getHotType(id1[<span class="number">2</span>].class_id) , $api.getHotType(id1[<span class="number">3</span>].class_id)])</span><br><span class="line">              </span><br><span class="line">      <span class="comment">//请求banner下面的数据 footer上面的 使用封装好的请求content进行接收 - 建议使用结构的方式</span></span><br><span class="line">      <span class="comment">//$api.getListData()后面不要.then,直接结构data即可</span></span><br><span class="line">      <span class="keyword">let</span> &#123;<span class="attr">data</span>:content&#125;  = <span class="keyword">await</span> $api.getListData()</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="comment">//把数据return出去在template可以直接使用 - 最好在data中处理之后在使用，&lt;div&gt;&#123;&#123;info&#125;&#125;&lt;/div&gt;</span></span><br><span class="line">        info: data.data,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="fetch-方法"><a href="#fetch-方法" class="headerlink" title="fetch 方法"></a>fetch 方法</h3><p>fetch 方法用于在渲染页面前填充应用的状态树（store）数据， 与 asyncData 方法类似，不同的是它不会设置组件的数据。<br>类型： Function<br>如果页面组件设置了 fetch 方法，它会在组件每次加载前被调用（在服务端或切换至目标路由之前）。<br>fetch 方法的第一个参数是页面组件的上下文对象 context，我们可以用 fetch 方法来获取数据填充应用的状态树。为了让获取过程可以异步，你需要返回一个 Promise，Nuxt.js 会等这个 promise 完成后再渲染组件。<br>警告: 您无法在内部使用this获取组件实例，fetch是在组件初始化之前被调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> fetch (&#123; store, params &#125;)&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; data &#125; = <span class="keyword">await</span> axios.get(<span class="string">'https://www.baidu.com/stars'</span>)</span><br><span class="line">    store.commit(<span class="string">'setStars'</span>, data)<span class="comment">//给vuex发送一个数据</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="网络请求-中间件-用户管理，获取token-可以不进行使用"><a href="#网络请求-中间件-用户管理，获取token-可以不进行使用" class="headerlink" title="网络请求 - 中间件 - 用户管理，获取token - 可以不进行使用"></a>网络请求 - 中间件 - 用户管理，获取token - 可以不进行使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install js-cookie --save</span><br></pre></td></tr></table></figure><p>保存token的插件，可以使用中间件来使用，使用方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Cookies = <span class="built_in">require</span>(<span class="string">"js-cookie"</span>)  </span><br><span class="line"><span class="comment">// 创建一个在整个网站上有效的cookie</span></span><br><span class="line">Cookies.set(<span class="string">'name'</span>, <span class="string">'value'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个从现在起7天到期的cookie，该cookie在整个网站上均有效：</span></span><br><span class="line">Cookies.set(<span class="string">'name'</span>, <span class="string">'value'</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个有效的cookie，该cookie对当前页面的路径有效：</span></span><br><span class="line">Cookies.set(<span class="string">'name'</span>, <span class="string">'value'</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span>, <span class="attr">path</span>: <span class="string">''</span> &#125;);</span><br></pre></td></tr></table></figure><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">'js-cookie'</span></span><br><span class="line"><span class="keyword">const</span> TokenKey = <span class="string">'token'</span></span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getToken</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Cookies.get(TokenKey)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写入</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setToken</span>(<span class="params">token</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Cookies.set(TokenKey, token)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">removeToken</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Cookies.remove(TokenKey)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cookie-parser</span><br></pre></td></tr></table></figure><p>首先获取中间件，就是用户登录的时候会把token保存到cookies这里面，之后要获取token活得用户的信息，登录状态等等，<br>安装一个cookies格式化工具方便操作 ：npm i serve cookie-parser 之后在middleware（中间件）这个文件夹内新建文件进行导入<br>我新建的cokie.js 内容是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports =  <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'-**--*-*-*-*-*-*-*-*'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'-**--*-*- cookies *-*-*-*-*-*'</span>)</span><br><span class="line">  next()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入npm的之后在nuxt.confige.js中进行导入中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务器中间件</span></span><br><span class="line"> serverMiddleware: [</span><br><span class="line">   <span class="string">'~/middleware/cookie.js'</span></span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><h3 id="中间件-官网说明"><a href="#中间件-官网说明" class="headerlink" title="中间件 - 官网说明"></a>中间件 - 官网说明</h3><p>中间件允许您定义一个自定义函数运行在一个页面或一组页面渲染之前。</p><p>每一个中间件应放置在 middleware/ 目录。文件名的名称将成为中间件名称(middleware/auth.js将成为 auth 中间件)。</p><p>一个中间件接收 context 作为第一个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  context.userAgent = process.server ? context.req.headers[<span class="string">'user-agent'</span>] : navigator.userAgent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间件执行流程顺序：</p><p>nuxt.config.js<br>匹配布局<br>匹配页面<br>中间件可以异步执行,只需要返回一个 Promise 或使用第2个 callback 作为第一个参数：</p><p>middleware/stats.js</p><p>import axios from ‘axios’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">&#123; route &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.post(<span class="string">'http://my-stats-api.com'</span>, &#123;</span><br><span class="line">    url: route.fullPath</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在你的 nuxt.config.js 、 layouts 或者 pages 中使用中间件:</p><p>nuxt.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  router: &#123;</span><br><span class="line">    middleware: <span class="string">'stats'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，stats 中间件将在每个路由改变时被调用。</p><p>您也可以将 middleware 添加到指定的布局或者页面:</p><p>pages/index.vue 或者 layouts/default.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  middleware: <span class="string">'stats'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="axios网络请求-https-zh-nuxtjs-org-guide-async-data"><a href="#axios网络请求-https-zh-nuxtjs-org-guide-async-data" class="headerlink" title="axios网络请求 - https://zh.nuxtjs.org/guide/async-data"></a>axios网络请求 - <a href="https://zh.nuxtjs.org/guide/async-data" target="_blank" rel="noopener">https://zh.nuxtjs.org/guide/async-data</a></h3><p>安装axios - npm install @nuxtjs/auth @nuxtjs/axios<br>在plugibns中新建文件api.js之后写入axios的网络请求配置，为什么在plugins中，因为这个位置可以获取到上下文对象，可以结构初store和app，以及获取win和dom<br>别的位置暂时没有找到可以结构出的，所以放在这个插件文件夹下了 - 默认导出的配置</p><ul><li>全局都可以使用直接在asyncData中$api.getInfo()，在vue其他方法中this.$api.getInfo();<br>inject全局暴漏导出<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> apiAll <span class="keyword">from</span> <span class="string">'../api/apiAll.js'</span><span class="comment">//导入请求的n个地址 地址自定义</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">&#123; app &#125;, inject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; store, $axios &#125; = app<span class="comment">//结构出store, $axios - 自带的axios</span></span><br><span class="line">  $axios.defaults.baseUrl = <span class="string">'/api'</span><span class="comment">//设置api，nuxt.confige.js中以解释/api的来历</span></span><br><span class="line">  <span class="comment">/** 拦截请求设置 可以做一些请求之前的操作 token **/</span></span><br><span class="line">  $axios.interceptors.request.use(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//添加请求的头部，store.state.access_token这个是vuex中保存的token下面会解释到</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个位置可以获取浏览器的win所以可以读取token，在请求拦截之前把token添加进去</span></span><br><span class="line">    <span class="comment">//浏览器没有的话，说明不是登录状态，判断用户是否登录</span></span><br><span class="line"><span class="comment">// if (process.browser)&#123;&#125;这个是获取浏览器的win和dom</span></span><br><span class="line">      <span class="keyword">let</span> Token = <span class="string">''</span></span><br><span class="line">      <span class="keyword">if</span> (process.browser) &#123;</span><br><span class="line">        Token = <span class="built_in">window</span>.localStorage.getItem(<span class="string">'token'</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      config.headers[<span class="string">'Authorization'</span>] = <span class="string">'Bearer '</span> + Token</span><br><span class="line">      <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">      <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line"><span class="comment">// 2.2.响应拦截</span></span><br><span class="line">   $axios.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//获取的数据返回一个data</span></span><br><span class="line">      <span class="keyword">return</span> res.data</span><br><span class="line">    &#125;, err =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> err.data</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  inject(<span class="string">'api'</span>, apiAll($axios))<span class="comment">//inject全局暴漏，名字为api 导出的是这个axios</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>apiAll.js  请求集合，自定义的地址，和上面进行对应<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> homev2 <span class="keyword">from</span> <span class="string">'./homev2'</span> <span class="comment">//可以多个文件导入</span></span><br><span class="line"><span class="keyword">import</span> institutionalUserv2 <span class="keyword">from</span> <span class="string">'./institutionalUserv2'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">$axios</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...homev2($axios),<span class="comment">//遍历导入</span></span><br><span class="line">    ...institutionalUserv2($axios)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>homev2的文件:   请求分开的文件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*url是个字符串可拼接</span></span><br><span class="line"><span class="comment">axios.request(config)</span></span><br><span class="line"><span class="comment">axios.get(url[, config])</span></span><br><span class="line"><span class="comment">axios.delete(url[, config])</span></span><br><span class="line"><span class="comment">axios.head(url[, config])</span></span><br><span class="line"><span class="comment">axios.options(url[, config])</span></span><br><span class="line"><span class="comment">axios.post(url[, data[, config]])</span></span><br><span class="line"><span class="comment">axios.put(url[, data[, config]])</span></span><br><span class="line"><span class="comment">axios.patch(url[, data[, config]])</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">$axios</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    getListData () &#123;</span><br><span class="line">      <span class="keyword">return</span> $axios.get(<span class="string">'/v1/index'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  热门分类 /v1/index/hot-type</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    getHotType(id,data) &#123;</span><br><span class="line">      <span class="keyword">return</span>  $axios.post(<span class="string">"/v1/index/hot-type?id="</span> + id,&#123;</span><br><span class="line">        name:data.name</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传输图片，fil格式，前提提前转froomData格式</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    uImage(data) &#123;</span><br><span class="line">          <span class="keyword">return</span> $axios.post(<span class="string">'/v1/file/images'</span>,data)</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="vuex获取用户信息"><a href="#vuex获取用户信息" class="headerlink" title="vuex获取用户信息"></a>vuex获取用户信息</h3><p>如何存储token<br>if(process.browser){//获取浏览器对象cookie<br>  document.cookie = ‘token = ‘ + access_token;<br>}<br>如何清除token<br>var keys = document.cookie.match(/[^ =;]+(?==)/g)<br>if (keys) {<br>  for (var i = keys.length; i–;)<br>    document.cookie = keys[i] + ‘=0;expires=’ + new Date(0).toUTCString()<br>}</p><p>window.localStorage.setItem(‘token’,token)//存<br>window.localStorage.getItem(‘token’,token)//取<br>window.localStorage.setItem(‘user’, JSON.stringify(content.data))//json存储<br>JSON.parse(json);　　//解析为JSON对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> state = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  access_token: <span class="string">''</span>,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="comment">//保存access_token</span></span><br><span class="line">  ACCESS_TOKEN(state, playLoad) &#123;</span><br><span class="line">    state.access_token = playLoad</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">//每次页面加载的时候就会执行这个函数，之后可以获取到cookies保存的值，之后可以保存到vuex中，</span></span><br><span class="line">  <span class="comment">//通过plugins文件新建api文件进行网络请求以及axios的拦截等</span></span><br><span class="line">  <span class="keyword">async</span> nuxtServerInit(&#123; commit &#125;, &#123; req,app &#125;) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; token &#125; = req.cookies <span class="comment">//用户登录保存token</span></span><br><span class="line">      <span class="keyword">if</span> (token) &#123;<span class="comment">//如果用户登录，这里就是true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将token报错到stat中，使用mutations内的commit方法进行保存</span></span><br><span class="line">        commit(<span class="string">'ACCESS_TOKEN'</span>, token)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 网络请求 通过token获取用户信息保存到vuex中去 - 页面刷新会有问题</span></span><br><span class="line">        <span class="keyword">let</span> &#123; data &#125;  = <span class="keyword">await</span> app.$api.getUserInfo(token)</span><br><span class="line">        commit(<span class="string">'USER'</span>, data)</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>是根据文件的目录生成的路由_id.vue可以传输路由的参数，如果想有链接的标识，鼠标经过的时候下面显示连接使用标签：<nuxt-link to="/about">关于</nuxt-link></p><h4 id="路由问题"><a href="#路由问题" class="headerlink" title="路由问题"></a>路由问题</h4><p>多个路由传参使用_.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pages&#x2F;</span><br><span class="line">--| login&#x2F;</span><br><span class="line">-----| _.vue</span><br><span class="line">-----| _log</span><br><span class="line">-------|_.vue</span><br><span class="line">--| index.vue</span><br></pre></td></tr></table></figure><p>可以在:to=”login/1/2/3”,如果有子元素的话 :to=”login/1/log/1” 传输多个参数文件夹_这个符号可以动态传参<br>假设pages的目录结构如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pages&#x2F;</span><br><span class="line">--| user&#x2F;</span><br><span class="line">-----| index.vue</span><br><span class="line">-----| one.vue</span><br><span class="line">--| index.vue</span><br></pre></td></tr></table></figure><p>那么，Nuxt.js自动生成的路由配置如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">router: &#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'index'</span>,</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      component: <span class="string">'pages/index.vue'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'user'</span>,</span><br><span class="line">      path: <span class="string">'/user'</span>,</span><br><span class="line">      component: <span class="string">'pages/user/index.vue'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'user-one'</span>,</span><br><span class="line">      path: <span class="string">'/user/one'</span>,</span><br><span class="line">      component: <span class="string">'pages/user/one.vue'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会发现名称为users-id的路由路径带有:id？参数，表示该路由是可选的。原理跟vue动态路由是一致的。<br>   使用跳转的时候都是用nuxt-link或者this.$router.push({path:’’})，这样的话可以使用vuex</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">:to</span>=<span class="string">"'/users/' + id?name='四叶草'"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><p>在Nuxt.js里面定义带参数的动态路由，需要创建对应的以下划线作为前缀的Vue文件或目录。<br>以下目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pages&#x2F;</span><br><span class="line">--| _slug&#x2F;</span><br><span class="line">-----| comments.vue</span><br><span class="line">-----| index.vue</span><br><span class="line">--| users&#x2F;</span><br><span class="line">-----| _id.vue</span><br><span class="line">--| index.vue</span><br></pre></td></tr></table></figure><p>Nuxt.js生成对应的路由配置表为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">router: &#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'index'</span>,</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      component: <span class="string">'pages/index.vue'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'users-id'</span>,</span><br><span class="line">      path: <span class="string">'/users/:id?'</span>,</span><br><span class="line">      component: <span class="string">'pages/users/_id.vue'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'slug'</span>,</span><br><span class="line">      path: <span class="string">'/:slug'</span>,</span><br><span class="line">      component: <span class="string">'pages/_slug/index.vue'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'slug-comments'</span>,</span><br><span class="line">      path: <span class="string">'/:slug/comments'</span>,</span><br><span class="line">      component: <span class="string">'pages/_slug/comments.vue'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会发现名称为users-id的路由路径带有:id？参数，表示该路由是可选的。原理跟vue动态路由是一致的。<br>使用跳转的时候都是用nuxt-link或者this.$router.push({path:’’})，这样的话可以使用vuex</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nuxt-link</span> <span class="attr">:to</span>=<span class="string">"'/users/' + id?name='四叶草'"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">nuxt-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h3><p>需要详细阅读官方文章： - <a href="https://zh.nuxtjs.org/guide/plugins" target="_blank" rel="noopener">https://zh.nuxtjs.org/guide/plugins</a><br>之前默认安装element 安装富文本，图片裁切 地图，boot栅格，可以使用vue add方法进行安装，也可以npm i -d …安装<br>安装方法安装富文本图片裁切：npm install -d vue-quill-editor quill vue-cropper<br>官网：<br>vue-quill-editor：<a href="https://quilljs.com/" target="_blank" rel="noopener">https://quilljs.com/</a><br>git：<a href="https://github.com/surmon-china/vue-quill-editor" target="_blank" rel="noopener">https://github.com/surmon-china/vue-quill-editor</a><br>vue-cropper：<a href="https://github.com/xyxiao001/vue-cropper" target="_blank" rel="noopener">https://github.com/xyxiao001/vue-cropper</a><br>需要在plugins文件夹内注册插件<br>注册插件：plugins文件夹内 新建js文件 - 例子：如果有导入的css的话，建议放到os上使用cdn进行引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueQuillEditor <span class="keyword">from</span> <span class="string">'vue-quill-editor'</span></span><br><span class="line">Vue.use(VueQuillEditor)</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">需要nuxt.config.js内进行设置</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>shell</span><br><span class="line"><span class="comment">// nuxt.config.js</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">'@/plugins/element-ui'</span>,<span class="comment">//element</span></span><br><span class="line">    <span class="string">'@/plugins/api'</span>,<span class="comment">//封装的axios</span></span><br><span class="line">    <span class="string">'@/plugins/bootstrap-vue'</span>,<span class="comment">//栅格</span></span><br><span class="line">    <span class="string">'@/plugins/vue-moment'</span>,<span class="comment">//格式化时间</span></span><br><span class="line">    &#123; <span class="attr">src</span>: <span class="string">'@/plugins/map'</span>, <span class="attr">ssr</span>: <span class="literal">false</span> &#125;,<span class="comment">//地图</span></span><br><span class="line">    &#123; <span class="attr">src</span>: <span class="string">'@/plugins/vue-quill-editor'</span>, <span class="attr">ssr</span>: <span class="literal">false</span> &#125;,<span class="comment">//富文本</span></span><br><span class="line">    &#123; <span class="attr">src</span>: <span class="string">'@/plugins/vue-cropper'</span>, <span class="attr">ssr</span>: <span class="literal">false</span> &#125;,<span class="comment">//裁切</span></span><br><span class="line">    &#123; <span class="attr">src</span>: <span class="string">'@/plugins/md5'</span>, <span class="attr">ssr</span>: <span class="literal">false</span> &#125;<span class="comment">//md5加密</span></span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><h3 id="新建一个isMobile-js文件，路径自选，我的路径是-static-js-isMobile-js"><a href="#新建一个isMobile-js文件，路径自选，我的路径是-static-js-isMobile-js" class="headerlink" title="新建一个isMobile.js文件，路径自选，我的路径是/static/js/isMobile.js"></a>新建一个isMobile.js文件，路径自选，我的路径是/static/js/isMobile.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"判断移动端"</span>);</span><br><span class="line">    <span class="keyword">var</span> sUserAgent = navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/ipad|iphone|midp|rv:1.2.3.4|ucweb|android|windows ce|windows mobile/</span>.test(sUserAgent)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"移动端"</span>);</span><br><span class="line">        <span class="comment">//跳转移动端页面</span></span><br><span class="line">        <span class="built_in">window</span>.location.replace(<span class="string">"xxxx"</span>);<span class="comment">//跳转后没有后退功能 </span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"PC端"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="在nuxt-config-js加上对应配置"><a href="#在nuxt-config-js加上对应配置" class="headerlink" title="在nuxt.config.js加上对应配置"></a>在nuxt.config.js加上对应配置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">head: &#123;</span><br><span class="line">    script:[  </span><br><span class="line">      &#123;src:'js/isMobile.js'&#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>重新启动项目可以看到效果</p><h3 id="打包整理服务器端上线"><a href="#打包整理服务器端上线" class="headerlink" title="打包整理服务器端上线"></a>打包整理服务器端上线</h3><p>首先npm run dev 会生成一个dist和.nuxt文件，用到的是nuxt，nuxt.config.js，static，package.json四个文件<br>之后本地服务器端运行 npm start</p><h3 id="富文本安装和图片裁切-最好安装element"><a href="#富文本安装和图片裁切-最好安装element" class="headerlink" title="富文本安装和图片裁切 - 最好安装element"></a>富文本安装和图片裁切 - 最好安装element</h3><p>安装富文本quill 裁切图片：vue-cropper<br>npm install -d vue-quill-editor quill vue-cropper<br>在插件目录下全局引入 - 新建js文件，可以分开，可以合在一起<br>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueQuillEditor <span class="keyword">from</span> <span class="string">'vue-quill-editor'</span></span><br><span class="line">Vue.use(VueQuillEditor)</span><br></pre></td></tr></table></figure><p>全局引用：nuxt.config.js配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="string">'@/plugins/element-ui'</span>,</span><br><span class="line">  <span class="string">'@/plugins/bootstrap-vue'</span>,</span><br><span class="line">  &#123; <span class="attr">src</span>: <span class="string">'@/plugins/map'</span>, <span class="attr">ssr</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">src</span>: <span class="string">'@/plugins/vue-quill-editor'</span>, <span class="attr">ssr</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">src</span>: <span class="string">'@/plugins/vue-cropper'</span>, <span class="attr">ssr</span>: <span class="literal">false</span> &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>具体使用富文本 - nuxt使用富文本图片裁切以及element<br>图片裁切 - nuxt单个裁切图片和多个裁切</p><h3 id="百度地图的使用"><a href="#百度地图的使用" class="headerlink" title="百度地图的使用"></a>百度地图的使用</h3><p>安装vue-baidu-map</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-baidu-map -D</span><br></pre></td></tr></table></figure><p>在plugins新建map.js:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import BaiduMap from &#39;vue-baidu-map&#39;</span><br><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">Vue.use(BaiduMap, &#123;</span><br><span class="line">  ak: &#39;申请的百度地图密匙&#39;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>直接去 - Nuxt.js使用百度地图vue-baidu-map</p>]]></content>
      
      
      <categories>
          
          <category> Nuxt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuxt的使用 nuxt的基本组件安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用实时通讯</title>
      <link href="/A-lyc/2021/02/07/vue/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%AE%9E%E6%97%B6%E9%80%9A%E8%AE%AF/"/>
      <url>/A-lyc/2021/02/07/vue/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%AE%9E%E6%97%B6%E9%80%9A%E8%AE%AF/</url>
      
        <content type="html"><![CDATA[<p>如何在uniapp中使用实时通讯uni.connectSocket<br>地址：<a href="https://uniapp.dcloud.io/api/request/websocket?id=connectsocket" target="_blank" rel="noopener">https://uniapp.dcloud.io/api/request/websocket?id=connectsocket</a><br>首先知道只要打开页面就需要开始实时通讯，所以要在vue的页面加载的时候可在app.vue中直接声明<br>使用uni.connectSocket方法：<br>    必穿参数：url:ws:/wss<br>    返回参数：complete: () =&gt; {}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">            /**</span><br><span class="line">             *  在 App.vue 初始化 ws 对象</span><br><span class="line">             *  这里仅仅初始化，不做任何操作</span><br><span class="line">             *  将 ws 挂到 Vue 原型链上</span><br><span class="line">             *  方便子组件中使用</span><br><span class="line">             **/</span><br><span class="line">            init() &#123;</span><br><span class="line">                // 全局暴漏$ws</span><br><span class="line">                Vue.prototype.$ws = uni.connectSocket(&#123;</span><br><span class="line">                    url: 'ws:', //链接成功</span><br><span class="line">                    complete: () =&gt; &#123;&#125; // 需要一个成功失败或者都执行的参数</span><br><span class="line">                &#125;);</span><br><span class="line">                // 初始化之后进行 验证链接</span><br><span class="line">                socket()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>新建一个函数socket：对应socket()</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">let getSocket =  function ()&#123;</span><br><span class="line">    // 链接成功 一开始第一次握手</span><br><span class="line">    uni.onSocketOpen(function (res) &#123;</span><br><span class="line">        console.log('WebSocket连接已打开！');</span><br><span class="line">    &#125;);</span><br><span class="line">    // WebSocket连接打开失败，请检查！</span><br><span class="line">    uni.onSocketError(function (res) &#123;</span><br><span class="line">        console.log('WebSocket连接打开失败，请检查！');</span><br><span class="line">    &#125;);</span><br><span class="line">    uni.onSocketMessage(function (res) &#123;</span><br><span class="line">        // 传来的数据进行结构</span><br><span class="line">        let &#123;Data, MsgType&#125; = JSON.parse(res.data)</span><br><span class="line">        // 链接验证使用 每个一段时间发送一个p   uni.sendSocketMessage的方法 为字符串</span><br><span class="line">            setInterval(() =&gt; &#123;</span><br><span class="line">                uni.sendSocketMessage(&#123;</span><br><span class="line">                    data: 'p'</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;, 20000)</span><br><span class="line">            // 直接跳出</span><br><span class="line">             uni.closeSocket(&#123;code: 1000&#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">// 导出去</span><br><span class="line">export default getSocket</span><br></pre></td></tr></table></figure><p>页面中使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 使用方式 可见官网onMessage 接收数据给服务器</span><br><span class="line"> this.$ws.onMessage(async res =&gt;&#123;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue 实时通讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鲁班h5</title>
      <link href="/A-lyc/2020/12/01/%E9%B2%81%E7%8F%ADh5/"/>
      <url>/A-lyc/2020/12/01/%E9%B2%81%E7%8F%ADh5/</url>
      
        <content type="html"><![CDATA[<p>是一个制作易企秀，的开放源码，鲁班h5网址：<a href="https://h5.luban-h5.com/#/work-manager/list" target="_blank" rel="noopener">https://h5.luban-h5.com/#/work-manager/list</a><br>文档可查询，前端：vue，后端：Strapi，储存：Sqlite/Mysql</p><h1 id="创建一个项目-本地安装了-Node、Yarn"><a href="#创建一个项目-本地安装了-Node、Yarn" class="headerlink" title="创建一个项目 本地安装了 Node、Yarn"></a>创建一个项目 本地安装了 Node、Yarn</h1><ul><li>适合 熟悉前端开发的同学、使用 Windows 的同学，需要安装yarn和npm</li><li>使用npm 安装yarn - npm install -g yarn<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ly525/luban-h5</span><br><span class="line">cd luban-h5 # 项目根目录</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 后端</span></span><br><span class="line">cd back-end/h5-api &amp;&amp; yarn install &amp;&amp; yarn dev</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 前端</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新开一个终端，在项目根目录执行如下命令</span></span><br><span class="line">cd front-end/h5 &amp;&amp; yarn &amp;&amp; yarn build:engine &amp;&amp; yarn dev</span><br></pre></td></tr></table></figure><h2 id="管理后台"><a href="#管理后台" class="headerlink" title="管理后台"></a>管理后台</h2></li><li>本地访问地址为：<a href="http://localhost:1337/admin" target="_blank" rel="noopener">http://localhost:1337/admin</a></li></ul><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ul><li><p>接口 403 Forbidden<br>访问：<a href="http://localhost:1337/admin" target="_blank" rel="noopener">http://localhost:1337/admin</a> (鲁班的管理后台，在这里管理数据、接口相关权限)<br>请按照下图的操作，打开接口访问权限：Roles And Permission -&gt; Public -&gt; Permissions -&gt;Work的权限全部放开</p></li><li><p>图片上传不上去<br>Roles And Permission -&gt; Public -&gt; Permissions -&gt; upload 权限打开</p></li></ul><h1 id="视频教程"><a href="#视频教程" class="headerlink" title="视频教程"></a>视频教程</h1><p>哔哩哔哩：<a href="https://www.bilibili.com/video/av76827615?zw" target="_blank" rel="noopener">https://www.bilibili.com/video/av76827615?zw</a></p><h1 id="报splite3错误"><a href="#报splite3错误" class="headerlink" title="报splite3错误"></a>报splite3错误</h1><p> 报错：error The client <code>sqlite3</code> is not installed.<br> 因为sqlite3框架没有安装，需要镜像或者翻墙去安装，在deploy中打开mirror.sh中找到对应的镜像源需要安装一下即可</p>]]></content>
      
      
      <categories>
          
          <category> lubanH5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lubanH5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信云支付</title>
      <link href="/A-lyc/2020/11/14/%E5%BE%AE%E4%BF%A1/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
      <url>/A-lyc/2020/11/14/%E5%BE%AE%E4%BF%A1/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/</url>
      
        <content type="html"><![CDATA[<h1 id="serverLess实现微信原生支付"><a href="#serverLess实现微信原生支付" class="headerlink" title="serverLess实现微信原生支付"></a>serverLess实现微信原生支付</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>拥有营业执照</li><li>注册公众号，微信支付商户号</li><li>开发微信小程序上线成功，并开通微信支付</li></ul><h2 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h2><ol><li>小程序</li></ol><ul><li>微信公众号<br>appID（小程序ID）：登录小程序 - 开发 - 开发设置<br>appServer（小程序密钥）：登录小程序 - 开发 - 开发设置<br>已关支付联商户号：登录小程序 - 开发 - 开发设置</li><li>登录微信商户平台<br>账户中心 - 登录账号<br>账户中心 - api安全 - 设置api密钥<h2 id="微信开发工具开发"><a href="#微信开发工具开发" class="headerlink" title="微信开发工具开发"></a>微信开发工具开发</h2><h3 id="打开微信小程序"><a href="#打开微信小程序" class="headerlink" title="打开微信小程序"></a>打开微信小程序</h3><ul><li>新建项目 - 填写基本信息 <h3 id="初始化云开发"><a href="#初始化云开发" class="headerlink" title="初始化云开发"></a>初始化云开发</h3></li><li>点击云开发 - 创建云开发 记住环境ID，</li><li>设计默认请求的云环境<br>在app.js - 开始创建的时候有，需要打开env进行关联即可，值为环境ID<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wx.cloud.init(&#123;</span><br><span class="line">env:<span class="string">'云开发环境ID'</span>,</span><br><span class="line">traceUser:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li>页面绘制<br>在pages/index/index.wxml中<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view bindtap='doPay'&gt;</span><br><span class="line">  下单</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>在pages/index/index.js中<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line">Page(&#123;</span><br><span class="line">data:&#123;&#125;,</span><br><span class="line">onLoad:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">doPay:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'点击了下单'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="调用云函数"><a href="#调用云函数" class="headerlink" title="调用云函数"></a>调用云函数</h3><h4 id="创建云函数"><a href="#创建云函数" class="headerlink" title="创建云函数"></a>创建云函数</h4><ul><li>在云函数文件夹右键新建node云函数</li><li>创建结果回调云函数payCallack<br>· 注意为推送支付结果做准备<br>在cloudfunction/payCallack/index.js中<br>在cloudfunction/unifiedOrder/index.js中<br>全部初始化一下<br>右键上传并部署<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">'wx-server-sdk'</span>)</span><br><span class="line">cloud.init()</span><br><span class="line">exports.main = <span class="keyword">async</span> (event,context) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> wxContext = cloud.getwxContext();</span><br><span class="line"><span class="built_in">console</span>.log(event)</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">event,</span><br><span class="line">openid:wxContext.OPENID,</span><br><span class="line">appid:wxContext.APPID,</span><br><span class="line">unionid:wxContextUNIONID</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用云函数-1"><a href="#调用云函数-1" class="headerlink" title="调用云函数"></a>调用云函数</h4>在pages/index/index.js中<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">data:&#123;&#125;,</span><br><span class="line">onLoad:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">doPay:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 调用云函数的方法</span></span><br><span class="line">  wx.cloud.callFunction(&#123;</span><br><span class="line">  name:<span class="string">'unifiedorder'</span>,</span><br><span class="line">  data:&#123;&#125;,</span><br><span class="line">  success:<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'成功'</span>,res)</span><br><span class="line">  &#125;,</span><br><span class="line">  fail:<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'失败'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="支付对象下单方法-amp-返回支付参数"><a href="#支付对象下单方法-amp-返回支付参数" class="headerlink" title="支付对象下单方法&amp;返回支付参数"></a>支付对象下单方法&amp;返回支付参数</h4>在cloudfunction/unifiedOrder/index.js中<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">'wx-server-sdk'</span>)</span><br><span class="line">cloud.init(&#123;</span><br><span class="line">  env:cloud.DYNAMIC_CURRENT_ENV</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 随机字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomStr</span>(<span class="params">length</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> chars = <span class="string">'ABDEFGHIJKLMNOPQSTUVWXYZacdefghijklmnopqistuvwxyz0123456789'</span></span><br><span class="line">  <span class="keyword">let</span> noceStr = <span class="string">''</span></span><br><span class="line">  <span class="keyword">let</span> maxPos = chars.length</span><br><span class="line">  <span class="keyword">while</span> (length--) noceStr += chars[<span class="built_in">Math</span>.random()*maxPos | <span class="number">0</span>]</span><br><span class="line">  <span class="keyword">return</span> noceStr</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line">exports.main = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line"><span class="comment">// cloud.cloudPay.unifiedOrder 统一下单接口</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> cloud.cloudPay.unifiedOrder(&#123;</span><br><span class="line">  body:<span class="string">'商品描述'</span>,</span><br><span class="line">  outTradeNo:randomStr(<span class="number">28</span>),<span class="comment">// 订单号，不能重复</span></span><br><span class="line">  spbillCreateIp:<span class="string">'终端IP'</span>,</span><br><span class="line">  subMchId:<span class="string">'商户号'</span>,</span><br><span class="line">  totalFee : <span class="number">1</span>, <span class="comment">// 总价</span></span><br><span class="line">  envId: <span class="string">"test-f0b102"</span>,<span class="comment">// 结果通知回调云函数环境</span></span><br><span class="line">  functionName: <span class="string">"pay_cb"</span><span class="comment">// 结果通知回调云函数名</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调起支付"><a href="#调起支付" class="headerlink" title="调起支付"></a>调起支付</h4>在pages/index/index.js中<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">wx.cloud.callFunction(&#123;</span><br><span class="line">  name: <span class="string">'unifiedOrder'</span>,<span class="comment">// 函数名</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> payment = res.result.payment</span><br><span class="line">    <span class="comment">// 微信小程序提供的方法 - 弹出扫码</span></span><br><span class="line">    wx.requestPayment(&#123;</span><br><span class="line">      ...payment,</span><br><span class="line">      success (res) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'pay success'</span>, res)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail (res) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'pay fail'</span>, err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  fail: <span class="built_in">console</span>.error,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="扫码-支付-成功"><a href="#扫码-支付-成功" class="headerlink" title="扫码-支付-成功"></a>扫码-支付-成功</h4><h4 id="展示结果"><a href="#展示结果" class="headerlink" title="展示结果"></a>展示结果</h4></li></ul>]]></content>
      
      
      <categories>
          
          <category> 微信云支付 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信云支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp云开发</title>
      <link href="/A-lyc/2020/11/13/uniapp/uniapp%E4%BA%91%E5%BC%80%E5%8F%91/"/>
      <url>/A-lyc/2020/11/13/uniapp/uniapp%E4%BA%91%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<ul><li><p>使用HBuilder X，新建一个项目，可选择云开发基础模板，或者默认模板，新建之后会在根目录有个文件夹为：cloudfunctions，此文件夹为操作数据库文件夹看，（下图）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/A-lyc/A-lyc/2020/11/13/uniapp/uniapp%E4%BA%91%E5%BC%80%E5%8F%91/uniapp01.png" alt="新建项目" title>                </div>                <div class="image-caption">新建项目</div>            </figure></li><li><p>右键新建云函数，之后本地运行看是否可以读出数据，之后上传并运行，即可使用（）<br>举例右键创建云函数为：test</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">'use strict';</span><br><span class="line">const db = uniCloud.database()</span><br><span class="line">exports.main = async (event, context) =&gt; &#123;</span><br><span class="line">const collection = db.collection('test')</span><br><span class="line">const res = await collection.add(event)</span><br><span class="line">return &#123;res,name:1&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在<a href="https://unicloud.dcloud.net.cn/home上面创建服务空间" target="_blank" rel="noopener">https://unicloud.dcloud.net.cn/home上面创建服务空间</a> - 数据库 - 云数据库 - 添加数据库表，<br>之后调用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uniCloud.callFunction(&#123;</span><br><span class="line">name:'test'</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">console.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="cli项目中使用uniCloud"><a href="#cli项目中使用uniCloud" class="headerlink" title="cli项目中使用uniCloud"></a>cli项目中使用uniCloud</h2><ul><li>如果要在cli项目中使用uniCloud，可以参考以下步骤</li><li>将cli项目导入HBuilderX</li><li>在项目根目录（src同级）创建cloudfunctions-aliyun或者cloudfunctions-tcb目录</li><li>打开src/manifest.json，在基础配置–&gt;uni-app应用标示处点击重新获取</li><li>在步骤2创建的目录右键关联服务空间</li><li>运行与发行云函数只能使用HBuilderX的菜单，不可使用package.json内的命令</li><li>如果HBuilderX菜单运行不能满足需求可以考虑自行初始化服务空间服务空间初始化</li></ul></li></ul><h2 id="获取集合引用"><a href="#获取集合引用" class="headerlink" title="获取集合引用"></a>获取集合引用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const db = uniCloud.database();</span><br><span class="line">// 获取 `user` 集合的引用</span><br><span class="line">const collection = db.collection('user');</span><br></pre></td></tr></table></figure><h2 id="集合-Collection-的方法"><a href="#集合-Collection-的方法" class="headerlink" title="集合 Collection 的方法"></a>集合 Collection 的方法</h2><p>通过 db.collection(name).add() 可以获取指定集合的引用，在集合上可以进行以下操作</p><table><thead><tr><th>类型</th><th>接口</th><th>说明</th></tr></thead><tbody><tr><td>写</td><td>add</td><td>新增记录（触发请求）</td></tr><tr><td>计数</td><td>count</td><td>获取符合条件的记录条数</td></tr><tr><td>读</td><td>get</td><td>获取集合中的记录，如果有使用 where 语句定义查询条件，则会返回匹配结果集 (触发请求)</td></tr><tr><td>引用</td><td>doc</td><td>获取对该集合中指定 id 的记录的引用</td></tr><tr><td>查询条件</td><td>where</td><td>通过指定条件筛选出匹配的记录，可搭配查询指令（eq, gt, in, ...）使用</td></tr><tr><td></td><td>skip</td><td>跳过指定数量的文档，常用于分页，传入 offset。clientDB组件有封装好的更易用的分页，<a href="/uniCloud/uni-clientdb-component">另见</a></td></tr><tr><td></td><td>orderBy</td><td>排序方式</td></tr><tr><td></td><td>limit</td><td>返回的结果集(文档数量)的限制，有默认值和上限值</td></tr><tr><td></td><td>field</td><td>指定需要返回的字段</td></tr></tbody></table>where 类似于微信小程序查询及更新指令用于在 where 中指定字段需满足的条件，指令可通过 db.command 对象取得。collection对象的方法可以增和查数据，删和改不能直接操作，需要collection对象通过doc或get得到指定的记录后再调用remove或update方法进行删改。## 记录 Record / Document通过 db.collection(collectionName).doc(docId) 可以获取指定集合上指定 id 的记录的引用，在记录上可以进行以下操作<table><thead><tr><th>接口</th><th>说明</th><th></th></tr></thead><tbody><tr><td>写</td><td>set</td><td>覆写记录</td></tr><tr><td></td><td>update</td><td>局部更新记录(触发请求)</td></tr><tr><td></td><td>remove</td><td>删除记录(触发请求)</td></tr><tr><td>读</td><td>get</td><td>获取记录(触发请求)</td></tr></tbody></table><h2 id="查询筛选指令-Query-Command"><a href="#查询筛选指令-Query-Command" class="headerlink" title="查询筛选指令 Query Command"></a>查询筛选指令 Query Command</h2><p>以下指令挂载在 db.command 下</p><table><thead><tr><th>类型</th><th>接口</th><th>说明</th></tr></thead><tbody><tr><td>比较运算</td><td>eq</td><td>字段等于 ==</td></tr><tr><td></td><td>neq</td><td>字段不等于 !=</td></tr><tr><td></td><td>gt</td><td>字段大于 &gt;</td></tr><tr><td></td><td>gte</td><td>字段大于等于 &gt;=</td></tr><tr><td></td><td>lt</td><td>字段小于 &lt;</td></tr><tr><td></td><td>lte</td><td>字段小于等于 &lt;=</td></tr><tr><td></td><td>in</td><td>字段值在数组里</td></tr><tr><td></td><td>nin</td><td>字段值不在数组里</td></tr><tr><td>逻辑运算</td><td>and</td><td>表示需同时满足指定的所有条件</td></tr><tr><td></td><td>or</td><td>表示需同时满足指定条件中的至少一个</td></tr></tbody></table><h2 id="字段更新指令-Update-Command"><a href="#字段更新指令-Update-Command" class="headerlink" title="字段更新指令 Update Command"></a>字段更新指令 Update Command</h2><p>以下指令挂载在 db.command 下</p><table><thead><tr><th>类型</th><th>接口</th><th>说明</th></tr></thead><tbody><tr><td>字段</td><td>set</td><td>设置字段值</td></tr><tr><td></td><td>remove</td><td>删除字段</td></tr><tr><td></td><td>inc</td><td>加一个数值，原子自增</td></tr><tr><td></td><td>mul</td><td>乘一个数值，原子自乘</td></tr><tr><td></td><td>push</td><td>数组类型字段追加尾元素，支持数组</td></tr><tr><td></td><td>pop</td><td>数组类型字段删除尾元素，支持数组</td></tr><tr><td></td><td>shift</td><td>数组类型字段删除头元素，支持数组</td></tr><tr><td></td><td>unshift</td><td>数组类型字段追加头元素，支持数组</td></tr></tbody></table><h2 id="时间-Date"><a href="#时间-Date" class="headerlink" title="时间 Date"></a>时间 Date</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//服务端当前时间</span><br><span class="line">  new db.serverDate()</span><br><span class="line"></span><br><span class="line">  //服务端当前时间加1S</span><br><span class="line">  new db.serverDate(&#123;</span><br><span class="line">    offset: 1000</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>如果需要对日期进行比较操作，可以使用聚合操作符将日期进行转化，比如以下示例查询所有time字段在2020-02-02以后的记录</p><h2 id="新增文档"><a href="#新增文档" class="headerlink" title="新增文档"></a>新增文档</h2><p> collection.add(data)</p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>object | array</td><td>是</td><td>{_id: '10001', 'name': 'Ben'} _id 非必填</td></tr></tbody></table><ul><li><p>单条插入时</p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>String</td><td>插入记录的id</td></tr></tbody></table></li><li><p>批量插入时</p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>inserted</td><td>Number</td><td>插入成功条数</td></tr><tr><td>ids</td><td>Array</td><td>批量插入所有记录的id</td></tr></tbody></table></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 单条插入数据</span><br><span class="line">let res = await collection.add(&#123;</span><br><span class="line">  name: 'Ben'</span><br><span class="line">&#125;)</span><br><span class="line">// 批量插入数据</span><br><span class="line">let res = await collection.add([&#123;</span><br><span class="line">  name: 'Alex'</span><br><span class="line">&#125;,&#123;</span><br><span class="line">  name: 'Ben'</span><br><span class="line">&#125;,&#123;</span><br><span class="line">  name: 'John'</span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure><ul><li>云服务商为阿里云时，若集合不存在，调用add方法会自动创建集合<br>方法2： collection.doc().set(data)<br>也可通过 set 方法新增一个文档，需先取得文档引用再调用 set 方法。 如果文档不存在，set 方法会创建一个新文档。<br>参数说明<table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>object</td><td>是</td><td>更新字段的Object，{'name': 'Ben'} _id 非必填</td></tr></tbody></table></li></ul><p>响应参数</p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>updated</td><td>Number</td><td>更新成功条数，数据更新前后没变化时也会返回1</td></tr><tr><td>upsertedId</td><td>String</td><td>创建的文档id</td></tr></tbody></table><h2 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h2><p>支持 where()、limit()、skip()、orderBy()、get()、field()、count() 等操作。<br>只有当调用get()时才会真正发送查询请求。<br>注：默认取前100条数据，最大取前100条数据。</p><h3 id="添加查询条件"><a href="#添加查询条件" class="headerlink" title="添加查询条件"></a>添加查询条件</h3><p>collection.where()<br>设置过滤条件，where 可接收对象作为参数，表示筛选出拥有和传入对象相同的 key-value 的文档。比如筛选出所有类型为计算机的、内存为 8g 的商品：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const dbCmd = db.command</span><br><span class="line">let res = await db.collection('goods').where(&#123;</span><br><span class="line">  category: 'computer',</span><br><span class="line">  type: &#123;</span><br><span class="line">    memory: 8,</span><br><span class="line">    // memory: dbCmd.gt(8), // 表示大于 8</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).get()</span><br></pre></td></tr></table></figure><h3 id="获取查询数量"><a href="#获取查询数量" class="headerlink" title="获取查询数量"></a>获取查询数量</h3><p>collection.count()<br>阿里云不同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let res = await db.collection('goods').where(&#123;</span><br><span class="line">  category: 'computer',</span><br><span class="line">  type: &#123;</span><br><span class="line">    memory: 8,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).count()</span><br></pre></td></tr></table></figure><h3 id="设置记录数量"><a href="#设置记录数量" class="headerlink" title="设置记录数量"></a>设置记录数量</h3><p>collection.limit()</p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>value</td><td>Number</td><td>是</td><td>返回的数据条数</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let res = await collection.limit(1).get() // 只返回第一条记录</span><br></pre></td></tr></table></figure><h3 id="设置起始位置"><a href="#设置起始位置" class="headerlink" title="设置起始位置"></a>设置起始位置</h3><p>collection.skip(value)</p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>value</td><td>Number</td><td>是</td><td>跳过指定的位置，从位置之后返回数据</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let res = await collection.skip(4).get()</span><br></pre></td></tr></table></figure><h3 id="对结果排序"><a href="#对结果排序" class="headerlink" title="对结果排序"></a>对结果排序</h3><p>collection.orderBy(field, orderType)</p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>field</td><td>string</td><td>是</td><td>排序的字段</td></tr><tr><td>orderType</td><td>string</td><td>是</td><td>排序的顺序，升序(asc) 或 降序(desc)</td></tr></tbody></table><p>如果需要对嵌套字段排序，需要用 “点表示法” 连接嵌套字段，比如 style.color 表示字段 style 里的嵌套字段 color。<br>同时也支持按多个字段排序，多次调用 orderBy 即可，多字段排序时的顺序会按照 orderBy 调用顺序先后对多个字段排序<br>使用示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let res = await collection.orderBy("name", "asc").get()</span><br></pre></td></tr></table></figure><h3 id="指定返回字段"><a href="#指定返回字段" class="headerlink" title="指定返回字段"></a>指定返回字段</h3><p>collection.field()<br>从查询结果中，过滤掉不需要的字段，或者指定要返回的字段。</p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>-</td><td>object</td><td>是</td><td>过滤字段对象，包含字段名和策略，不返回传false，返回传true</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collection.field(&#123; 'age': true &#125;) //只返回age字段，其他字段不返回</span><br></pre></td></tr></table></figure><p>备注：只能指定要返回的字段或者不要返回的字段。即{‘a’: true, ‘b’: false}是一种错误的参数格式</p><h3 id="查询指令"><a href="#查询指令" class="headerlink" title="查询指令"></a>查询指令</h3><p>查询指令以dbCmd.开头，包括等于、不等于、大于、大于等于、小于、小于等于、in、nin、and、or。</p><p>下面的查询指令以以下数据集为例：</p><h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><h3 id="方式1-通过指定文档ID删除"><a href="#方式1-通过指定文档ID删除" class="headerlink" title="方式1 通过指定文档ID删除"></a>方式1 通过指定文档ID删除</h3><p>collection.doc(_id).remove()</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 清理全部数据</span><br><span class="line">let res = await collection.get()</span><br><span class="line">res.data.map(async(document) =&gt; &#123;</span><br><span class="line">  return await collection.doc(document.id).remove();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="方式2-条件查找文档然后直接批量删除"><a href="#方式2-条件查找文档然后直接批量删除" class="headerlink" title="方式2 条件查找文档然后直接批量删除"></a>方式2 条件查找文档然后直接批量删除</h3><p>collection.where().remove()</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 删除字段a的值大于2的文档</span><br><span class="line">const dbCmd = db.command</span><br><span class="line">let res = await collection.where(&#123;</span><br><span class="line">  a: dbCmd.gt(2)</span><br><span class="line">&#125;).remove()</span><br><span class="line"></span><br><span class="line">// 清理全部数据</span><br><span class="line">const dbCmd = db.command</span><br><span class="line">let res = await collection.where(&#123;</span><br><span class="line">  _id: dbCmd.exists(true)</span><br><span class="line">&#125;).remove()</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const db = uniCloud.database();</span><br><span class="line">db.collection("table1").doc("5f79fdb337d16d0001899566").remove()</span><br><span class="line">    .then((res) =&gt; &#123;</span><br><span class="line">        console.log("删除成功，删除条数为: ",res.deleted);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((err) =&gt; &#123;</span><br><span class="line">        console.log( err.message )</span><br><span class="line">    &#125;)</span><br><span class="line">    .finally(() =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h2><h3 id="更新指定文档"><a href="#更新指定文档" class="headerlink" title="更新指定文档"></a>更新指定文档</h3><p>collection.doc().update(Object data)<br>update参数</p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>object</td><td>是</td><td>更新字段的Object，{'name': 'Ben'} _id 非必填</td></tr></tbody></table><p>响应参数</p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>updated</td><td>Number</td><td>更新成功条数，数据更新前后没变化时会返回0</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 更新 文档</span><br><span class="line">let res = await collection.doc('doc-id').update(&#123;</span><br><span class="line">  name: "Hey",</span><br><span class="line">  count: &#123;</span><br><span class="line">    fav: 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 更新前</span><br><span class="line">&#123;</span><br><span class="line">  "_id": "doc-id",</span><br><span class="line">  "name": "Hello",</span><br><span class="line">  "count": &#123;</span><br><span class="line">    "fav": 0,</span><br><span class="line">    "follow": 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 更新后</span><br><span class="line">&#123;</span><br><span class="line">  "_id": "doc-id",</span><br><span class="line">  "name": "Hey",</span><br><span class="line">  "count": &#123;</span><br><span class="line">    "fav": 1,</span><br><span class="line">    "follow": 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新数组时，已数组下标作为key即可，比如以下示例将数组arr内下标为1的值修改为 uniCloud</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> // 更新数组时</span><br><span class="line">let res = await collection.doc('doc-id').update(&#123;</span><br><span class="line">  arr: &#123;</span><br><span class="line">    1: "uniCloud"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 更新前</span><br><span class="line">&#123;</span><br><span class="line">  "_id": "doc-id",</span><br><span class="line">  "arr": ["hello", "world"]</span><br><span class="line">&#125;</span><br><span class="line">// 更新后</span><br><span class="line">&#123;</span><br><span class="line">  "_id": "doc-id",</span><br><span class="line">  "arr": ["hello", "uniCloud"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新文档，如果不存在则创建"><a href="#更新文档，如果不存在则创建" class="headerlink" title="更新文档，如果不存在则创建"></a>更新文档，如果不存在则创建</h3><p>collection.doc().set()<br>此方法会覆写已有字段，需注意与update表现不同，比如以下示例执行set之后follow字段会被删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">let res = await collection.doc('doc-id').set(&#123;</span><br><span class="line">  name: "Hey",</span><br><span class="line">  count: &#123;</span><br><span class="line">    fav: 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 更新前</span><br><span class="line">&#123;</span><br><span class="line">  "_id": "doc-id",</span><br><span class="line">  "name": "Hello",</span><br><span class="line">  "count": &#123;</span><br><span class="line">    "fav": 0,</span><br><span class="line">    "follow": 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 更新后</span><br><span class="line">&#123;</span><br><span class="line">  "_id": "doc-id",</span><br><span class="line">  "name": "Hey",</span><br><span class="line">  "count": &#123;</span><br><span class="line">    "fav": 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批量更新文档"><a href="#批量更新文档" class="headerlink" title="批量更新文档"></a>批量更新文档</h3><p>collection.update()</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const dbCmd = db.command</span><br><span class="line">let res = await collection.where(&#123;name: dbCmd.eq('hey')&#125;).update(&#123;</span><br><span class="line">  age: 18,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="更新数组内指定下标的元素"><a href="#更新数组内指定下标的元素" class="headerlink" title="更新数组内指定下标的元素"></a>更新数组内指定下标的元素</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">const res = await db.collection('query').doc('1').update(&#123;</span><br><span class="line">  // 更新students[1]</span><br><span class="line">  ['students.' + 1]: &#123;</span><br><span class="line">    name: 'wang'</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 更新前</span><br><span class="line">&#123;</span><br><span class="line">  "_id": "1",</span><br><span class="line">  "students": [</span><br><span class="line">    &#123;</span><br><span class="line">      "name": "zhang"</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "name": "li"</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 更新后</span><br><span class="line">&#123;</span><br><span class="line">  "_id": "1",</span><br><span class="line">  "students": [</span><br><span class="line">    &#123;</span><br><span class="line">      "name": "zhang"</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "name": "wang"</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新数组内匹配条件的元素"><a href="#更新数组内匹配条件的元素" class="headerlink" title="更新数组内匹配条件的元素"></a>更新数组内匹配条件的元素</h3><p>注意：只可确定数组内只会被匹配到一个的时候使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">const res = await db.collection('query').where(&#123;</span><br><span class="line">    'students.id': '001'</span><br><span class="line">&#125;).update(&#123;</span><br><span class="line">  // 将students内id为001的name改为li</span><br><span class="line">    'students.$.name': 'li'</span><br><span class="line">&#125;)</span><br><span class="line">// 更新前</span><br><span class="line">&#123;</span><br><span class="line">  "_id": "1",</span><br><span class="line">  "students": [</span><br><span class="line">    &#123;</span><br><span class="line">      "id": "001",</span><br><span class="line">      "name": "zhang"</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "id": "002",</span><br><span class="line">      "name": "wang"</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 更新后</span><br><span class="line">&#123;</span><br><span class="line">  "_id": "1",</span><br><span class="line">  "students": [</span><br><span class="line">    &#123;</span><br><span class="line">      "id": "001",</span><br><span class="line">      "name": "li"</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      "id": "002",</span><br><span class="line">      "name": "wang"</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新操作符"><a href="#更新操作符" class="headerlink" title="更新操作符"></a>更新操作符</h3><p><a href="https://uniapp.dcloud.io/uniCloud/cf-database?id=%e6%9b%b4%e6%96%b0%e6%93%8d%e4%bd%9c%e7%ac%a6" target="_blank" rel="noopener">https://uniapp.dcloud.io/uniCloud/cf-database?id=%e6%9b%b4%e6%96%b0%e6%93%8d%e4%bd%9c%e7%ac%a6</a></p><h2 id="GEO地理位置"><a href="#GEO地理位置" class="headerlink" title="GEO地理位置"></a>GEO地理位置</h2><p>注意：如果需要对类型为地理位置的字段进行搜索，一定要建立地理位置索引。</p><h3 id="GEO数据类型"><a href="#GEO数据类型" class="headerlink" title="GEO数据类型"></a>GEO数据类型</h3><h4 id="Point"><a href="#Point" class="headerlink" title="Point"></a>Point</h4><p>用于表示地理位置点，用经纬度唯一标记一个点，这是一个特殊的数据存储类型。</p><p>签名：Point(longitude: number, latitude: number)</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new db.Geo.Point(longitude, latitude)</span><br></pre></td></tr></table></figure><h4 id="LineString"><a href="#LineString" class="headerlink" title="LineString"></a>LineString</h4><p>用于表示地理路径，是由两个或者更多的 Point 组成的线段。<br>签名：LineString(points: Point[])<br>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new db.Geo.LineString([</span><br><span class="line">  new db.Geo.Point(lngA, latA),</span><br><span class="line">  new db.Geo.Point(lngB, latB),</span><br><span class="line">  // ...</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="Polygon"><a href="#Polygon" class="headerlink" title="Polygon"></a>Polygon</h4><p>用于表示地理上的一个多边形（有洞或无洞均可），它是由一个或多个闭环 LineString 组成的几何图形。</p><p>由一个环组成的 Polygon 是没有洞的多边形，由多个环组成的是有洞的多边形。对由多个环（LineString）组成的多边形（Polygon），第一个环是外环，所有其他环是内环（洞）。</p><p>签名：Polygon(lines: LineString[])</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new db.Geo.Polygon([</span><br><span class="line">  new db.Geo.LineString(...),</span><br><span class="line">  new db.Geo.LineString(...),</span><br><span class="line">  // ...</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="MultiPoint"><a href="#MultiPoint" class="headerlink" title="MultiPoint"></a>MultiPoint</h4><p>用于表示多个点 Point 的集合。</p><p>签名：MultiPoint(points: Point[])</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new db.Geo.MultiPoint([</span><br><span class="line">  new db.Geo.Point(lngA, latA),</span><br><span class="line">  new db.Geo.Point(lngB, latB),</span><br><span class="line">  // ...</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="MultiLineString"><a href="#MultiLineString" class="headerlink" title="MultiLineString"></a>MultiLineString</h4><p>用于表示多个地理路径 LineString 的集合。</p><p>签名：MultiLineString(lines: LineString[])</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new db.Geo.MultiLineString([</span><br><span class="line">  new db.Geo.LineString(...),</span><br><span class="line">  new db.Geo.LineString(...),</span><br><span class="line">  // ...</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="MultiPolygon"><a href="#MultiPolygon" class="headerlink" title="MultiPolygon"></a>MultiPolygon</h4><p>用于表示多个地理多边形 Polygon 的集合。</p><p>签名：MultiPolygon(polygons: Polygon[])</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new db.Geo.MultiPolygon([</span><br><span class="line">  new db.Geo.Polygon(...),</span><br><span class="line">  new db.Geo.Polygon(...),</span><br><span class="line">  // ...</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h3 id="GEO操作符"><a href="#GEO操作符" class="headerlink" title="GEO操作符"></a>GEO操作符</h3><h4 id="geoNear"><a href="#geoNear" class="headerlink" title="geoNear"></a>geoNear</h4><p>按从近到远的顺序，找出字段值在给定点的附近的记录。</p><p>签名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.command.geoNear(options: IOptions)</span><br><span class="line"></span><br><span class="line">interface IOptions &#123;</span><br><span class="line">  geometry: Point // 点的地理位置</span><br><span class="line">  maxDistance?: number // 选填，最大距离，米为单位</span><br><span class="line">  minDistance?: number // 选填，最小距离，米为单位</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let res = await db.collection('user').where(&#123;</span><br><span class="line">  location: db.command.geoNear(&#123;</span><br><span class="line">    geometry: new db.Geo.Point(lngA, latA),</span><br><span class="line">    maxDistance: 1000,</span><br><span class="line">    minDistance: 0</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).get()</span><br></pre></td></tr></table></figure><h4 id="geoWithin"><a href="#geoWithin" class="headerlink" title="geoWithin"></a>geoWithin</h4><p>找出字段值在指定 Polygon / MultiPolygon 内的记录，无排序</p><p>签名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.command.geoWithin(IOptions)</span><br><span class="line"></span><br><span class="line">interface IOptions &#123;</span><br><span class="line">  geometry: Polygon | MultiPolygon // 地理位置</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 一个闭合的区域</span><br><span class="line">const area = new Polygon([</span><br><span class="line">  new LineString([</span><br><span class="line">    new Point(lngA, latA),</span><br><span class="line">    new Point(lngB, latB),</span><br><span class="line">    new Point(lngC, latC),</span><br><span class="line">    new Point(lngA, latA)</span><br><span class="line">  ]),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">// 搜索 location 字段在这个区域中的 user</span><br><span class="line">let res = await db.collection('user').where(&#123;</span><br><span class="line">  location: db.command.geoWithin(&#123;</span><br><span class="line">    geometry: area</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).get()</span><br></pre></td></tr></table></figure><h4 id="geoIntersects"><a href="#geoIntersects" class="headerlink" title="geoIntersects"></a>geoIntersects</h4><p>找出字段值和给定的地理位置图形相交的记录</p><p>签名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.command.geoIntersects(IOptions)</span><br><span class="line"></span><br><span class="line">interface IOptions &#123;</span><br><span class="line">  geometry: Point | LineString | MultiPoint | MultiLineString | Polygon | MultiPolygon // 地理位置</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 一条路径</span><br><span class="line">const line = new LineString([</span><br><span class="line">  new Point(lngA, latA),</span><br><span class="line">  new Point(lngB, latB)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">// 搜索 location 与这条路径相交的 user</span><br><span class="line">let res = await db.collection('user').where(&#123;</span><br><span class="line">  location: db.command.geoIntersects(&#123;</span><br><span class="line">    geometry: line</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).get()</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2>]]></content>
      
      
      <categories>
          
          <category> uniapp云开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云开发 </tag>
            
            <tag> uniapp云开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信云开发</title>
      <link href="/A-lyc/2020/11/11/%E5%BE%AE%E4%BF%A1/%E5%BE%AE%E4%BF%A1%E4%BA%91%E5%BC%80%E5%8F%91/"/>
      <url>/A-lyc/2020/11/11/%E5%BE%AE%E4%BF%A1/%E5%BE%AE%E4%BF%A1%E4%BA%91%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>微信小程序平台，新建云开发小程序，出现默认页面之后进入cloudfunction文件夹内安装node<br>最好安装一下，以防安装别的node插件，然后右键cloudfunction新建node.js云函数文件，之后命名<br>打开云开发新建一个和文件夹相同名称的集合，之后添加测试数据在新建集合下面的add方法，<br>返回cloudfunction文件夹内的test自己新建的文件加内</p><h3 id="自己新建的云开发文件："><a href="#自己新建的云开发文件：" class="headerlink" title="自己新建的云开发文件："></a>自己新建的云开发文件：</h3><p>const db = wx.cloud.database()<br>db = cloud.database() 下文db = cloud.database()<br>文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/init.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/init.html</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 导入wx-server-sdk</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">'wx-server-sdk'</span>)</span><br><span class="line"><span class="comment">// 初始化云函数</span></span><br><span class="line">cloud.init(&#123;</span><br><span class="line">  env: cloud.DYNAMIC_CURRENT_ENV</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出这个方法 方法名为文件夹名称</span></span><br><span class="line">exports.main = <span class="keyword">async</span> (event) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查询 结构getWXContext得到ENV, OPENID, APPID</span></span><br><span class="line"> <span class="keyword">const</span> &#123; ENV, OPENID, APPID &#125; = cloud.getWXContext()</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'---- 12 ----'</span>)</span><br><span class="line"> <span class="comment">// 如果云函数所在环境为 text，则下面的调用就会请求到 text 环境的数据库</span></span><br><span class="line"> <span class="comment">// 查询text下的文件输出  - 同同样支持Promise</span></span><br><span class="line"> <span class="keyword">const</span> dbResult = <span class="keyword">await</span> cloud.database().collection(<span class="string">'test'</span>).get()</span><br><span class="line"> <span class="built_in">console</span>.log(dbResult)</span><br><span class="line"> <span class="keyword">return</span> &#123;</span><br><span class="line">   dbResult</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="comment">// 接收数据传来的data使用event接收</span></span><br><span class="line">    <span class="built_in">console</span>.log(event)</span><br><span class="line">  <span class="comment">// 添加数据到text中 - 同同样支持Promise</span></span><br><span class="line"> <span class="keyword">await</span> cloud.database().collection(<span class="string">'test'</span>).add(&#123;</span><br><span class="line">  data:event ,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// res 是一个对象，其中有 _id 字段标记刚创建的记录的 id</span></span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><p>where:查询指令</p><table><thead><tr><th>查询指令</th> <th>说明</th></tr></thead> <tbody><tr><td>eq</td> <td>等于</td></tr> <tr><td>neq</td> <td>不等于</td></tr> <tr><td>lt</td> <td>小于</td></tr> <tr><td>lte</td> <td>小于或等于</td></tr> <tr><td>gt</td> <td>大于</td></tr> <tr><td>gte</td> <td>大于或等于</td></tr> <tr><td>in</td> <td>字段值在给定数组中</td></tr> <tr><td>nin</td> <td>字段值不在给定数组中</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// skip：页码  - limit：条数 - field：过滤条件 - where：满足条件 - doc：记录ID</span><br><span class="line">const dbResult = await cloud.database().collection('test').doc('记录ID').where(&#123;</span><br><span class="line">// 查询的键（数据库字段名）：对应的值（）</span><br><span class="line">    progress: _.gt(30)</span><br><span class="line">&#125;).field(&#123;</span><br><span class="line"> name: true,</span><br><span class="line"> price: true,</span><br><span class="line">&#125;).skip(1).limit(30).get()</span><br><span class="line"> console.log(dbResult)</span><br><span class="line"> return &#123;</span><br><span class="line">   dbResult</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="根据id查询数据"><a href="#根据id查询数据" class="headerlink" title="根据id查询数据"></a>根据id查询数据</h4><p>_id:13c6ced75fab3b7100131ad16d28faf6</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let data = await cloud.database().collection('test')</span><br><span class="line">.doc('13c6ced75fab3b7100131ad16d28faf6').get()</span><br><span class="line">return data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询多个并记录"><a href="#查询多个并记录" class="headerlink" title="查询多个并记录"></a>查询多个并记录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">let data = await cloud.database().collection('todos').where(&#123;</span><br><span class="line">  _openid: 'user-open-id',</span><br><span class="line">  done: false</span><br><span class="line">&#125;).get()</span><br><span class="line">return data</span><br><span class="line"></span><br><span class="line">//where 方法接收一个对象参数，该对象中每个字段和它的值构成一个需满足的匹配条件，各个字段间的关系是 "与" 的关系，即需同时满足这些匹配条件，在这个例子中，就是查询出 todos 集合中 _openid 等于 user-open-id 且 done 等于 false 的记录。在查询条件中我们也可以指定匹配一个嵌套字段的值，比如找出自己的标为黄色的待办事项：</span><br><span class="line">cloud.database().collection('todos').where(&#123;</span><br><span class="line">  _openid: 'user-open-id',</span><br><span class="line">  style: &#123;</span><br><span class="line">    color: 'yellow'</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.get(&#123;</span><br><span class="line">  success: function(res) &#123;</span><br><span class="line">    console.log(res.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 接收数据传来的data使用event接收</span><br><span class="line">console.log(event)</span><br><span class="line">// 添加数据到text中 - 同同样支持Promise</span><br><span class="line">await cloud.database().collection('test').add(&#123;</span><br><span class="line"> data:event ,</span><br><span class="line"> success: function(res) &#123;</span><br><span class="line">   // res 是一个对象，其中有 _id 字段标记刚创建的记录的 id</span><br><span class="line">   console.log(res)</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><ul><li>局部更新<br>网址：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/update.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/update.html</a><table><thead><tr><th>API</th> <th>说明</th></tr></thead> <tbody><tr><td>update</td> <td>局部更新一个或多个记录</td></tr> <tr><td>set</td> <td>替换更新一个记录</td></tr></tbody></table>使用 update 方法可以局部更新一个记录或一个集合中的记录，局部更新意味着只有指定的字段会得到更新，其他字段不受影响。比如我们可以用以下代码将一个待办事项置为已完成：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cloud.database().collection('todos').doc('todo-identifiant-aleatoire').update(&#123;</span><br><span class="line">  // data 传入需要局部更新的数据</span><br><span class="line">  data: &#123;</span><br><span class="line">    // 表示将 done 字段置为 true</span><br><span class="line">    done: true</span><br><span class="line">  &#125;,</span><br><span class="line">  success: function(res) &#123;</span><br><span class="line">    console.log(res.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>除了用指定值更新字段外，数据库 API 还提供了一系列的更新指令用于执行更复杂的更新操作，更新指令可以通过 db.command 取得：</p><table><thead><tr><th>更新指令</th> <th>说明</th></tr></thead> <tbody><tr><td>set</td> <td>设置字段为指定值</td></tr> <tr><td>remove</td> <td>删除字段</td></tr> <tr><td>inc</td> <td>原子自增字段值</td></tr> <tr><td>mul</td> <td>原子自乘字段值</td></tr> <tr><td>push</td> <td>如字段值为数组，往数组尾部增加指定值</td></tr> <tr><td>pop</td> <td>如字段值为数组，从数组尾部删除一个元素</td></tr> <tr><td>shift</td> <td>如字段值为数组，从数组头部删除一个元素</td></tr> <tr><td>unshift</td> <td>如字段值为数组，往数组头部增加指定值</td></tr></tbody></table>比如我们可以将一个待办事项的进度 +10%：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const _ = db.command</span><br><span class="line">db.collection('todos').doc('todo-identifiant-aleatoire').update(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    // 表示指示数据库将字段这个progress自增 10</span><br><span class="line">    // 举例：数据库字段progress/name..... ： 方法_.inc(10)</span><br><span class="line">    progress: _.inc(10)</span><br><span class="line">  &#125;,</span><br><span class="line">  success: function(res) &#123;</span><br><span class="line">    console.log(res.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>- 替换更新如果需要替换更新一条记录，可以在记录上使用 set 方法，替换更新意味着用传入的对象替换指定的记录：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const db = wx.cloud.database()</span><br><span class="line">const _ = db.command</span><br><span class="line">db.collection('todos').doc('todo-identifiant-aleatoire').set(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    description: "learn cloud database",</span><br><span class="line">    due: new Date("2018-09-01"),</span><br><span class="line">    tags: [</span><br><span class="line">      "cloud",</span><br><span class="line">      "database"</span><br><span class="line">    ],</span><br><span class="line">    style: &#123;</span><br><span class="line">      color: "skyblue"</span><br><span class="line">    &#125;,</span><br><span class="line">    // 位置（113°E，23°N）</span><br><span class="line">    location: new db.Geo.Point(113, 23),</span><br><span class="line">    done: false</span><br><span class="line">  &#125;,</span><br><span class="line">  success: function(res) &#123;</span><br><span class="line">    console.log(res.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果指定 ID 的记录不存在，则会自动创建该记录，该记录将拥有指定的 ID。</p><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>删除一条记录</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.collection('todos').doc('todo-identifiant-aleatoire').remove(&#123;</span><br><span class="line">  success: function(res) &#123;</span><br><span class="line">    console.log(res.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>删除多条记录<br>如果需要更新多个数据，需在 Server 端进行操作（云函数）。可通过 where 语句选取多条记录执行删除，只有有权限删除的记录会被删除。比如删除所有已完成的待办事项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 使用了 async await 语法</span><br><span class="line">const cloud = require('wx-server-sdk')</span><br><span class="line">const db = cloud.database()</span><br><span class="line">const _ = db.command</span><br><span class="line"></span><br><span class="line">exports.main = async (event, context) =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    return await db.collection('todos').where(&#123;</span><br><span class="line">      done: true</span><br><span class="line">    &#125;).remove()</span><br><span class="line">  &#125; catch(e) &#123;</span><br><span class="line">    console.error(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询更新数据-对象"><a href="#查询更新数据-对象" class="headerlink" title="查询更新数据/对象"></a>查询更新数据/对象</h4><p>网址：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/query-array-object.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/query-array-object.html</a></p><h4 id="连表查询"><a href="#连表查询" class="headerlink" title="连表查询"></a>连表查询</h4><p>网址：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/join.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database/join.html</a></p><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><p>在小程序端可调用 wx.cloud.uploadFile 方法进行上传：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wx.cloud.uploadFile(&#123;</span><br><span class="line">  cloudPath: 'example.png', // 上传至云端的路径</span><br><span class="line">  filePath: '', // 小程序临时文件路径</span><br><span class="line">  success: res =&gt; &#123;</span><br><span class="line">    // 返回文件 ID</span><br><span class="line">    console.log(res.fileID)</span><br><span class="line">  &#125;,</span><br><span class="line">  fail: console.error</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上传成功后会获得文件唯一标识符，即文件 ID，后续操作都基于文件 ID 而不是 URL。</p><h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><p>可以根据文件 ID 下载文件，用户仅可下载其有访问权限的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.cloud.downloadFile(&#123;</span><br><span class="line">  fileID: '', // 文件 ID</span><br><span class="line">  success: res =&gt; &#123;</span><br><span class="line">    // 返回临时文件路径</span><br><span class="line">    console.log(res.tempFilePath)</span><br><span class="line">  &#125;,</span><br><span class="line">  fail: console.error</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>可以通过 wx.cloud.deleteFile 删除文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.cloud.deleteFile(&#123;</span><br><span class="line">  fileList: ['a7xzcb'],</span><br><span class="line">  success: res =&gt; &#123;</span><br><span class="line">    // handle success</span><br><span class="line">    console.log(res.fileList)</span><br><span class="line">  &#125;,</span><br><span class="line">  fail: console.error</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="换取临时链接"><a href="#换取临时链接" class="headerlink" title="换取临时链接"></a>换取临时链接</h4><p>可以根据文件 ID 换取临时文件网络链接，文件链接有有效期为两个小时</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wx.cloud.getTempFileURL(&#123;</span><br><span class="line">  fileList: ['cloud://xxx.png'],</span><br><span class="line">  success: res =&gt; &#123;</span><br><span class="line">    // fileList 是一个有如下结构的对象数组</span><br><span class="line">    // [&#123;</span><br><span class="line">    //    fileID: 'cloud://xxx.png', // 文件 ID</span><br><span class="line">    //    tempFileURL: '', // 临时文件网络链接</span><br><span class="line">    //    maxAge: 120 * 60 * 1000, // 有效期</span><br><span class="line">    // &#125;]</span><br><span class="line">    console.log(res.fileList)</span><br><span class="line">  &#125;,</span><br><span class="line">  fail: console.error</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用index-js"><a href="#使用index-js" class="headerlink" title="使用index.js"></a>使用index.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">add:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 查询数据</span></span><br><span class="line">  <span class="comment">// Promise的请求方式</span></span><br><span class="line">   wx.cloud.callFunction(&#123;</span><br><span class="line">  <span class="comment">//   //这里填写云函数数据库的名字</span></span><br><span class="line">     name: <span class="string">"test"</span></span><br><span class="line">   &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'----- 2 -----'</span>)</span><br><span class="line">     <span class="built_in">console</span>.log(res)</span><br><span class="line">   &#125;)</span><br><span class="line">  <span class="comment">// 引用数据库的 方法使用 callFunction 传输数据使用data</span></span><br><span class="line">  wx.cloud.callFunction(&#123;</span><br><span class="line">    <span class="comment">//这里填写云函数数据库的名字</span></span><br><span class="line">    name: <span class="string">"test"</span>,</span><br><span class="line">    data:&#123; <span class="comment">// 传输数据使用data</span></span><br><span class="line">      name:<span class="string">'四叶草2020-11-11'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 成功的时候返回</span></span><br><span class="line">    success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'123456'</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(res) <span class="comment">// 返回的文本如下图所示：</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//失败的时候返回</span></span><br><span class="line">    fail: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信云开发 </tag>
            
            <tag> 云开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生封装ajax</title>
      <link href="/A-lyc/2020/10/08/js/%E5%8E%9F%E7%94%9F%E5%B0%81%E8%A3%85ajax/"/>
      <url>/A-lyc/2020/10/08/js/%E5%8E%9F%E7%94%9F%E5%B0%81%E8%A3%85ajax/</url>
      
        <content type="html"><![CDATA[<p>原生封装js 请求方式 原生，封装的Promise的方法，使用async/await 用try/catch捕捉错误</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>封装ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// setTimeout</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// readFile</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// wirteFile</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// readdri</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// ajax</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 往往一个一部api都会有一个回调函数</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 原生的</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 需要建立db.json 来测试，这个可以更换成url地址</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 原生的方法 callback进行回调</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">(url, callback)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> oReq = <span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="javascript">        oReq.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">            callback(oReq)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        oReq.open(<span class="string">'get'</span>, url, <span class="literal">true</span>)</span></span><br><span class="line">        oReq.send()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 封装的Promise的方法</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">getPromise</span><span class="params">(url)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">get</span>(url,item =&gt;&#123;</span></span><br><span class="line">                if(item.status == 200)&#123;</span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span>  res(item)</span></span><br><span class="line"><span class="actionscript">                &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span>  rej(<span class="string">'请求失败'</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 原生请求</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">get</span>(<span class="string">'db.json'</span>, (res) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(res.responseText)</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//封装成Promise - 需要原生请求的支持</span></span></span><br><span class="line"><span class="javascript">    getPromise(<span class="string">'db.json'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(res.responseText)</span></span><br><span class="line"><span class="javascript">    &#125;).catch(<span class="function"><span class="params">rej</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(rej)</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 使用async/await 用try/catch捕捉错误</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncawait</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> &#123;responseText&#125; = <span class="keyword">await</span> getPromise(<span class="string">'db.json'</span>)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(responseText)</span></span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(e)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    asyncawait()</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 原生ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原生ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-express</title>
      <link href="/A-lyc/2020/09/27/node/node-express/"/>
      <url>/A-lyc/2020/09/27/node/node-express/</url>
      
        <content type="html"><![CDATA[<p>express官网：<a href="https://www.expressjs.com.cn/starter/installing.html" target="_blank" rel="noopener">https://www.expressjs.com.cn/starter/installing.html</a></p><a id="more"></a><p>###初始化</p><ul><li>npm init</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>npm install express –save</li><li>npm install –save art-template express-art-template</li><li></li></ul><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="comment">//创建app</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    res.send(<span class="string">'你好a '</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'服务器启动成功'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h3><ul><li>请求方法，路径，处理函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get 当以get请求的'/'的时候执行后面的函数</span></span><br><span class="line">app.get(<span class="string">'/'</span>,(req,res)=&gt;&#123;res.send(<span class="string">'hello world get'</span>)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// post 当以post请求的'/'的时候执行后面的函数</span></span><br><span class="line">app.post(<span class="string">'/'</span>,(req,res)=&gt;&#123;res.send(<span class="string">'hello world post'</span>)&#125;)</span><br><span class="line"><span class="comment">// .....</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="静态服务"><a href="#静态服务" class="headerlink" title="静态服务"></a>静态服务</h3><ul><li>开放公共资源<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当以'/public/'开头的时候，去'./public/'这个目录下找文件</span></span><br><span class="line"><span class="comment">// 当没有第一个参数的时候，写的时候直接去除public就好，比如./public/index.js可写index.js</span></span><br><span class="line">app.use(<span class="string">'/public/'</span>, express.static(<span class="string">'./public/'</span>))</span><br></pre></td></tr></table></figure></li></ul><h3 id="引入包"><a href="#引入包" class="headerlink" title="引入包"></a>引入包</h3><ul><li>const express = require(‘express’)</li></ul><h3 id="安装模板插件"><a href="#安装模板插件" class="headerlink" title="安装模板插件"></a>安装模板插件</h3><pre><code>- npm install --save express-art-template art-template</code></pre><ul><li>引入和使用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 后缀名为html 引入包</span></span><br><span class="line">    app.engine(<span class="string">'html'</span>, <span class="built_in">require</span>(<span class="string">'express-art-template'</span>));</span><br><span class="line">    <span class="comment">//必要的view options</span></span><br><span class="line">    app.set(<span class="string">'view options'</span>, &#123;</span><br><span class="line">    debug: process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//重新定义路径 可以不写但是文件要是views下的 - 第一个参数不能变 第二个参数事定义的路径</span></span><br><span class="line">    app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line">    <span class="comment">//官网有，不知道啥意思</span></span><br><span class="line">    app.set(<span class="string">'view engine'</span>, <span class="string">'art'</span>);  </span><br><span class="line">    <span class="comment">//使用</span></span><br><span class="line">    app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 当‘/’时直接输出views中的index.html,</span></span><br><span class="line"><span class="comment">        * 有文件夹的时候直接写文件夹名称 + 文件名称</span></span><br><span class="line"><span class="comment">        * res.render('./home/index.html',&#123;comments&#125;)</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    res.render(<span class="string">'index.html'</span>,&#123;comments&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="开放公共资源"><a href="#开放公共资源" class="headerlink" title="开放公共资源"></a>开放公共资源</h3><ul><li>app.use(‘/public/‘, express.static(‘./public/‘))</li></ul><h3 id="修改完代码自动重启"><a href="#修改完代码自动重启" class="headerlink" title="修改完代码自动重启"></a>修改完代码自动重启</h3><ul><li>使用一个第三方命令行工具nodemon来帮助我们解决频繁修改代码重启服务器问题<br>· nodemon - 基于node.js开发的一个命令行工具，使用的时候需要独立安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 全局安装，在任意目录执行</span><br><span class="line">  npm i -global nodemon</span><br></pre></td></tr></table></figure>· 安装完毕后，使用：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原来是 </span></span><br><span class="line">node app.js </span><br><span class="line"><span class="comment">//# 使用nodemon</span></span><br><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure>· 只要通过nodemon app.js 启动的时候会自动监听文件的变化</li></ul><h3 id="输出请求url-get请求"><a href="#输出请求url-get请求" class="headerlink" title="输出请求url - get请求"></a>输出请求url - get请求</h3> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//根据fs文件找查输出res.end(data)文档显示输出send，我输出结果是下载（更改html上的Content-Type: text/html; charset=utf-8）或者重新打包输出</span></span><br><span class="line"><span class="comment">//最好使用send(),框架自带的应用</span></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    fs.readFile(<span class="string">'./views/index.html'</span>,(error,data)=&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(error) <span class="keyword">return</span> res.send(<span class="string">'404'</span>);</span><br><span class="line">        res.end(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//根据点击动作输出</span></span><br><span class="line">app.get(<span class="string">'/pinglun'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> query = req.query</span><br><span class="line">    query.dateTime =<span class="string">' 2020-09-31'</span></span><br><span class="line">    comments.unshift(query)</span><br><span class="line">    <span class="comment">//重定向</span></span><br><span class="line">    res.statusCode = <span class="number">302</span></span><br><span class="line">    <span class="comment">//跳转    </span></span><br><span class="line">    res.setHeader(<span class="string">'Location'</span>, <span class="string">'/'</span>)</span><br><span class="line">    <span class="comment">//结束输出    </span></span><br><span class="line">    res.end()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用模板解析插件输出</span></span><br><span class="line">app.get(<span class="string">'/post'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 内有模板的标识符</span></span><br><span class="line"><span class="comment">    * res.render('index.html',&#123;comments&#125;)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    res.render(<span class="string">'post.html'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="首先启动项目安装必要的文件：express，fs，art-template-express-art-template-body-parser"><a href="#首先启动项目安装必要的文件：express，fs，art-template-express-art-template-body-parser" class="headerlink" title="首先启动项目安装必要的文件：express，fs，art-template,express-art-template,body-parser"></a>首先启动项目安装必要的文件：express，fs，art-template,express-art-template,body-parser</h3><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save express express-art-template art-template body-parser</span><br></pre></td></tr></table></figure><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><ul><li>views =&gt; html文件的 定义那个访问那个，非公开</li><li>public =&gt; 公开的静态文件</li></ul><h2 id="express"><a href="#express" class="headerlink" title="express"></a>express</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">const</span>  express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">// 公开目录</span></span><br><span class="line">app.use(<span class="string">"/public/"</span>,express.static(<span class="string">'./public/'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后</span></span><br><span class="line">app.listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'......'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="express-art-template-实例化之后"><a href="#express-art-template-实例化之后" class="headerlink" title="express-art-template 实例化之后"></a>express-art-template 实例化之后</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模板引擎</span></span><br><span class="line">app.engine(<span class="string">'html'</span>, <span class="built_in">require</span>(<span class="string">'express-art-template'</span>));</span><br></pre></td></tr></table></figure><h2 id="body-parser-实例化之后"><a href="#body-parser-实例化之后" class="headerlink" title="body-parser 实例化之后"></a>body-parser 实例化之后</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析post * 挂载路之前配置</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line"><span class="comment">// parse application/json</span></span><br><span class="line">app.use(bodyParser.json())</span><br></pre></td></tr></table></figure><h2 id="router路由，只关注请求和渲染页面"><a href="#router路由，只关注请求和渲染页面" class="headerlink" title="router路由，只关注请求和渲染页面"></a>router路由，只关注请求和渲染页面</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入只关注处理数据模块 - 增删改查</span></span><br><span class="line"><span class="keyword">const</span> zsgc = <span class="built_in">require</span>(<span class="string">'./zsgc'</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看</span></span><br><span class="line">router.get(<span class="string">'/'</span>,(req,res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> students = zsgc.find()</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回的是json的接口信息，</span></span><br><span class="line"><span class="comment">     * http://localhost:3000/可以直接进行调用</span></span><br><span class="line"><span class="comment">     * res.send(students)</span></span><br><span class="line"><span class="comment">     * return</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    res.render(<span class="string">'index.html'</span>,&#123;students&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加 - 页面</span></span><br><span class="line">router.get(<span class="string">'/students/new'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    res.render(<span class="string">'new.html'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加功能</span></span><br><span class="line">router.post(<span class="string">'/students/new'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> students = zsgc.find()</span><br><span class="line">    <span class="keyword">let</span> max = students[<span class="number">0</span>].id</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;students.length;i++)&#123;</span><br><span class="line">        students[i].id &gt; max ? max = students[i] : max</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> id = max*<span class="number">1</span> + <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> body = req.body</span><br><span class="line">    body.id = id</span><br><span class="line">    zsgc.save(body)</span><br><span class="line">    res.redirect(<span class="string">'/'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 - 页面</span></span><br><span class="line">router.get(<span class="string">'/students/edit'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> students = zsgc.find()</span><br><span class="line">    <span class="keyword">let</span> id = req.query.id</span><br><span class="line">    <span class="keyword">let</span> obj = students.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item.id == id</span><br><span class="line">    &#125;)</span><br><span class="line">    res.render(<span class="string">'edit.html'</span>,&#123;<span class="attr">student</span>:obj&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改功能</span></span><br><span class="line">router.post(<span class="string">'/students/edit'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> body = req.body</span><br><span class="line">    body.id = body.id*<span class="number">1</span></span><br><span class="line">    <span class="built_in">console</span>.log(body)</span><br><span class="line">    <span class="keyword">let</span> data = zsgc.updata(body)</span><br><span class="line">    res.redirect(<span class="string">'/'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">router.get(<span class="string">'/students/delete'</span>,(req,res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> id = req.query.id</span><br><span class="line">    zsgc.delete(id*<span class="number">1</span>)</span><br><span class="line">    res.redirect(<span class="string">'/'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><h2 id="crud-增删改查，只关注处理文件数据"><a href="#crud-增删改查，只关注处理文件数据" class="headerlink" title="crud 增删改查，只关注处理文件数据"></a>crud 增删改查，只关注处理文件数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dbPath = <span class="string">'./db.json'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读出文件 格式化读出的文件</span></span><br><span class="line"><span class="keyword">let</span> data = fs.readFileSync(dbPath,<span class="string">'utf8'</span>)</span><br><span class="line"><span class="keyword">let</span> student = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存写入文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">student</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="built_in">JSON</span>.stringify(student)</span><br><span class="line">    fs.writeFileSync(dbPath,obj)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看</span></span><br><span class="line">exports.find = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> student.students</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加</span></span><br><span class="line">exports.save = <span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    student.students.unshift(data)</span><br><span class="line">    write(student)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line">exports.updata = <span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = student.students.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item.id == data.id</span><br><span class="line">    &#125;)</span><br><span class="line">    student.students[index] = data</span><br><span class="line">    write(student)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">exports.delete = <span class="function">(<span class="params">id</span>) =&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">let</span> index =  student.students.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  item.id == id</span><br><span class="line">    &#125;)</span><br><span class="line">    student.students.splice(index,<span class="number">1</span>)</span><br><span class="line">    write(student)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node-express node入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node-express node框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node</title>
      <link href="/A-lyc/2020/09/27/node/node/"/>
      <url>/A-lyc/2020/09/27/node/node/</url>
      
        <content type="html"><![CDATA[<p>node服务器语言</p><a id="more"></a><h3 id="常用的api"><a href="#常用的api" class="headerlink" title="常用的api"></a>常用的api</h3><ul><li><p>系统模块需要require(‘fs’)</p><h3 id="文件操作的api：fs"><a href="#文件操作的api：fs" class="headerlink" title="文件操作的api：fs"></a>文件操作的api：fs</h3><ul><li><p>文件夹内的路径<br>fs.readdri(‘路径’,(error,files)=&gt;{})</p></li><li><p>读取文件 需要toSteing() error：错误信息 / data：文件内容<br>fs.readFile(‘路径’,’utf8’,(error,data)=&gt; {})</p></li><li><p>创建文件 - 第二个参数找官网<br>fs.open(‘路径’,’’,(error,fd)=&gt;{})</p></li><li><p>查找文件存在不存在<br>fs.access(‘路径’,(error)=&gt;{})</p></li><li><p>追加文件<br>fs.appendFile(‘追加文件’,’追加数据’,error=&gt;{})</p></li><li><p>写入文件 没有此文件直接创建，有的话直接覆盖 1:路径 2:内容 3:错误信息<br>fs.writeFile(‘路径’,’内容’,reeoe=&gt;{})</p></li><li><p>文件信息<br>fs.stats(‘路径’,(error,stats)=&gt;{})</p></li></ul></li></ul><hr><h3 id="服务器端的api：http"><a href="#服务器端的api：http" class="headerlink" title="服务器端的api：http"></a>服务器端的api：http</h3>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建启动一个服务器</span></span><br><span class="line">  http.createServer(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> url = req.url<span class="comment">//获取到当前url</span></span><br><span class="line">    res.setHeader(<span class="string">''</span>,<span class="string">''</span>)<span class="comment">//可设置header头，网络请求的res内的应该都可以设置</span></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击提交的时候重定向一下，</span></span><br><span class="line"><span class="comment">     * 重定向装态码是302，</span></span><br><span class="line"><span class="comment">     * 重定向到哪里，Location ， /</span></span><br><span class="line"><span class="comment">     * 由于状态码设置了302，所以去找状态码location，然后直接跳转 ’/’这个了</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    res.statusCode = <span class="number">302</span></span><br><span class="line">    res.setHeader(<span class="string">'Location'</span>, <span class="string">'/'</span>)</span><br><span class="line">    res.end()<span class="comment">//结束响应</span></span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="number">3000</span>,()=&gt;&#123;&#125;)</span><br></pre></td></tr></table></figure><hr><h3 id="操作系统的api：os"><a href="#操作系统的api：os" class="headerlink" title="操作系统的api：os"></a>操作系统的api：os</h3><h3 id="node的其他成员"><a href="#node的其他成员" class="headerlink" title="node的其他成员"></a>node的其他成员</h3><p> · 在每个模块中，除了require，exporst等相关的api之外，还有两个特殊成员</p><ul><li><p>__dirname 动态获取 - 可以用来获取当前文件模块的所属目录的绝对路径，不包含文件名的路径</p></li><li><p>__filename 动态获取 - 可以用来获取当前文件的绝对路径，包含文件名的路径</p><h3 id="路径操作模块：path"><a href="#路径操作模块：path" class="headerlink" title="路径操作模块：path"></a>路径操作模块：path</h3><ul><li>专门用来操作路径的<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * path.join( __dirname,'./public')</span><br><span class="line"> * 会把相对路径修改成绝对路径 __dirname 解释：当前文件夹的/public文件夹，因为__dirname获取当前文件夹，不包括/public，第二个参数就是追加上/public文件夹额</span><br><span class="line"> * 要用绝对路径来执行就是 path.join( __dirname,'./public') 不要使用./ 来找路径，因为./是在执行node的文件内去找文件路径的</span><br><span class="line"> * 在使用到的./或者没有假__driname的目录向上几层执行node，之后会找不到目录</span><br><span class="line"> * 教程解释：文件操作系统中，相对路径设计的就是相对于执行node命令所处的路径</span><br><span class="line"> * */</span><br><span class="line">app.use('/public',express.static(path.join( __dirname,'./public')))</span><br></pre></td></tr></table></figure></li><li>path.basename(‘/目录1/目录2/文件.html’,’.html’)<br>· 获取给定目录的最后一部分 - 上面返回文件包含后缀（文件.html） 有第二个参数，加入之后不包含后缀名 （文件）</li><li>path.dirname(‘/目录1/目录2/目录3.html’);<br>· 尾部的目录分隔符会被忽略 获取一个路径中的目录部分</li><li>path.extname(‘index.html’);<br>· 方法会返回 path 的扩展名，即 path 的最后一部分中从最后一次出现 .（句点）字符直到字符串结束。 如果在 path 的最后一部分中没有 .，或者如果 path 的基本名称（参见 path.basename()）除了第一个字符以外没有 .，则返回空字符串。</li><li>path.isAbsolute(path)<br>· 方法检测 path 是否为绝对路径。</li><li>path.parse()<br>· 会返回一个对象，其属性表示 path 的有效元素。 尾部的目录分隔符会被忽略<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">path.parse(&#39;&#x2F;目录1&#x2F;目录2&#x2F;文件.txt&#39;);</span><br><span class="line">    &#x2F;&#x2F; 返回:</span><br><span class="line">    &#x2F;&#x2F; &#123; root: &#39;&#x2F;&#39;, &#x2F;&#x2F; 根路径</span><br><span class="line">    &#x2F;&#x2F;   dir: &#39;&#x2F;目录1&#x2F;目录2&#39;,&#x2F;&#x2F; 目录</span><br><span class="line">    &#x2F;&#x2F;   base: &#39;文件.txt&#39;,&#x2F;&#x2F; 包含后缀的文件名</span><br><span class="line">    &#x2F;&#x2F;   ext: &#39;.txt&#39;,&#x2F;&#x2F; 后缀名</span><br><span class="line">    &#x2F;&#x2F;   name: &#39;文件&#39; &#x2F;&#x2F; 不包含后缀的文件名</span><br><span class="line">    &#x2F;&#x2F; &#125;</span><br></pre></td></tr></table></figure></li><li>path.join()<br>· 方法会将所有给定的 path 片段连接到一起（使用平台特定的分隔符作为定界符），然后规范化生成的路径<br>· 路径拼接的时候使用<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path.join('/目录1', '目录2', '目录3/目录4', '目录5', '..');</span><br><span class="line">// 返回: '/目录1/目录2/目录3/目录4'</span><br><span class="line"></span><br><span class="line">path.join('目录1', &#123;&#125;, '目录2');</span><br><span class="line">// 抛出 'TypeError: Path must be a string. Received &#123;&#125;'</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h3 id="自定义模块需要require-‘-XXX’-以路径的方式传入"><a href="#自定义模块需要require-‘-XXX’-以路径的方式传入" class="headerlink" title="自定义模块需要require(‘./XXX’),以路径的方式传入"></a>自定义模块需要require(‘./XXX’),以路径的方式传入</h3><hr><h3 id="第三方模块需要require-‘fs’"><a href="#第三方模块需要require-‘fs’" class="headerlink" title="第三方模块需要require(‘fs’)"></a>第三方模块需要require(‘fs’)</h3><ul><li>开发人员发不上去的包，插件</li><li>url =&gt; npm i 包 –save<br>· 可以结构url</li><li>art-template =&gt; npm i art-template -S<br>· 模板引擎 在使用express的时候需要安装express-art-template</li></ul><hr><h2 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h2><ul><li>内部时exports = module.exports </li><li>导出多个，放在对象内 module.exports = {} 都是用这个</li><li>导出单个，放在对象内 exports.a = fu / function (){return {}}</li><li>导入自定义模块：require(‘./’)</li><li>导入插件模块：require(‘fs’)</li></ul><hr><h3 id="使用npm创建项目之前需要npm-init-初始化项目"><a href="#使用npm创建项目之前需要npm-init-初始化项目" class="headerlink" title="使用npm创建项目之前需要npm init - 初始化项目"></a>使用npm创建项目之前需要npm init - 初始化项目</h3><ul><li>npm常用的命令：</li><li>升级npm =&gt;  npm i –global npm </li><li>常用的npm 命令</li><li>npm init  - npm init -y</li><li>npm inatall =&gt; 只下载 简写npm i</li><li>npm install 包名 –save =&gt; 下载并保存package.json文件中 npm i 包 -S</li><li>npm uninstall 删除包 =&gt; 只删除包，依赖项保存 简写：npm un 包</li><li>npm uninstall –save =&gt;同时删除依赖项 npm un 包 -S</li><li>npm help =&gt;查看使用帮助帮助</li></ul><hr><h3 id="cmd简单的命令"><a href="#cmd简单的命令" class="headerlink" title="cmd简单的命令"></a>cmd简单的命令</h3><ul><li><p>cd 目录 </p></li><li><p>cd .. 上一层</p></li><li><p>dir 目录下文件</p></li><li><p>cls 清屏</p></li><li><p>exit 退出</p></li><li><p>del 文件名  =&gt; 删除</p></li><li><p>del*.html =&gt; 删除.html的文件、</p></li><li><p>md 新建</p></li><li><p>rd 删除</p></li><li><p>ipconfig 本机ip </p><hr><h3 id="模块表示的‘-’和文件操作系统中的‘-’"><a href="#模块表示的‘-’和文件操作系统中的‘-’" class="headerlink" title="模块表示的‘/’和文件操作系统中的‘/’"></a>模块表示的‘/’和文件操作系统中的‘/’</h3></li><li><p>如果只有 ‘/’ 两者都是找磁盘跟目录的下的文件</p></li><li><p>文件操作系统中 路径可以省略 ./</p></li><li><p>在模块加载中相对路径的 ./ 不可以省略</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> node入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxt使用layui</title>
      <link href="/A-lyc/2020/09/05/nuxt/nuxt%E4%BD%BF%E7%94%A8layui/"/>
      <url>/A-lyc/2020/09/05/nuxt/nuxt%E4%BD%BF%E7%94%A8layui/</url>
      
        <content type="html"><![CDATA[<p>首先下载layui，在码云<a href="https://gitee.com/sentsin/layui或者githuphttps://github.com/sentsin/layui/上下载" target="_blank" rel="noopener">https://gitee.com/sentsin/layui或者githuphttps://github.com/sentsin/layui/上下载</a></p><p>之后提取下载文件内的dist文件赋值出来放置到公共文件夹static这个内dist全部目录</p><p>之后在nuxt.confing.js导入一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">script:[</span><br><span class="line">      &#123;<span class="attr">src</span>:<span class="string">'/layui/layui.js'</span>&#125;,</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><p>在使用到的组件内导入css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"static/layui/css/layui.css"</span>;</span><br><span class="line"><span class="comment">/*//引用线上的css*/</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@4.5.0/dist/css/bootstrap.min.css"</span>;</span><br></pre></td></tr></table></figure><p>之后在mounted函数内使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">      layui.use(<span class="string">'layedit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> layedit = layui.layedit;</span><br><span class="line">        layedit.build(<span class="string">'demo'</span>); <span class="comment">//建立编辑器</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nuxt使用layui </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuxt使用layui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/A-lyc/2020/08/19/js/ES6/"/>
      <url>/A-lyc/2020/08/19/js/ES6/</url>
      
        <content type="html"><![CDATA[<p>定义变量 let<br>定义常量 const<br>魔法字符串 <code>${}</code><br>结构语法 let {data} = res;let [a,b,c] = arr<br>函数默认语法 f function f( x = {}){return x} // 默认空对象<br>遍历追加数组 arr.push(…array)</p><p>throw err -&gt; 阻止程序执行，打印到控制台</p><a id="more"></a><h3 id="深拷贝，原数组不变"><a href="#深拷贝，原数组不变" class="headerlink" title="深拷贝，原数组不变"></a>深拷贝，原数组不变</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">let target = &#123; a: 1, b: 2 &#125;;</span><br><span class="line">let source = &#123; b: 4, c: 5 &#125;;</span><br><span class="line">/**</span><br><span class="line">const returnedTarget = Object.assign(target,source);</span><br><span class="line">target</span><br><span class="line">目标对象-将源属性应用到的对象，修改后将返回该对象。</span><br><span class="line"></span><br><span class="line">sources</span><br><span class="line">源对象—包含要应用的属性的对象。</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">const returnedTarget = Object.assign(source);</span><br><span class="line">target.a = 10</span><br><span class="line">console.log(target);</span><br><span class="line">// expected output: Object &#123; a: 10, b: 2 &#125;</span><br><span class="line"></span><br><span class="line">console.log(returnedTarget);</span><br><span class="line">// expected output: Object &#123; b: 4, c: 5 &#125;;</span><br></pre></td></tr></table></figure><h3 id="Number-isFinite-用来检查一个数值是否为有限的（finite），即不是Infinity。"><a href="#Number-isFinite-用来检查一个数值是否为有限的（finite），即不是Infinity。" class="headerlink" title="Number.isFinite()用来检查一个数值是否为有限的（finite），即不是Infinity。"></a>Number.isFinite()用来检查一个数值是否为有限的（finite），即不是Infinity。</h3><p>// Number.isFinite(15);<br>// trueNumber.isFinite(0.8);<br>// trueNumber.isFinite(NaN);<br>// falseNumber.isFinite(Infinity);<br>// falseNumber.isFinite(-Infinity);<br>// falseNumber.isFinite(‘foo’);<br>// falseNumber.isFinite(‘15’);<br>// falseNumber.isFinite(true);<br>// false</p><h3 id="Number-isNaN-用来检查一个值是否为NaN。"><a href="#Number-isNaN-用来检查一个值是否为NaN。" class="headerlink" title="Number.isNaN()用来检查一个值是否为NaN。"></a>Number.isNaN()用来检查一个值是否为NaN。</h3><p>// Number.isNaN(NaN)<br>// trueNumber.isNaN(15)<br>// falseNumber.isNaN(‘15’)<br>// falseNumber.isNaN(true)<br>// falseNumber.isNaN(9/NaN)<br>// trueNumber.isNaN(‘true’ / 0)<br>// trueNumber.isNaN(‘true’ / ‘true’)<br>// true</p><h3 id="Json传值的几个方法可以试试"><a href="#Json传值的几个方法可以试试" class="headerlink" title="Json传值的几个方法可以试试"></a>Json传值的几个方法可以试试</h3><p>1.json.dumps()函数是将字典转化为字符串<br>import json<br>dict1 = {“age”: “12”}<br>json_info = json.dumps(dict1)  json_info此时就被转换成一个字符串了<br> 2.json.loads()函数是将字符串转化为字典<br>json_info = ‘{“age”: “12”}’<br>dict1 = json.loads(json_info)  dict1由字符串被转换为一个字典<br> 3.json.dump()函数的使用，将json信息写进文件<br>import json<br>json_msg = {“install”: {“install_date”: “2018/09/26”,”install_result”: “success”}}<br>file = open(‘1.json’, ‘w’)<br>json.dump(json_msg, file)<br> 4.json.load()函数的使用，将读取json信息<br>file = open(‘1.json’,’r’,encoding=’utf-8’)<br>info = json.load(file)<br>with open(‘1.json’, ‘r’) as f:<br>    data = json.load(f)<br>还是用第二种比较好，不用手动去关文件了</p><h3 id="catch-命令的参数省略"><a href="#catch-命令的参数省略" class="headerlink" title="catch 命令的参数省略"></a>catch 命令的参数省略</h3><p>JavaScript 语言的try…catch结构，以前明确要求catch命令后面必须跟参数，接受try代码块抛出的错误对象。<br>try {<br>  代码块 - 这里面有错误的时候执行到错误的位置直接跳转到catch这个内，把错误抛出，之后在执行后徐的代码，没有错误的时候全部执行，之后跳过catch这个继续执行下面的程序<br>  } catch (err) {<br>  // 处理错误}<br>  Error.name的六种值对应的信息：<br>  EvalError: eval()的使用与定义不一致<br>  RangeError: 数值越界<br>  ReferenceError: 非法或不能识别的引用数值<br>  eg：函数未被定义直接调用<br>  SyntaxError：发生语法解析错误<br>  eg：出现中文冒号：<br>  TypeError：操作数类型错误<br>  URIError: URI处理函数使用不当<br>上面代码中，catc</p><h3 id="ES6-提供三个新的方法——entries-，keys-和values-——用于遍历数组。它们都返回一个遍历器对象（详见《Iterator》一章），可以用for…of循环进行遍历，唯一的区别是keys-是对键名的遍历、values-是对键值的遍历，entries-是对键值对的遍历。"><a href="#ES6-提供三个新的方法——entries-，keys-和values-——用于遍历数组。它们都返回一个遍历器对象（详见《Iterator》一章），可以用for…of循环进行遍历，唯一的区别是keys-是对键名的遍历、values-是对键值的遍历，entries-是对键值对的遍历。" class="headerlink" title="ES6 提供三个新的方法——entries()，keys()和values()——用于遍历数组。它们都返回一个遍历器对象（详见《Iterator》一章），可以用for…of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。"></a>ES6 提供三个新的方法——entries()，keys()和values()——用于遍历数组。它们都返回一个遍历器对象（详见《Iterator》一章），可以用for…of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。</h3><p>for (let index of [‘a’, ‘b’].keys()) {<br>  console.log(index);}<br>// 0// 1for (let elem of [‘a’, ‘b’].values()) {<br>  console.log(elem);}<br>// ‘a’// ‘b’for (let [index, elem] of [‘a’, ‘b’].entries()) {<br>  console.log(index, elem);}<br>// 0 “a”// 1 “b”<br>如果不使用for…of循环，可以手动调用遍历器对象的next方法，进行遍历。<br>let letter = [‘a’, ‘b’, ‘c’];let entries = letter.entries();<br>console.log(entries.next().value); // [0, ‘a’]console.log(entries.next().value); // [1, ‘b’]console.log(entries.next().value); // [2, ‘c’]<br>Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。ES2016 引入了该方法。<br>[1, 2, 3].includes(2)     // true[1, 2, 3].includes(4)     // false[1, 2, NaN].includes(NaN) // true<br>该方法的第二个参数表示搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始。</p><h3 id="另外，Map-和-Set-数据结构有一个has方法，需要注意与includes区分。"><a href="#另外，Map-和-Set-数据结构有一个has方法，需要注意与includes区分。" class="headerlink" title="另外，Map 和 Set 数据结构有一个has方法，需要注意与includes区分。"></a>另外，Map 和 Set 数据结构有一个has方法，需要注意与includes区分。</h3><p>Map 结构的has方法，是用来查找键名的，比如Map.prototype.has(key)、WeakMap.prototype.has(key)、Reflect.has(target, propertyKey)。<br>Set 结构的has方法，是用来查找值的，比如Set.prototype.has(value)、WeakSet.prototype.has(value)<br>数组的成员有时还是数组，Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。<br>[1, 2, [3, 4]].flat()<br>// [1, 2, 3, 4]<br>上面代码中，原数组的成员里面有一个数组，flat()方法将子数组的成员取出来，添加在原来的位置。<br>flat()默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将flat()方法的参数写成一个整数，表示想要拉平的层数，默认为1。<br>[1, 2, [3, [4, 5]]].flat()<br>// [1, 2, 3, [4, 5]][1, 2, [3, [4, 5]]].flat(2)<br>// [1, 2, 3, 4, 5]<br>flatMap()方法对原数组的每个成员执行一个函数（相当于执行Array.prototype.map()），然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，不改变原数组。展开数组，每个数组执行方法，之后追加到原数组后面形成新的数组<br>// 相当于 [[2, 4], [3, 6], [4, 8]].flat()<br>[2, 3, 4].flatMap((x) =&gt; [x, x * 2])<br>// [2, 4, 3, 6, 4, 8]</p><p>ES5 对空位的处理，已经很不一致了，大多数情况下会忽略空位。<br>forEach(), filter(), reduce(), every() 和some()都会跳过空位。<br>map()会跳过空位，但会保留这个值<br>join()和toString()会将空位视为undefined，而undefined和null会被处理成空字符串。</p>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-api</title>
      <link href="/A-lyc/2020/08/19/vue/aip%E6%96%B9%E6%B3%95/"/>
      <url>/A-lyc/2020/08/19/vue/aip%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>集合了一些自己感觉常用的api，组件构造器，全局安装组件，除去计算属性和wacth的监听数据变化</p><a id="more"></a><h3 id="组件构造器吧"><a href="#组件构造器吧" class="headerlink" title="组件构造器吧"></a>组件构造器吧</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Toast <span class="keyword">from</span> <span class="string">'./Toast'</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="comment">//全据注册一个组件 obj</span></span><br><span class="line">obj.install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1:创建组件构造器</span></span><br><span class="line"><span class="keyword">const</span> toastContrustor = Vue.extend(Toast)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2:根据new的方式，根据组件构造器，可以创建出来一个组件对象</span></span><br><span class="line"><span class="keyword">const</span> toast = <span class="keyword">new</span> toastContrustor()</span><br><span class="line"></span><br><span class="line"><span class="comment">//3:将我们的组件对象手动挂载到一个元素中</span></span><br><span class="line">toast.$mount(<span class="built_in">document</span>.createElement(<span class="string">'div'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//4:toast.$el对应的就是上面创建的div'</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(toast.$el)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴漏全局为$toast</span></span><br><span class="line">Vue.prototype.$toast = toast</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class&#x3D;&#39;toast&#39; v-show&#x3D;&quot;show&quot;&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#39;Toast&#39;,</span><br><span class="line">&#x2F;&#x2F;import引入的组件需要注入到对象中才能使用</span><br><span class="line">components: &#123;&#125;,</span><br><span class="line">data()&#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    message:&#39;&#39;,</span><br><span class="line">    show:false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">  isShow(message &#x3D; &#39;默认文字&#39;,duration &#x3D; 2000)&#123;</span><br><span class="line">    this.show &#x3D; true;</span><br><span class="line">    this.message &#x3D; message</span><br><span class="line">    setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line">    this.show &#x3D; false;</span><br><span class="line">    this.message &#x3D; &#39;&#39;</span><br><span class="line">    &#125;,duration)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style lang&#x3D;&#39;scss&#39; scoped&gt;</span><br><span class="line">&#x2F;&#x2F;@import url(); 引入公共css类</span><br><span class="line">.toast &#123;</span><br><span class="line">  position:fixed;</span><br><span class="line">  top: 50%;</span><br><span class="line">  left: 50%;</span><br><span class="line">  transform: translate(-50%,-50%);</span><br><span class="line">  padding: 8px 10px;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">  background-color: rgba(0,0,0,.75);</span><br><span class="line">  color: #fff;</span><br><span class="line">  z-index: 999;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>Js使用，传入methods的方法比如：this.$toast.isShow(‘XX’,2000)<br>    isShow接收的两个形参<br>    export default obj</p><h3 id="注册全局组件"><a href="#注册全局组件" class="headerlink" title="注册全局组件"></a>注册全局组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component( id, [definition] )</span><br><span class="line"><span class="comment">// 注册组件，传入一个扩展过的构造器 </span></span><br><span class="line">Vue.component(<span class="string">'my-component'</span>, Vue.extend(&#123; <span class="comment">/* ... */</span> &#125;)) </span><br><span class="line"><span class="comment">// 注册组件，传入一个选项对象 (自动调用 Vue.extend) </span></span><br><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123; <span class="comment">/* ... */</span> &#125;) </span><br><span class="line"><span class="comment">// 获取注册的组件 (始终返回构造器) </span></span><br><span class="line"><span class="keyword">var</span> MyComponent = Vue.component(<span class="string">'my-component'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用&lt;my-component /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="监听数据更新"><a href="#监听数据更新" class="headerlink" title="监听数据更新"></a>监听数据更新</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改数据 vm.msg = 'Hello' </span></span><br><span class="line"><span class="comment">// DOM 还没有更新 </span></span><br><span class="line">Vue.nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line"><span class="comment">// DOM 更新了 </span></span><br><span class="line">&#125;) </span><br><span class="line"><span class="comment">// 作为一个 Promise 使用 (2.1.0 起新增，详见接下来的提示)</span></span><br><span class="line"> Vue.nextTick() .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// DOM 更新了 &#125;)</span></span><br><span class="line">组件内<span class="keyword">this</span>.$nextTick()</span><br><span class="line">methods: &#123;</span><br><span class="line"> updateMessage: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.message = <span class="string">'已更新'</span> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$el.textContent) <span class="comment">// =&gt; '未更新'</span></span><br><span class="line"> <span class="keyword">await</span> <span class="keyword">this</span>.$nextTick() </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$el.textContent) <span class="comment">// =&gt; '已更新' </span></span><br><span class="line">&#125; &#125;</span><br><span class="line"></span><br><span class="line">SET写入</span><br><span class="line">Vue.set( target, propertyName/index, value )</span><br></pre></td></tr></table></figure><h3 id="全局指令"><a href="#全局指令" class="headerlink" title="全局指令"></a>全局指令</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 注册 </span></span><br><span class="line">Vue.directive(<span class="string">'my-directive'</span>, &#123; </span><br><span class="line">bind: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, </span><br><span class="line">inserted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, </span><br><span class="line">update: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, </span><br><span class="line">componentUpdated: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, </span><br><span class="line">unbind: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; </span><br><span class="line">&#125;) </span><br><span class="line"><span class="comment">// 注册 (指令函数) </span></span><br><span class="line">Vue.directive(<span class="string">'my-directive'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line"><span class="comment">// 这里将会被 `bind` 和 `update` 调用</span></span><br><span class="line"> &#125;) </span><br><span class="line"><span class="comment">// getter，返回已注册的指令 </span></span><br><span class="line"><span class="keyword">var</span> myDirective = Vue.directive(<span class="string">'my-directive'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;view @my-directive='as'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><p>// 注册 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'my-filter'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123; </span><br><span class="line"><span class="comment">// 返回处理后的值</span></span><br><span class="line"> &#125;) </span><br><span class="line"> <span class="comment">// getter，返回已注册的过滤器 </span></span><br><span class="line"> <span class="keyword">var</span> myFilter = Vue.filter(<span class="string">'my-filter'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue-api vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxt单个裁切图片和多个裁切</title>
      <link href="/A-lyc/2020/07/05/nuxt/nuxt%E5%8D%95%E4%B8%AA%E8%A3%81%E5%88%87%E5%9B%BE%E7%89%87%E5%92%8C%E5%A4%9A%E4%B8%AA%E8%A3%81%E5%88%87/"/>
      <url>/A-lyc/2020/07/05/nuxt/nuxt%E5%8D%95%E4%B8%AA%E8%A3%81%E5%88%87%E5%9B%BE%E7%89%87%E5%92%8C%E5%A4%9A%E4%B8%AA%E8%A3%81%E5%88%87/</url>
      
        <content type="html"><![CDATA[<p>安装方法安装富文本图片裁切：npm install -d vue-cropper<br>vue-cropper：<a href="https://github.com/xyxiao001/vue-cropper" target="_blank" rel="noopener">https://github.com/xyxiao001/vue-cropper</a><br>之后直接可以使用了，我是用的element上传的方法，单个图片裁切和多个图片裁切， - 问题：裁切之后鼠标不能滚动的问题，使用v-if在弹出框上解决一下看看</p><a id="more"></a><p>直接上代码<br>cropperPic：同一个页面使用多个上传，需要添加传入内容：url：‘图片地址’，name：‘唯一标识’ - 单个上传的时候直接{url:”图片地址”}<br>uploadImage：父组件接收子组件传来的参数<br>父组件使用： &lt;vue-cropper-image :cropper-pic=”img” @uploadImage=”uploadImage” v-if=”isShowCropper”&gt;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传回来的值命名img 把img的地址传给相应的人</span></span><br><span class="line">uploadImage(img) &#123;</span><br><span class="line">        <span class="keyword">if</span> (img.name === <span class="string">'logo'</span>) &#123;</span><br><span class="line"><span class="comment">//一张图片的时候传给logo</span></span><br><span class="line">          <span class="keyword">this</span>.ruleForm.logo = img.url</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (img.name === <span class="string">'banner'</span>) &#123;</span><br><span class="line"><span class="comment">//多张图片直接push进去</span></span><br><span class="line">          <span class="keyword">let</span> url = img.url</span><br><span class="line">          <span class="keyword">this</span>.ruleForm.banners.push(url)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.isShowCropper = <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="comment">//多张图片删除，我自己写了一个循环遍历 - &lt;img v-for&gt; 之后点击那个删除那个</span></span><br><span class="line"> bannerDel(index) &#123;</span><br><span class="line">        <span class="keyword">this</span>.ruleForm.banners.splice(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- :img="imageUrl" 在计算属性中return出来了 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">VueCropper</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:autoCrop</span>=<span class="string">"option.autoCrop"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:autoCropHeight</span>=<span class="string">"option.autoCropHeight"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:autoCropWidth</span>=<span class="string">"option.autoCropWidth"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:canScale</span>=<span class="string">"option.canScale"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:fixed</span>=<span class="string">"option.fixed"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:fixedNumber</span>=<span class="string">"option.fixedNumber"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:img</span>=<span class="string">"imageUrl"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:info</span>=<span class="string">"option.info"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:outputSize</span>=<span class="string">"option.outputSize"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:outputType</span>=<span class="string">"option.outputType"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">ref</span>=<span class="string">"cropper"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">"height:600px;margin:20px 0"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">VueCropper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"onCubeImg"</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>生成图片<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"onCubeImgOff"</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//网络请求</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; uImage &#125; <span class="keyword">from</span> <span class="string">'@/api/uploadImage.js'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'vueCropperImage'</span>,</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="actionscript"><span class="comment">//接收传入的url 是一个对象，因为需要判断是谁传来的 ： url：图片地址，name：‘标识’ 同一页面使用多个</span></span></span><br><span class="line">      cropperPic: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>() &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      <span class="comment">//传入来的比例，1：1正方形类似</span></span></span><br><span class="line">      fixedNum:&#123;</span><br><span class="line"><span class="javascript">        type:<span class="built_in">Object</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>() &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line">            a:2,</span><br><span class="line">            b:1</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        option: &#123;</span><br><span class="line"><span class="actionscript">          img:<span class="string">''</span> ,                        <span class="comment">// 裁剪图片的地址</span></span></span><br><span class="line"><span class="actionscript">          info: <span class="literal">true</span>,                      <span class="comment">// 裁剪框的大小信息</span></span></span><br><span class="line"><span class="actionscript">          outputSize: <span class="number">1</span>,                   <span class="comment">// 裁剪生成图片的质量</span></span></span><br><span class="line"><span class="actionscript">          outputType: <span class="string">'png'</span>,               <span class="comment">// 裁剪生成图片的格式</span></span></span><br><span class="line"><span class="actionscript">          canScale: <span class="literal">true</span>,                 <span class="comment">// 图片是否允许滚轮缩放</span></span></span><br><span class="line"><span class="actionscript">          autoCrop: <span class="literal">true</span>,                  <span class="comment">// 是否默认生成截图框</span></span></span><br><span class="line"><span class="actionscript">          fixed: <span class="literal">true</span>,                    <span class="comment">// 是否开启截图框宽高固定比例</span></span></span><br><span class="line"><span class="actionscript">          fixedNumber: [<span class="keyword">this</span>.fixedNum.a, <span class="keyword">this</span>.fixedNum.b] <span class="comment">// 截图框的宽高比例</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">      imageUrl()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">this</span>.cropperPic.url</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 关闭 点击关闭进行关闭</span></span></span><br><span class="line">      onCubeImgOff()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$emit(<span class="string">'onCubeImgOff'</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      <span class="comment">//上传</span></span></span><br><span class="line">      onCubeImg() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.cropper.getCropData(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//截取bas64 截取base64的格式 和 图片的后缀名</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> baseSplit = data.split(<span class="string">','</span>)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> format = baseSplit[<span class="number">0</span>].split(<span class="string">'/'</span>)[<span class="number">1</span>].split(<span class="string">';'</span>)[<span class="number">0</span>]</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//获取base64格式的信息</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> base = <span class="string">''</span></span></span><br><span class="line">          if (process.client) &#123;</span><br><span class="line"><span class="javascript">            base = <span class="built_in">window</span>.atob(baseSplit[<span class="number">1</span>])</span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="actionscript">          <span class="comment">//转格式：base64转图片</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> index = base.length</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(index)</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">while</span> (index--) &#123;</span></span><br><span class="line">            u8arr[index] = base.charCodeAt(index)</span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> blods = <span class="keyword">new</span> File([u8arr], <span class="string">'img.'</span> + format, &#123; <span class="attr">type</span>: <span class="string">'image/'</span> + format &#125;)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> fromData = <span class="keyword">new</span> FormData()</span></span><br><span class="line"><span class="actionscript">          fromData.append(<span class="string">'file'</span>, blods)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$notify(&#123;</span></span><br><span class="line"><span class="actionscript">            title: <span class="string">'成功'</span>,</span></span><br><span class="line"><span class="actionscript">            message: <span class="string">'正在上传中'</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">'success'</span></span></span><br><span class="line">          &#125;)</span><br><span class="line"><span class="javascript">          uImage(fromData).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(res)</span></span><br><span class="line">            if (res.code === 200) &#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$notify(&#123;</span></span><br><span class="line"><span class="actionscript">                title: <span class="string">'成功'</span>,</span></span><br><span class="line"><span class="actionscript">                message: <span class="string">'图片上传成功'</span>,</span></span><br><span class="line"><span class="actionscript">                type: <span class="string">'success'</span></span></span><br><span class="line">              &#125;)</span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> param = &#123;</span></span><br><span class="line">                url: res.data.url,</span><br><span class="line"><span class="actionscript">                name: <span class="keyword">this</span>.cropperPic.name</span></span><br><span class="line">              &#125;</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$emit(<span class="string">'uploadImage'</span>, param)</span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$notify(&#123;</span></span><br><span class="line"><span class="actionscript">                title: <span class="string">'警告'</span>,</span></span><br><span class="line"><span class="actionscript">                message: <span class="string">'图片上传失败'</span>,</span></span><br><span class="line"><span class="actionscript">                type: <span class="string">'warning'</span></span></span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nuxt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuxt单个裁切图片和多个裁切 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxt-asyncData异步数据</title>
      <link href="/A-lyc/2020/07/01/nuxt/nuxt-asyncData%E5%BC%82%E6%AD%A5%E6%95%B0%E6%8D%AE/"/>
      <url>/A-lyc/2020/07/01/nuxt/nuxt-asyncData%E5%BC%82%E6%AD%A5%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>asyncData:参数：<br>asyncData (ctx) {<br>    ctx.app // 根实例<br>    ctx.route // 路由实例<br>    ctx.params  //路由参数<br>    ctx.query  // 路由问号后面的参数<br>    ctx.error   // 错误处理方法<br>  }<br>{ params } = url上的/_.vue 参数：如果你定义一个名为_slug.vue的文件，您可以通过context.params.slug来访问它</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    Index &#123;&#123; username &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"Index"</span>,</span></span><br><span class="line"><span class="javascript">  <span class="keyword">async</span> asyncData () &#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//定义一个对象，上面可以访问的 - 类似于data</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> asyncData = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//向对象内添加参数  所以使用的时候直接username可以使用</span></span></span><br><span class="line"><span class="actionscript">        asyncData.username = <span class="string">'John Smith'</span>;</span></span><br><span class="line">        resolve();</span><br><span class="line">      &#125;, 2000)</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> asyncData;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 –<br>直接在页面上使用下面的代码就行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; username &#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nuxt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> asyncData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxt使用富文本图片裁切以及element</title>
      <link href="/A-lyc/2020/06/24/nuxt/nuxt%E4%BD%BF%E7%94%A8%E5%AF%8C%E6%96%87%E6%9C%AC%E5%9B%BE%E7%89%87%E8%A3%81%E5%88%87%E4%BB%A5%E5%8F%8Aelement/"/>
      <url>/A-lyc/2020/06/24/nuxt/nuxt%E4%BD%BF%E7%94%A8%E5%AF%8C%E6%96%87%E6%9C%AC%E5%9B%BE%E7%89%87%E8%A3%81%E5%88%87%E4%BB%A5%E5%8F%8Aelement/</url>
      
        <content type="html"><![CDATA[<p>问题点 - 为解决待测试<br>把后台接收的THML重新渲染到富文本上，做到一个重新修改的作用，思路：ref直接父组件修改子组件的值<br>问题，id需要传入之后提前渲染页面 </p><a id="more"></a><p>父组件使用 @change - &lt;editor @change=”contentEdit” ref=”edit” id=”quill-input-all”&gt;</p><p>之前默认安装element<br>安装方法安装富文本图片裁切：npm install -d vue-quill-editor quill vue-cropper<br>官网：<br>vue-quill-editor：<a href="https://quilljs.com/" target="_blank" rel="noopener">https://quilljs.com/</a><br>git：<a href="https://github.com/surmon-china/vue-quill-editor" target="_blank" rel="noopener">https://github.com/surmon-china/vue-quill-editor</a><br>vue-cropper：<a href="https://github.com/xyxiao001/vue-cropper" target="_blank" rel="noopener">https://github.com/xyxiao001/vue-cropper</a></p><p>nuxt制作服务器端渲染造成的找不到window和document的问题，是由于有些插件是获取window和document的，在vue中是没有window和document的，所以官方给出了解决方案，<br>解决方案1：（局部使用（局部获取浏览器的token） 使用插件的时候不要使用，）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.client) &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'external_library'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方案2：（使用插件的时候全局注册一下）<br>注册插件：plugins文件夹内 新建js文件 - 例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueQuillEditor <span class="keyword">from</span> <span class="string">'vue-quill-editor'</span></span><br><span class="line">Vue.use(VueQuillEditor)</span><br></pre></td></tr></table></figure><p>全局引用：nuxt.config.js配置 ssr:false  服务器端加载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="string">'@/plugins/element-ui'</span>,</span><br><span class="line">  <span class="string">'@/plugins/bootstrap-vue'</span>,</span><br><span class="line">  &#123; <span class="attr">src</span>: <span class="string">'@/plugins/map'</span>, <span class="attr">ssr</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">src</span>: <span class="string">'@/plugins/vue-quill-editor'</span>, <span class="attr">ssr</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">src</span>: <span class="string">'@/plugins/vue-cropper'</span>, <span class="attr">ssr</span>: <span class="literal">false</span> &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>使用：（不需要引入了，就像element一样，按照官网直接写标签，）<br>–  在使用上传的时候action是传输一个链接地址，如果想根据自己定义的axios上传需要添加一个auto-upload=”false”意思不取消自动上传更据:on-change=”onChange”(文件状态改变时的钩子，添加文件、上传成功和上传失败时都会被调用)动作进行上传<br> :before-upload=”beforeUpload” - 建议使用后这个返回一个false （官网介绍上传文件之前的钩子，参数为上传的文件，若返回 false 或者返回 Promise 且被 reject，则停止上传。类型函数 function(file){}:可取到上传的url 下面代码有介绍）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 500px"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图片上传组件</span></span><br><span class="line"><span class="comment">        before-upload：禁止自动上传</span></span><br><span class="line"><span class="comment">        show-file-list是否显示上传列表</span></span><br><span class="line"><span class="comment">        其余属性能加就加     </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:before-upload</span>=<span class="string">"beforeUpload"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:show-file-list</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">accept</span>=<span class="string">"image/*"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">action</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"avatar-uploader"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">hidden</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">"file"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">'file'</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">"small"</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>点击上传图片 到 文本编辑器<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 编辑器组件 @change="onEditorChange($event)" 给父组件发出信息 :options="editorOption" - 传数据给这个组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">quill-editor</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">"height: 400px"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:options</span>=<span class="string">"editorOption"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">change</span>=<span class="string">"onEditorChange($event)"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"editor"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">ref</span>=<span class="string">"myQuillEditor"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">quill-editor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图片裁剪组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:visible.sync</span>=<span class="string">"isShowCropper"</span> <span class="attr">top</span>=<span class="string">"5vh"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">VueCropper</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:autoCrop</span>=<span class="string">"option.autoCrop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:autoCropHeight</span>=<span class="string">"option.autoCropHeight"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:autoCropWidth</span>=<span class="string">"option.autoCropWidth"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:canScale</span>=<span class="string">"option.canScale"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:fixed</span>=<span class="string">"option.fixed"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:fixedNumber</span>=<span class="string">"option.fixedNumber"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:img</span>=<span class="string">"option.img"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:info</span>=<span class="string">"option.info"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:outputSize</span>=<span class="string">"option.outputSize"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:outputType</span>=<span class="string">"option.outputType"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">ref</span>=<span class="string">"cropper"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"height:600px;margin:20px 0"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">VueCropper</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"onCubeImg"</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>生成图片<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"isShowCropper = false"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 富文本工具栏配置</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> toolbarOptions = [</span></span><br><span class="line"><span class="actionscript">    [<span class="string">'bold'</span>, <span class="string">'italic'</span>, <span class="string">'underline'</span>, <span class="string">'strike'</span>], <span class="comment">// 加粗 斜体 下划线 删除线</span></span></span><br><span class="line"><span class="actionscript">    [<span class="string">'blockquote'</span>, <span class="string">'code-block'</span>], <span class="comment">// 引用  代码块</span></span></span><br><span class="line"><span class="actionscript">    [&#123; header: <span class="number">1</span> &#125;, &#123; header: <span class="number">2</span> &#125;], <span class="comment">// 1、2 级标题</span></span></span><br><span class="line"><span class="actionscript">    [&#123; list: <span class="string">'ordered'</span> &#125;, &#123; list: <span class="string">'bullet'</span> &#125;], <span class="comment">// 有序、无序列表</span></span></span><br><span class="line"><span class="actionscript">    [&#123; script: <span class="string">'sub'</span> &#125;, &#123; script: <span class="string">'super'</span> &#125;], <span class="comment">// 上标/下标</span></span></span><br><span class="line"><span class="actionscript">    [&#123; indent: <span class="string">'-1'</span> &#125;, &#123; indent: <span class="string">'+1'</span> &#125;], <span class="comment">// 缩进</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// [&#123;'direction': 'rtl'&#125;],                         // 文本方向</span></span></span><br><span class="line"><span class="actionscript">    [&#123; size: [<span class="string">'small'</span>, <span class="literal">false</span>, <span class="string">'large'</span>, <span class="string">'huge'</span>] &#125;], <span class="comment">// 字体大小</span></span></span><br><span class="line"><span class="actionscript">    [&#123; header: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="literal">false</span>] &#125;], <span class="comment">// 标题</span></span></span><br><span class="line"><span class="actionscript">    [&#123; color: [] &#125;, &#123; background: [] &#125;], <span class="comment">// 字体颜色、字体背景颜色</span></span></span><br><span class="line"><span class="actionscript">    [&#123; font: [] &#125;], <span class="comment">// 字体种类</span></span></span><br><span class="line"><span class="actionscript">    [&#123; align: [] &#125;], <span class="comment">// 对齐方式</span></span></span><br><span class="line"><span class="actionscript">    [<span class="string">'clean'</span>], <span class="comment">// 清除文本格式</span></span></span><br><span class="line"><span class="actionscript">    [<span class="string">'link'</span>, <span class="string">'image'</span>, <span class="string">'video'</span>] <span class="comment">// 链接、图片、视频</span></span></span><br><span class="line">  ]</span><br><span class="line"><span class="actionscript">  <span class="comment">//导入的css - 必须 - 最好组件单独导入，不然会乱样式</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">'quill/dist/quill.core.css'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">'quill/dist/quill.snow.css'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">'quill/dist/quill.bubble.css'</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">//导入上传图片的api</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; uImage &#125; <span class="keyword">from</span> <span class="string">'@/api/uploadImage.js'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'textEditor'</span>,</span></span><br><span class="line">    components: &#123;&#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">/*编辑器的内容*/</span></span></span><br><span class="line">      value: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      <span class="comment">/*图片大小*/</span></span></span><br><span class="line">      maxSize: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">default</span>: <span class="number">4000</span> <span class="comment">//kb</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 富文本数据</span></span></span><br><span class="line"><span class="actionscript">        content: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">        quillUpdateImg: <span class="literal">false</span>, <span class="comment">// 根据图片上传状态来确定是否显示loading动画，刚开始是false,不显示</span></span></span><br><span class="line">        editorOption: &#123;</span><br><span class="line"><span class="actionscript">          theme: <span class="string">'snow'</span>, <span class="comment">// or 'bubble'</span></span></span><br><span class="line"><span class="actionscript">          placeholder: <span class="string">'请输入您想输入的内容'</span>,</span></span><br><span class="line">          modules: &#123;</span><br><span class="line">            toolbar: &#123;</span><br><span class="line">              container: toolbarOptions,</span><br><span class="line"><span class="actionscript">              <span class="comment">// 和上传按钮进行绑定</span></span></span><br><span class="line">              handlers: &#123;</span><br><span class="line"><span class="actionscript">                image: <span class="function"><span class="keyword">function</span><span class="params">(value)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="built_in">console</span>.log(value)</span></span><br><span class="line">                  if (value) &#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 触发input框选择图片文件 = 这个位置最好在外面设置一个id之后修改这个的值 #id</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.querySelector(<span class="string">'#id input'</span>).click()</span></span><br><span class="line"><span class="actionscript">                  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.quill.format(<span class="string">'image'</span>, <span class="literal">false</span>)</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        <span class="comment">// 切图器数据</span></span></span><br><span class="line">        option: &#123;</span><br><span class="line"><span class="actionscript">          img: <span class="string">''</span>,                         <span class="comment">// 裁剪图片的地址</span></span></span><br><span class="line"><span class="actionscript">          info: <span class="literal">true</span>,                      <span class="comment">// 裁剪框的大小信息</span></span></span><br><span class="line"><span class="actionscript">          outputSize: <span class="number">1</span>,                   <span class="comment">// 裁剪生成图片的质量</span></span></span><br><span class="line"><span class="actionscript">          outputType: <span class="string">'png'</span>,               <span class="comment">// 裁剪生成图片的格式</span></span></span><br><span class="line"><span class="actionscript">          canScale: <span class="literal">true</span>,                 <span class="comment">// 图片是否允许滚轮缩放</span></span></span><br><span class="line"><span class="actionscript">          autoCrop: <span class="literal">true</span>,                  <span class="comment">// 是否默认生成截图框</span></span></span><br><span class="line"><span class="actionscript">          autoCropWidth: <span class="number">150</span>,              <span class="comment">// 默认生成截图框宽度</span></span></span><br><span class="line"><span class="actionscript">          autoCropHeight: <span class="number">150</span>,             <span class="comment">// 默认生成截图框高度</span></span></span><br><span class="line"><span class="actionscript">          fixed: <span class="literal">true</span>,                    <span class="comment">// 是否开启截图框宽高固定比例</span></span></span><br><span class="line"><span class="actionscript">          fixedNumber: [<span class="number">4</span>, <span class="number">4</span>]             <span class="comment">// 截图框的宽高比例 - 可以使用父组件传来的值 props</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        isShowCropper: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">        isClient: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">        width: <span class="string">'150px'</span>,</span></span><br><span class="line"><span class="actionscript">        height: <span class="string">'150px'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 上传切图前调用</span></span></span><br><span class="line">      beforeUpload(file) &#123;</span><br><span class="line">        /**</span><br><span class="line">         * URL.createObjectURL(file)生成本地的url</span><br><span class="line"><span class="actionscript">         * 返回<span class="literal">false</span>终止了自动上传</span></span><br><span class="line">         * */</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.option.img = URL.createObjectURL(file)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.option.autoCropWidth = <span class="keyword">this</span>.width</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.option.autoCropHeight = <span class="keyword">this</span>.height</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.isShowCropper = <span class="literal">true</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      <span class="comment">// 确定裁剪图片</span></span></span><br><span class="line">      onCubeImg() &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取cropper的截图的base64 data == base64</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.cropper.getCropData(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//截取bas64 截取base64的格式 和 图片的后缀名</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> baseSplit= data.split(<span class="string">','</span>)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> format = baseSplit[<span class="number">0</span>].split(<span class="string">'/'</span>)[<span class="number">1</span>].split(<span class="string">';'</span>)[<span class="number">0</span>]</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//获取base64格式的信息</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> base = <span class="string">''</span></span></span><br><span class="line">          if (process.client) &#123;</span><br><span class="line"><span class="javascript">            base = <span class="built_in">window</span>.atob(baseSplit[<span class="number">1</span>])</span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="actionscript">          <span class="comment">//转格式：base64转图片</span></span></span><br><span class="line">          /**</span><br><span class="line">           *格式为：File</span><br><span class="line">           * lastModified: 1593134876792</span><br><span class="line">           * lastModifiedDate: Fri Jun 26 2020 09:27:56 GMT+0800 (中国标准时间) &#123;&#125;</span><br><span class="line"><span class="actionscript">           * name: <span class="string">"img.png"</span></span></span><br><span class="line">           * size: 15407</span><br><span class="line"><span class="actionscript">           * type: <span class="string">"image/png"</span></span></span><br><span class="line"><span class="actionscript">           * webkitRelativePath: <span class="string">""</span></span></span><br><span class="line">           * */</span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> index = base.length</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(index)</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">while</span> (index--) &#123;</span></span><br><span class="line">            u8arr[index] = base.charCodeAt(index)</span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> blods = <span class="keyword">new</span> File([u8arr],<span class="string">'img.'</span> + format,&#123;<span class="attr">type</span>: <span class="string">'image/'</span> + format &#125;)</span></span><br><span class="line">          /**</span><br><span class="line">           * 建立一个formData表单，之后把上面的base64转换后的格式使用append传递给FormData</span><br><span class="line">           * */</span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> fromData = <span class="keyword">new</span> FormData()</span></span><br><span class="line"><span class="actionscript">          fromData.append(<span class="string">'file'</span>,blods)</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$notify(&#123;</span></span><br><span class="line"><span class="actionscript">            title: <span class="string">'成功'</span>,</span></span><br><span class="line"><span class="actionscript">            message: <span class="string">'正在上传中'</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">'success'</span></span></span><br><span class="line">          &#125;);</span><br><span class="line"><span class="actionscript">          <span class="comment">//发出网络请求</span></span></span><br><span class="line"><span class="javascript">          uImage(fromData).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.$notify(&#123;</span></span><br><span class="line"><span class="actionscript">              title: <span class="string">'成功'</span>,</span></span><br><span class="line"><span class="actionscript">              message: <span class="string">'图片上传成功'</span>,</span></span><br><span class="line"><span class="actionscript">              type: <span class="string">'success'</span></span></span><br><span class="line">            &#125;);</span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取富文本组件实例</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> quill = <span class="keyword">this</span>.$refs.myQuillEditor.quill</span></span><br><span class="line">            if(res.code === 200)&#123;</span><br><span class="line"><span class="actionscript">              <span class="comment">// 获取光标所在位置</span></span></span><br><span class="line">              /**</span><br><span class="line"><span class="actionscript">               *  quill.insertEmbed(length, <span class="string">'image'</span>, res.data.url)</span></span><br><span class="line">               *  图片显示的位置，根据length后的位置显示</span><br><span class="line">               * */</span><br><span class="line">              if (quill.getSelection() &amp;&amp; quill.getSelection().index) &#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> length = quill.getSelection().index</span></span><br><span class="line"><span class="actionscript">                quill.insertEmbed(length, <span class="string">'image'</span>, res.data.url)</span></span><br><span class="line"><span class="actionscript">              &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> length = <span class="number">0</span></span></span><br><span class="line"><span class="actionscript">                quill.insertEmbed(length, <span class="string">'image'</span>, res.data.url)</span></span><br><span class="line">              &#125;</span><br><span class="line"><span class="actionscript">              <span class="comment">// 调整光标到最后</span></span></span><br><span class="line">              quill.setSelection(length + 1)</span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(res.data.code)</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.$notify(&#123;</span></span><br><span class="line"><span class="actionscript">                title: <span class="string">'警告'</span>,</span></span><br><span class="line"><span class="actionscript">                message: <span class="string">'图片上传失败'</span>,</span></span><br><span class="line"><span class="actionscript">                type: <span class="string">'warning'</span></span></span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.isShowCropper = <span class="literal">false</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 先将显示图片地址清空，防止重复显示</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.option.img = <span class="string">''</span></span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      onEditorChange() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.content)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//富文本内容改变事件 发送给父级元素 @change事件</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$emit(<span class="string">'change'</span>, <span class="keyword">this</span>.content)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="javascript">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.content = <span class="keyword">this</span>.value</span></span><br><span class="line">      &#125;, 500)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nuxt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuxt vue 使用富文本图片裁切以及element </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nuxt.js全局方法的使用</title>
      <link href="/A-lyc/2020/06/20/nuxt/nuxt-js%E5%85%A8%E5%B1%80%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/A-lyc/2020/06/20/nuxt/nuxt-js%E5%85%A8%E5%B1%80%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>nuxt.js全局方法的使用 见vue插件使用的：<a href="https://cn.vuejs.org/v2/guide/plugins.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/plugins.html</a><br>1.在plugins的文件夹地下去建立一个proto.js的文件</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">var test &#x3D; &#123;</span><br><span class="line">    install(Vue) &#123;</span><br><span class="line">        Vue.prototype.test &#x3D; &#123;</span><br><span class="line">            val: function(val) &#123;</span><br><span class="line">                console.log(&#39;打印出来的值&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Vue.prototype.testname &#x3D; &#39;四叶草&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Vue.use(test)</span><br></pre></td></tr></table></figure><p>2.直接使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">   console.log(this.$route.params, &#39;this.$route&#39;);  </span><br><span class="line">   console.log(this.testname, &#39;this&#39;); &#x2F;&#x2F;全局去拿字符串</span><br><span class="line"> &#125;,</span><br><span class="line"> mounted() &#123;</span><br><span class="line">   this.test.val()  &#x2F;&#x2F;全局去调用事件</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在created里面去调用事件会报错</p>]]></content>
      
      
      <categories>
          
          <category> Nuxt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuxt.js全局方法的使用 install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuxt.js使用百度地图vue-baidu-map</title>
      <link href="/A-lyc/2020/06/19/nuxt/Nuxt-js%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEvue-baidu-map/"/>
      <url>/A-lyc/2020/06/19/nuxt/Nuxt-js%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEvue-baidu-map/</url>
      
        <content type="html"><![CDATA[<h2 id="vue-baidu-map文档：https-dafrok-github-io-vue-baidu-map-zh-start-usage"><a href="#vue-baidu-map文档：https-dafrok-github-io-vue-baidu-map-zh-start-usage" class="headerlink" title="vue-baidu-map文档：https://dafrok.github.io/vue-baidu-map/#/zh/start/usage"></a>vue-baidu-map文档：<a href="https://dafrok.github.io/vue-baidu-map/#/zh/start/usage" target="_blank" rel="noopener">https://dafrok.github.io/vue-baidu-map/#/zh/start/usage</a></h2><a id="more"></a><p>安装vue-baidu-map</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-baidu-map -D</span><br></pre></td></tr></table></figure><p>在plugins新建map.js:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import BaiduMap from &#39;vue-baidu-map&#39;</span><br><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">Vue.use(BaiduMap, &#123;</span><br><span class="line">  ak: &#39;申请的百度地图密匙&#39;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在nuxt.config.js中引入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  &#123; src: &quot;~plugins&#x2F;map.js&quot;, ssr: false &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>在页面中使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">baidu-map</span> <span class="attr">class</span>=<span class="string">"bdwindow"</span> <span class="attr">:dragging</span>=<span class="string">"dragging"</span> <span class="attr">:center</span>=<span class="string">"center"</span> <span class="attr">:zoom</span>=<span class="string">"zoom"</span> <span class="attr">style</span>=<span class="string">"height:500px"</span> <span class="attr">:scroll-wheel-zoom</span>=<span class="string">'scroll'</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">bm-info-window</span> <span class="attr">:position</span>=<span class="string">"center"</span> <span class="attr">:title</span>=<span class="string">"title"</span> <span class="attr">:show</span>=<span class="string">"show"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bdwtext"</span> <span class="attr">v-html</span>=<span class="string">"contents"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">bm-info-window</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">baidu-map</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            jump_path:<span class="string">""</span>,</span></span><br><span class="line">            center: &#123;lng: 120.4373010751, lat: 23.1095638170&#125;,</span><br><span class="line"><span class="actionscript">            zoom: <span class="number">15</span>,  <span class="comment">//缩放级别</span></span></span><br><span class="line"><span class="actionscript">            title:<span class="string">"标题"</span>,</span></span><br><span class="line"><span class="actionscript">            contents: <span class="string">'地址：具体地址信息'</span>,  <span class="comment">//标签内容</span></span></span><br><span class="line"><span class="actionscript">            show: <span class="literal">true</span>,  <span class="comment">//显示标签</span></span></span><br><span class="line"><span class="actionscript">            scroll:<span class="literal">true</span>,  <span class="comment">//地图缩放</span></span></span><br><span class="line"><span class="actionscript">            dragging:<span class="literal">true</span>,  <span class="comment">//地图拖拽</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自动获取地理位置-此地图修改性比较大，-后续需要修改"><a href="#自动获取地理位置-此地图修改性比较大，-后续需要修改" class="headerlink" title="自动获取地理位置 - 此地图修改性比较大， - 后续需要修改"></a>自动获取地理位置 - 此地图修改性比较大， - 后续需要修改</h2><p>问题点：keyword使用props传一个值过来，或者使用ref，来解决修改的问题</p><p>父组件使用： &lt;vue-map-baidu-key @mapMessage=”mapMessage”&gt;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--地图模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">class</span>=<span class="string">"col-6"</span> <span class="attr">v-model</span>=<span class="string">"keyword"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"centerDialogVisibleClick"</span> <span class="attr">plain</span>&gt;</span>查找位置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dialog</span></span></span><br><span class="line"><span class="tag">      <span class="attr">title</span>=<span class="string">"点击查看学校地址"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:visible.sync</span>=<span class="string">"centerDialogVisible"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">width</span>=<span class="string">"1000px"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">top</span>=<span class="string">"2vh"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">center</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- getPoint方法，给地图加点击事件，点击地图获取所需要的信息，--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--scroll-wheel-zoom属性是否可以用鼠标滚轮控制地图缩放--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">baidu-map</span> <span class="attr">:scroll-wheel-zoom</span>=<span class="string">"true"</span> <span class="attr">:zoom</span>=<span class="string">"zoom"</span> </span></span><br><span class="line"><span class="tag">@<span class="attr">click</span>=<span class="string">"getPoint"</span> <span class="attr">center</span>=<span class="string">"滨州市"</span> <span class="attr">style</span>=<span class="string">"width: 100%;height: 400px"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">class</span>=<span class="string">"map"</span> <span class="attr">id</span>=<span class="string">"mapID"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--地图类型，两种：一种是路线一种是绿的那种 :showAddressBar="true"是否显示默认的弹窗--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bm-map-type</span> <span class="attr">:map-types</span>=<span class="string">"['BMAP_NORMAL_MAP', 'BMAP_HYBRID_MAP']"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">anchor</span>=<span class="string">"BMAP_ANCHOR_TOP_LEFT"</span>&gt;</span><span class="tag">&lt;/<span class="name">bm-map-type</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--地图搜索功能，绑定上面的input，--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--display: none样式很关键，因为下面默认会有地址提示信息很长，很烦，这样搜索会很舒服，--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--zoom是搜索结果的视图比例，个人觉得12.8很舒服显示--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bm-local-search</span> <span class="attr">:auto-viewport</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">:keyword</span>=<span class="string">"keyword"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">:location</span>=<span class="string">"location"</span> <span class="attr">style</span>=<span class="string">"display: none"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">zoom</span>=<span class="string">"12.8"</span>&gt;</span><span class="tag">&lt;/<span class="name">bm-local-search</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bm-navigation</span> <span class="attr">anchor</span>=<span class="string">"BMAP_ANCHOR_TOP_RIGHT"</span>&gt;</span><span class="tag">&lt;/<span class="name">bm-navigation</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--      信息窗口，show属性是控制显示隐藏，infoWindowClose和infoWindowOpen是控制信息窗口关闭隐藏的方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bm-marker</span> <span class="attr">:position</span>=<span class="string">"postionMap"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">bm-info-window</span> <span class="attr">:show</span>=<span class="string">"show"</span> @<span class="attr">close</span>=<span class="string">"infoWindowClose"</span> @<span class="attr">open</span>=<span class="string">"infoWindowOpen"</span> <span class="attr">style</span>=<span class="string">"font-size: 14px"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>学校名称：&#123;&#123; add.jgName &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前地址：&#123;&#123; add.site &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">bm-info-window</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bm-marker</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">baidu-map</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--      //显示数据--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"footer"</span> <span class="attr">class</span>=<span class="string">"dialog-footer row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group-flush col-10 row text-left"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"map-baidu-xinxi col-6 pr-1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control col-10 border-0 "</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">placeholder</span>=<span class="string">"输入学校位置"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">aria-label</span>=<span class="string">"Example text with button addon"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">aria-describedby</span>=<span class="string">"button-addon1"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">v-model</span>=<span class="string">"keyword"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"map-baidu-xinxi col-3 pr-1"</span>&gt;</span>经度：&#123;&#123;add.postionMap.lng&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"map-baidu-xinxi col-3 pr-1"</span>&gt;</span>维度：&#123;&#123;add.postionMap.lat&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"map-baidu-xinxi col-3 pr-1"</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>省：<span class="tag">&lt;/<span class="name">b</span>&gt;</span>&#123;&#123;add.province&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"map-baidu-xinxi col-3 pr-1"</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>市：<span class="tag">&lt;/<span class="name">b</span>&gt;</span>&#123;&#123;add.city&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"map-baidu-xinxi col-3 pr-1"</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>区：<span class="tag">&lt;/<span class="name">b</span>&gt;</span>&#123;&#123;add.district&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"map-baidu-xinxi col-3 pr-1"</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>街：<span class="tag">&lt;/<span class="name">b</span>&gt;</span>&#123;&#123;add.street&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">class</span>=<span class="string">"col-10 ml-0 mb-1"</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"centerDialogVisibleOK"</span>&gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">class</span>=<span class="string">"col-10 ml-0"</span> @<span class="attr">click</span>=<span class="string">"centerDialogVisible = false"</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//显示地图红点上的信息</span></span></span><br><span class="line"><span class="actionscript">        show: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//地图坐标</span></span></span><br><span class="line">        postionMap: &#123;</span><br><span class="line"><span class="actionscript">          lng: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          lat: <span class="string">''</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        <span class="comment">//搜索框关键词 - 重要</span></span></span><br><span class="line"><span class="actionscript">        keyword: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//位置</span></span></span><br><span class="line"><span class="actionscript">        location: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//放大比例</span></span></span><br><span class="line">        zoom: 12.8,</span><br><span class="line"><span class="actionscript">        <span class="comment">//位置详细信息</span></span></span><br><span class="line"><span class="actionscript">        address: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 返回父组件的东西 -</span></span></span><br><span class="line">        add: &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">//站点名称 - 可不要 - 换成学校名</span></span></span><br><span class="line"><span class="actionscript">          siteName: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//地址</span></span></span><br><span class="line"><span class="actionscript">          site: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//经纬度</span></span></span><br><span class="line">          postionMap: &#123;</span><br><span class="line"><span class="actionscript">            lng: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">            lat: <span class="string">''</span></span></span><br><span class="line">          &#125;,</span><br><span class="line"><span class="actionscript">          <span class="comment">//备注说明</span></span></span><br><span class="line"><span class="actionscript">          desce: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//类型</span></span></span><br><span class="line"><span class="actionscript">          type: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//省</span></span></span><br><span class="line"><span class="actionscript">          province:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//城市</span></span></span><br><span class="line"><span class="actionscript">          city:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//区县</span></span></span><br><span class="line"><span class="actionscript">          district:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//街道</span></span></span><br><span class="line"><span class="actionscript">          street:<span class="string">''</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        centerDialogVisible: <span class="literal">false</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">//点击选取地图 打开弹窗</span></span></span><br><span class="line">      centerDialogVisibleClick() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.centerDialogVisible = <span class="literal">true</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript"><span class="comment">//点击确认之后关闭弹窗传出this.add</span></span></span><br><span class="line">      centerDialogVisibleOK()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.add.address = <span class="keyword">this</span>.keyword</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.centerDialogVisible = <span class="literal">false</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$emit(<span class="string">'mapMessage'</span>,<span class="keyword">this</span>.add)</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      <span class="comment">//点击地图获取一些信息，</span></span></span><br><span class="line">      getPoint(e) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.show = <span class="literal">true</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.postionMap.lng = e.point.lng     <span class="comment">//通过  e.point.lng获取经度</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.postionMap.lat = e.point.lat     <span class="comment">//通过  e.point.lat获取纬度</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.add.postionMap.lng = e.point.lng</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.add.postionMap.lat = e.point.lat</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//创建地址解析器的实例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> geocoder = <span class="keyword">new</span> BMap.Geocoder()</span></span><br><span class="line">        geocoder.getLocation(e.point, rs =&gt; &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.add.site = rs.address</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.add.province = rs.addressComponents.province</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.add.city = rs.addressComponents.city</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.add.district = rs.addressComponents.district</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.add.street = rs.addressComponents.street</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 地址描述(string)=</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(rs) <span class="comment">//用什么可以在这里面找</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(rs.address)    <span class="comment">//这里打印可以看到里面的详细地址信息，可以根据需求选择想要的</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// console.log(rs.point) //获取坐标</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// console.log(rs.addressComponents)//结构化的地址描述(object)</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// console.log(rs.addressComponents.province) //省</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// console.log(rs.addressComponents.city) //城市</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// console.log(rs.addressComponents.district) //区县</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// console.log(rs.addressComponents.street) //街道</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// console.log(rs.addressComponents.streetNumber) //门牌号</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// console.log(rs.surroundingPois) //附近的POI点(array)</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">// console.log(rs.business) //商圈字段，代表此点所属的商圈(string)</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      infoWindowClose() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.show = <span class="literal">false</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      infoWindowOpen() &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">//这里有个问题纠结了很久，百度的信息窗口默认有个点击其他地方就消失的事件，我没有找到</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//并且信息窗口点击一次显示，一次消失</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//于是我加了一个100毫秒的定时器，保证每次点击地图都可以展示信息窗口</span></span></span><br><span class="line"><span class="javascript">        setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.show = <span class="literal">true</span></span></span><br><span class="line">        &#125;, 100)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.map-baidu-xinxi</span>&#123;</span></span><br><span class="line">    display: block;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.125</span>);</span></span><br><span class="line"><span class="css">    <span class="selector-tag">line-height</span>: 2<span class="selector-class">.5</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123; <span class="attribute">box-shadow</span>: none &#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nuxt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nuxt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp批量导入组件</title>
      <link href="/A-lyc/2020/05/19/uniapp/uniapp%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5%E7%BB%84%E4%BB%B6/"/>
      <url>/A-lyc/2020/05/19/uniapp/uniapp%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>uni-app easycom 模式 组件 引入<br>前言 （报错的问题 请往下看）<br>easycom官网描述</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/A-lyc/A-lyc/2020/05/19/uniapp/uniapp%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5%E7%BB%84%E4%BB%B6/01.png" alt="查入图片" title>                </div>                <div class="image-caption">查入图片</div>            </figure><a id="more"></a><p>含义：<br>原本 vue 引入组件 需要多部操作，全局引入、单文件引入、在文件中注册等等等 非常麻烦。</p><p>uni-app 推出了easycom 引入组件模式 只需要在page.json 中配置自动扫描 或 自定义规则导入组件即可下面我会详细说下两种用法。</p><p>esaycom 自动导入：<br>一般在组件目录下（components） 目录下按照他的规则 组件文件夹/组件名称.vue 就可以自动导入了 如下图所示 ↓↓↓ 。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/A-lyc/A-lyc/2020/05/19/uniapp/uniapp%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5%E7%BB%84%E4%BB%B6/02.png" alt="查入图片" title>                </div>                <div class="image-caption">查入图片</div>            </figure><p>esaycom 手动编写规则导入：<br>一般报错的位置都在这里 写了自动以规则但是无法使用 ，找不到组件 ，非常头疼。<br>下面是一个示例 请看下方图片 ↓↓↓。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/A-lyc/A-lyc/2020/05/19/uniapp/uniapp%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5%E7%BB%84%E4%BB%B6/03.png" alt="查入图片" title>                </div>                <div class="image-caption">查入图片</div>            </figure><p>这里官网写的示例 让这么引入<br>在这里插入图片描述<br>问题 如果我在多加一个文件夹呢？ 因为全部的组件都这么放的话，问题会很大。因为组件越来越多，严重影响代码质量，美化等等。</p><p>如果把组件的作用不同 单分文件夹的时候 这个 自定义规则应该怎么写呢？ 看下图所示↓↓↓↓。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/A-lyc/A-lyc/2020/05/19/uniapp/uniapp%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5%E7%BB%84%E4%BB%B6/04.png" alt="查入图片" title>                </div>                <div class="image-caption">查入图片</div>            </figure><p>把组件单分到文件夹里面。<br>在这里插入图片描述<br>那么这个规则就应该这么写。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/A-lyc/A-lyc/2020/05/19/uniapp/uniapp%E6%89%B9%E9%87%8F%E5%AF%BC%E5%85%A5%E7%BB%84%E4%BB%B6/05.png" alt="查入图片" title>                </div>                <div class="image-caption">查入图片</div>            </figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;easycom&quot;: &#123;</span><br><span class="line">  &quot;autoscan&quot;: true,</span><br><span class="line">  &quot;custom&quot;: &#123;</span><br><span class="line">    &quot;uni-(.*)&quot;: &quot;@&#x2F;components&#x2F;uni-$1.vue&quot;, &#x2F;&#x2F; 匹配components目录内的vue文件</span><br><span class="line">    &quot;vue-file-(.*)&quot;: &quot;packageName&#x2F;path&#x2F;to&#x2F;vue-file-$1.vue&quot; &#x2F;&#x2F; 匹配node_modules内的vue文件</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义easycom配置的示例"><a href="#自定义easycom配置的示例" class="headerlink" title="自定义easycom配置的示例"></a>自定义easycom配置的示例</h3><p>如果需要匹配node_modules内的vue文件，需要使用packageName/path/to/vue-file-$1.vue形式的匹配规则，其中packageName为安装的包名，/path/to/vue-file-$1.vue为vue文件在包内的路径。</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>easycom方式引入的组件无需在页面内import，也不需要在components内声明，即可在任意页面使用<br>easycom方式引入组件不是全局引入，而是局部引入。例如在H5端只有加载相应页面才会加载使用的组件<br>在组件名完全一致的情况下，easycom引入的优先级低于手动引入（区分连字符形式与驼峰形式）<br>考虑到编译速度，直接在pages.json内修改easycom不会触发重新编译，需要改动页面内容触发。<br>easycom只处理vue组件，不处理小程序组件。暂不处理后缀为.nvue的组件，建议参考uni ui，使用vue后缀，同时兼容nvue页面。<br>nvue页面里的.vue后缀的组件，同样支持easycom<br>tabBar</p>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wxparse富文本插件</title>
      <link href="/A-lyc/2020/05/18/%E5%BE%AE%E4%BF%A1/wxparse%E5%AF%8C%E6%96%87%E6%9C%AC%E6%8F%92%E4%BB%B6/"/>
      <url>/A-lyc/2020/05/18/%E5%BE%AE%E4%BF%A1/wxparse%E5%AF%8C%E6%96%87%E6%9C%AC%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>优点：目前已知唯一可以转化HTML到小程序识别的插件</p><p>解决小程序富文本图片过大超出问题<br>let dataAbout = res.data.data.about.replace(/&lt;img/gi, ‘&lt;img style=”width:100%;height:auto” ‘)</p><p>缺点：转换一个HTML标签可能需要大量的微信小程序标签还有样式</p><a id="more"></a><p>配置：第一步，下载<a href="https://github.com/icindy/wxParse" target="_blank" rel="noopener">https://github.com/icindy/wxParse</a></p><p>第二步，放入项目中，我选择pages目录下</p><p>第三步，配置</p><p>wxml加入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">"../wxParse/wxParse.wxml"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在需要的地方使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;template is&#x3D;&quot;wxParse&quot; data&#x3D;&quot;&#123;&#123;wxParseData:article.nodes&#125;&#125;&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>其中article是后台html值的变量名<br>js加入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> WxParse = <span class="built_in">require</span>(<span class="string">'../wxParse/wxParse.js'</span>);</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">import</span> WxParse <span class="keyword">from</span> <span class="string">'../wxParse/wxParse.js'</span></span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    article:<span class="string">'&lt;div&gt;我是HTML代码&lt;/div&gt;&lt;h4&gt;&lt;i&gt;我是h1标签&lt;/i&gt;&lt;/h4&gt;'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//但是要注意的是a标签的转化，需要加入一个方法，示例如下</span></span><br><span class="line">  wxParseTagATap: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> href = e.currentTarget.dataset.src;</span><br><span class="line">    <span class="built_in">console</span>.log(href);</span><br><span class="line">    wx.redirectTo(&#123;</span><br><span class="line">      url: href</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    WxParse.wxParse(<span class="string">'article'</span>, <span class="string">'html'</span>, <span class="keyword">this</span>.data.article, <span class="keyword">this</span>, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里貌似使用es6的import会有错误<br>我在onload事件写下了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WxParse.wxParse(<span class="string">'article'</span>, <span class="string">'html'</span>, <span class="keyword">this</span>.data.article, <span class="keyword">this</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>注意的是第三个和第四个参数，前几个可以固定不变但是第一个要和数据变量名一致，第三个是后台数据，第四个是指的小程序标签，可以注册多个wxparse<br>wxss加入：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">'../wxParse/wxParse.wxss'</span>;</span><br></pre></td></tr></table></figure><p>到此完成，但是要注意的是a标签的转化，需要加入一个方法，示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wxParseTagATap: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> href = e.currentTarget.dataset.src;</span><br><span class="line"><span class="built_in">console</span>.log(href);</span><br><span class="line">wx.redirectTo(&#123;</span><br><span class="line">url: href</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个在点击a标签的时候控制台其实是输出了警告信息的<br>此外url也只能是小程序内部地址，这是个限制，他不能跳到外部，这里我想后台编辑的时候可以用二维码替代，小程序跳转外部地址可以使用web-view标签，详情参考官方文档</p>]]></content>
      
      
      <categories>
          
          <category> 微信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> wxparse富文本插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序</title>
      <link href="/A-lyc/2020/05/17/%E5%BE%AE%E4%BF%A1/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-1/"/>
      <url>/A-lyc/2020/05/17/%E5%BE%AE%E4%BF%A1/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-1/</url>
      
        <content type="html"><![CDATA[<h3 id="最近总结微信的常用的语法："><a href="#最近总结微信的常用的语法：" class="headerlink" title="最近总结微信的常用的语法："></a>最近总结微信的常用的语法：</h3><p>点击阻止冒泡事件<br>bilnd 会有冒泡事件<br>catch 会阻止事件向上冒泡</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx:for&#x3D;&quot;&#123;&#123;&#125;&#125;&quot;:</span><br><span class="line">wx:for-item：for循环键值对的方式，item点什么，如果不需要索引的话，可以直接使用wx:for&#x3D;&#39;&#123;&#123;data上的值&#125;&#125;&#39;</span><br><span class="line">wx:for-index：for循环索引值，获取这个元素在那一个索引的位置</span><br><span class="line"></span><br><span class="line">wx:if&#x3D;&quot;&#123;&#123;&#125;&#125;&quot;</span><br><span class="line">wx:if:可以是一个三元表达式，也可以是一个布尔值，</span><br><span class="line">wx:elif:如果上个条件不成立的话，直接走这个条件</span><br><span class="line">wx:if:同第一个</span><br></pre></td></tr></table></figure><p>this.setData({})和this.data<br>setData可以写入改变data中某一个的值，<br>data可以获取data中的值，应该是不能修改的，（当前理解）</p><p>自定义属性：data-重命名=”传递到js的参数” =&gt; 举例：data-hi=”WeChat”<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">id</span>=<span class="string">"tapTest"</span> <span class="attr">data-hi</span>=<span class="string">"WeChat"</span> <span class="attr">bindtap</span>=<span class="string">"tapName"</span>&gt;</span> Click me! <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  tapName: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>控制台打印的值</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>:<span class="string">"tap"</span>,</span><br><span class="line">  <span class="attr">"timeStamp"</span>:<span class="number">895</span>,</span><br><span class="line">  <span class="attr">"target"</span>: &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"tapTest"</span>,</span><br><span class="line">    <span class="attr">"dataset"</span>:  &#123;</span><br><span class="line">      <span class="attr">"hi"</span>:<span class="string">"WeChat"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"currentTarget"</span>:  &#123;<span class="comment">//重点在这</span></span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"tapTest"</span>,</span><br><span class="line">    <span class="attr">"dataset"</span>: &#123;</span><br><span class="line">      <span class="attr">"hi"</span>:<span class="string">"WeChat"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"detail"</span>: &#123;</span><br><span class="line">    <span class="attr">"x"</span>:<span class="number">53</span>,</span><br><span class="line">    <span class="attr">"y"</span>:<span class="number">14</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"touches"</span>:[&#123;</span><br><span class="line">    <span class="attr">"identifier"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">"pageX"</span>:<span class="number">53</span>,</span><br><span class="line">    <span class="attr">"pageY"</span>:<span class="number">14</span>,</span><br><span class="line">    <span class="attr">"clientX"</span>:<span class="number">53</span>,</span><br><span class="line">    <span class="attr">"clientY"</span>:<span class="number">14</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">"changedTouches"</span>:[&#123;</span><br><span class="line">    <span class="attr">"identifier"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">"pageX"</span>:<span class="number">53</span>,</span><br><span class="line">    <span class="attr">"pageY"</span>:<span class="number">14</span>,</span><br><span class="line">    <span class="attr">"clientX"</span>:<span class="number">53</span>,</span><br><span class="line">    <span class="attr">"clientY"</span>:<span class="number">14</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>input value=”“<br>可实现数据的单项绑定，通过bindinput实现双向绑定，同data-XX用法取到用户输入的值</p><p>给下一个页面传输数据<br>当前页面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  wx.navigateTo(&#123;</span><br><span class="line">    url: <span class="string">'../list/list?id=1&amp;d=2'</span>,<span class="comment">//拼接传输</span></span><br><span class="line">    events: &#123;</span><br><span class="line">      <span class="comment">// 为指定事件添加一个监听器，获取被打开页面传送到当前页面的数据</span></span><br><span class="line">      acceptDataFromOpenedPage: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">      &#125;,</span><br><span class="line">      someEvent: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 通过eventChannel向被打开页面传送数据</span></span><br><span class="line">      res.eventChannel.emit(<span class="string">'acceptDataFromOpenerPage'</span>, &#123; <span class="attr">data</span>: <span class="string">'test'</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>点击之后打开的页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">onLoad: <span class="function"><span class="keyword">function</span>(<span class="params">option</span>) </span>&#123;<span class="comment">//在onload的时候接收</span></span><br><span class="line">  <span class="built_in">console</span>.log(option)<span class="comment">//接收拼接的数据</span></span><br><span class="line">  <span class="keyword">const</span> eventChannel = <span class="keyword">this</span>.getOpenerEventChannel()</span><br><span class="line">  eventChannel.emit(<span class="string">'acceptDataFromOpenedPage'</span>, &#123;</span><br><span class="line">    data: <span class="string">'test'</span></span><br><span class="line">  &#125;);</span><br><span class="line">  eventChannel.emit(<span class="string">'someEvent'</span>, &#123;</span><br><span class="line">    data: <span class="string">'test'</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 监听acceptDataFromOpenerPage事件，获取上一页面通过eventChannel传送到当前页面的数据</span></span><br><span class="line">  eventChannel.on(<span class="string">'acceptDataFromOpenerPage'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>动态修改class和style</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class&#x3D;&quot;page &#123;&#123;typeIndex &#x3D;&#x3D;&#x3D; index ? &#39;active&#39; : &#39;&#39;&#125;&#125;&quot;  如果是true的话添加active，如果是flase的话，不添加。通常用于点击事件等</span><br><span class="line">style同理</span><br></pre></td></tr></table></figure><p>hidden：根据官网解释是是否显示这个组件，默认是显示的  布尔值</p><p>模板语法：<br>创建模板四个文件（js,json,wxml,wxss）可以缺少json，js，wxss，模板wxml上书写模板页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"add"</span>&gt;</span></span><br><span class="line">  我是一个模板</span><br><span class="line">  &#123;&#123;add&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>name的值和is的值要对应，，之后data的值是传输到模板中的data，所以说最好模板内的也是和传来的这个值是相对应的，传输对象可用…,多个值应该使用逗号隔开</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 首先顶部引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">"../../template/add.wxml"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"add"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;add&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父子组件传递，父传子，通过事件的方式进行传递<br>在子组件中注册点击事件或者其他事件，之后使用this.triggerEvent(“定义的时间名”,发出信息)<br>父组件接收事件使用binld定义的时间名=”事件”<br>比如：<br>子组件发出this.triggerEvent(‘add’, old)<br>父组件接收bilndadd=”add”进行接收处理</p><p>混入：类似于vue中的mixin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var myBehavior &#x3D; require(&#39;my-behavior&#39;)&#x2F;&#x2F;js引入</span><br><span class="line">behaviors: [myBehavior]&#x2F;&#x2F;调用</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> 微信小程序基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序的异步请求-promise封装-async</title>
      <link href="/A-lyc/2020/05/16/%E5%BE%AE%E4%BF%A1/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82-promise%E5%B0%81%E8%A3%85-async/"/>
      <url>/A-lyc/2020/05/16/%E5%BE%AE%E4%BF%A1/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82-promise%E5%B0%81%E8%A3%85-async/</url>
      
        <content type="html"><![CDATA[<ol><li>小程序原生发送异步请求: wx.request<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生发送异步请求</span></span><br><span class="line">wx.request(&#123;</span><br><span class="line">url: <span class="string">''</span>, <span class="comment">// 请求的路径</span></span><br><span class="line">method: <span class="string">""</span>, <span class="comment">// 请求的方式</span></span><br><span class="line">data: &#123;&#125;, <span class="comment">// 请求的数据</span></span><br><span class="line">header: &#123;&#125;, <span class="comment">// 请求头</span></span><br><span class="line">success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// res  响应的数据</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a></li><li>用 promise 封装 wx.request</li><li>1 回顾promise:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建对象</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 逻辑代码</span></span><br><span class="line">    <span class="keyword">if</span>()&#123;</span><br><span class="line">       resolve(data)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        reject(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用方法</span></span><br><span class="line">p.then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>2.2 进行封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">------------------- 第一, 在utils下新建一个js文件,进行封装 -----------------------</span><br><span class="line"><span class="comment">// promise 特点：一创建就立即执行，一般情况下解决这个问题我们会将其封装为一个函数</span></span><br><span class="line"><span class="comment">// options:请求时的参数对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myrequest</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 逻辑：发送请求到服务器</span></span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: options.url,</span><br><span class="line">      method: options.method || <span class="string">"GET"</span>,</span><br><span class="line">      data: options.data || &#123;&#125;,</span><br><span class="line">      header: options.header || &#123;&#125;,</span><br><span class="line">      success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(res);</span><br><span class="line">      &#125;,</span><br><span class="line">      fail: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 暴露给外界</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> myrequest;</span><br><span class="line"></span><br><span class="line">----------------------- 第二, 封装完成后 引入并使用 ----------------------</span><br><span class="line"><span class="keyword">import</span> myrequest <span class="keyword">from</span> <span class="string">'../../utils/api.js'</span></span><br><span class="line">  myrequest(&#123;</span><br><span class="line">    url: <span class="string">'xxx'</span>,</span><br><span class="line">    header: &#123;</span><br><span class="line">      <span class="string">'content-type'</span>: <span class="string">'json'</span> <span class="comment">// 有些接口不需要设置</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>使用 async &amp; await 来改造 promise</li><li>1 概念<br>​ 是 ES7 提出的新技术, 可以将 promise 对象中异步的方法以同步的方式进行书写, 减少代码量</li></ol><p>3.2 用法<br>​ async：用来修饰异步代码所在的函数</p><p>​ await: 用来修改异步代码</p><p>​ 结果：异步代码会返回一个结果, 即操作完成后的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用async和await来改造上面的promise封装代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> getList()&#123;</span><br><span class="line">    <span class="comment">// 用res来接收这个返回值</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> myrequest(&#123;</span><br><span class="line">        url: <span class="string">'xxx'</span>,</span><br><span class="line">        header: &#123;<span class="string">'content-type'</span>: <span class="string">'json'</span>&#125; <span class="comment">// 有些接口不需要设置</span></span><br><span class="line">  &#125;)</span><br><span class="line">    <span class="comment">// 直接对res进行操作</span></span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.3 特点<br>​ 异步代码虽然是以同步的方式进行书写，但是依旧是异步执行的</p><p>​ await 修饰的对象一定要返回一个 promise 对象</p><hr><p>版权声明：本文为CSDN博主「陈静洁」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/EnidChann/java/article/details/100182948" target="_blank" rel="noopener">https://blog.csdn.net/EnidChann/java/article/details/100182948</a></p>]]></content>
      
      
      <categories>
          
          <category> 微信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> 微信小程序的异步请求-promise封装-async </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信使用Vant-weapp</title>
      <link href="/A-lyc/2020/05/15/%E5%BE%AE%E4%BF%A1/%E5%BE%AE%E4%BF%A1%E4%BD%BF%E7%94%A8Vant-weapp/"/>
      <url>/A-lyc/2020/05/15/%E5%BE%AE%E4%BF%A1/%E5%BE%AE%E4%BF%A1%E4%BD%BF%E7%94%A8Vant-weapp/</url>
      
        <content type="html"><![CDATA[<h3 id="微信小程序引入Vant组件库"><a href="#微信小程序引入Vant组件库" class="headerlink" title="微信小程序引入Vant组件库"></a>微信小程序引入Vant组件库</h3><p>Vant Weapp组件库：<a href="https://youzan.github.io/vant-weapp/#/intro" target="_blank" rel="noopener">https://youzan.github.io/vant-weapp/#/intro</a></p><a id="more"></a><p>说说我在引入vant组件库的时候的操作方法吧：</p><p>1.先在微信开发者工具中打开项目的终端：</p><p>2.然后初始化一个package.json文件：输入命令：npm init  =&gt; 一定是npm init</p><p>然后一路回车</p><p>项目就回产生一个package.json文件：</p><p>3.接着在vant组件库的官网上找到安装语句：npm i vant-weapp -S –production，在终端输入安装命令，点击回车：</p><p>官网安装：<a href="https://youzan.github.io/vant-weapp/#/quickstart" target="_blank" rel="noopener">https://youzan.github.io/vant-weapp/#/quickstart</a></p><p>4.构建npm：在微信开发者工具的菜单栏中找到工具栏的选项“构建npm”，等待构建完成</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/A-lyc/A-lyc/2020/05/15/%E5%BE%AE%E4%BF%A1/%E5%BE%AE%E4%BF%A1%E4%BD%BF%E7%94%A8Vant-weapp/01.webp" alt="查入图片" title>                </div>                <div class="image-caption">查入图片</div>            </figure><p>其中miniprogram_npm下就是vant-weapp组件库；</p><p>5.最后，在微信开发者工具的详情里面将“使用npm模块”勾选上，如下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/A-lyc/A-lyc/2020/05/15/%E5%BE%AE%E4%BF%A1/%E5%BE%AE%E4%BF%A1%E4%BD%BF%E7%94%A8Vant-weapp/02.webp" alt="查入图片" title>                </div>                <div class="image-caption">查入图片</div>            </figure><p>6.引用和使用vant组件：（关于如何引用和使用组件可以参考官方文档噢，很齐全）</p><p>以引用button按钮为例，官网文档中都写的特别详细了：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/A-lyc/A-lyc/2020/05/15/%E5%BE%AE%E4%BF%A1/%E5%BE%AE%E4%BF%A1%E4%BD%BF%E7%94%A8Vant-weapp/03.webp" alt="查入图片" title>                </div>                <div class="image-caption">查入图片</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/A-lyc/A-lyc/2020/05/15/%E5%BE%AE%E4%BF%A1/%E5%BE%AE%E4%BF%A1%E4%BD%BF%E7%94%A8Vant-weapp/04.webp" alt="查入图片" title>                </div>                <div class="image-caption">查入图片</div>            </figure>]]></content>
      
      
      <categories>
          
          <category> 微信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> Vant-weapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义的指令</title>
      <link href="/A-lyc/2020/05/02/vue/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E6%8C%87/"/>
      <url>/A-lyc/2020/05/02/vue/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E6%8C%87/</url>
      
        <content type="html"><![CDATA[<p>主要参数可以参照官网所说的<a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/custom-directive.html</a></p><p>Vue.directive(‘指令名’,{参数})创建自定义指令参数三个：</p><a id="more"></a><p>bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。<br>inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。<br>update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。</p><p>el：DOM<br>binding：一个对象，包含property<br>vnode：虚拟节点<br>oldVBnode：上一个虚拟节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'auth'</span>, &#123;<span class="comment">//创建一个自定义指令auth</span></span><br><span class="line"></span><br><span class="line">  inserted(el, binding, vnode, oldVBnode)&#123;<span class="comment">//接收参数</span></span><br><span class="line">    <span class="keyword">let</span> user = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">'user'</span>)</span><br><span class="line">    user = user ? <span class="built_in">JSON</span>.parse(user) : &#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> rules = user.ruleNames ? user.ruleNames : []</span><br><span class="line">    <span class="keyword">let</span> v = rules.find(<span class="function"><span class="params">item</span> =&gt;</span> item === binding.value)</span><br><span class="line">    <span class="keyword">if</span>(!v)&#123;</span><br><span class="line">      el.parentNode.removeChild(el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue 自定义指令-待完善 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-axios实现登陆注册</title>
      <link href="/A-lyc/2020/05/01/vue/vue-axios%E5%AE%9E%E7%8E%B0%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C/"/>
      <url>/A-lyc/2020/05/01/vue/vue-axios%E5%AE%9E%E7%8E%B0%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<p>vue的实现等登录注册，使用vuex来管理登录状态，登录的时候就是接收axios成功把用户名等信息保存起来，之后保存到浏览器的方法内（因为刷新的时候要保证登陆状态是存在的，关闭浏览器的时候登陆状态是没有的，退出登录的是时候登录状态没有，）</p><p>首先通过axios请求来的数据保存到vuex中去，在mutations中定义几个方法，：</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化用户信息</span></span><br><span class="line">    initUser(state)&#123;</span><br><span class="line">      <span class="keyword">let</span> user = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">'user'</span>)</span><br><span class="line">      <span class="keyword">if</span>(user)&#123;</span><br><span class="line">        state.user = <span class="built_in">JSON</span>.parse(user)</span><br><span class="line">        state.token = state.user.token</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'初始化调用成功'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//登录</span></span><br><span class="line">    login(state,user)&#123;</span><br><span class="line">      <span class="comment">//保存登录的状态</span></span><br><span class="line">      state.user = user;</span><br><span class="line">      state.token = user.token</span><br><span class="line">      <span class="comment">//存储到本地当中</span></span><br><span class="line">      <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">'user'</span>, <span class="built_in">JSON</span>.stringify(state.user))</span><br><span class="line">      <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">'token'</span>, <span class="built_in">JSON</span>.stringify(state.token))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//退出登录</span></span><br><span class="line">    logout(state)&#123;</span><br><span class="line">      <span class="comment">//清除状态</span></span><br><span class="line">      state.user = &#123;&#125;</span><br><span class="line">      state.token = <span class="string">''</span></span><br><span class="line">      <span class="comment">//清除本地存储</span></span><br><span class="line">      <span class="built_in">window</span>.sessionStorage.clear()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>浏览器的sessionStorage方法刷新之后不会被清理（暂时理解）：<br>window.sessionStorage.getItem =&gt; 读取，获取<br>window.sessionStorage.setItem =&gt; 写入<br>window.sessionStorage.clear =&gt; 清除</p><p>登录使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">submit() &#123;</span><br><span class="line">   <span class="keyword">this</span>.$refs.ruleForm.validate(<span class="function"><span class="params">e</span> =&gt;</span> &#123;<span class="comment">//框架表单验证</span></span><br><span class="line">     <span class="keyword">if</span> (!e) <span class="keyword">return</span>;</span><br><span class="line">     <span class="comment">// 提交表单</span></span><br><span class="line">     <span class="keyword">this</span>.axios</span><br><span class="line">       .post(<span class="string">"url"</span>, <span class="keyword">this</span>.form)<span class="comment">//post请求传入的用户名和信息给后端验证之后返回数据</span></span><br><span class="line">       .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="comment">//请求成功打印的数据</span></span><br><span class="line">         <span class="built_in">console</span>.log(res);</span><br><span class="line">         <span class="comment">//存储到本地 //成功之后存储vuex中方法为login</span></span><br><span class="line">         <span class="keyword">this</span>.$store.commit(<span class="string">"login"</span>, res.data.data);</span><br><span class="line">         <span class="comment">//成功提示</span></span><br><span class="line">         <span class="keyword">this</span>.$message(<span class="string">"登陆成功"</span>);</span><br><span class="line">         <span class="comment">//跳转到后台</span></span><br><span class="line">         <span class="keyword">this</span>.$router.push(&#123;<span class="attr">name</span>:<span class="string">'index'</span>&#125;)</span><br><span class="line">       &#125;)</span><br><span class="line">       .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (err.response.data &amp;&amp; err.response.data.errorCode) &#123;</span><br><span class="line">           <span class="keyword">this</span>.$message.error(err.response.data.msg);</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>退出使用vuex</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">logout() &#123;</span><br><span class="line">      <span class="keyword">this</span>.axios</span><br><span class="line">        .post(</span><br><span class="line">          <span class="string">"/admin/logout"</span>,</span><br><span class="line">          &#123;&#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            headers: &#123;</span><br><span class="line">              token: <span class="keyword">this</span>.user.token</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//退出登陆状态和储存</span></span><br><span class="line">          <span class="keyword">this</span>.$store.commit(<span class="string">"logout"</span>);</span><br><span class="line">          <span class="comment">//返回登录页</span></span><br><span class="line">          <span class="keyword">this</span>.$router.push(&#123; <span class="attr">name</span>: <span class="string">"login"</span> &#125;);</span><br><span class="line">          <span class="built_in">console</span>.log(res);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (err.response.data &amp;&amp; err.response.data.errorCode) &#123;</span><br><span class="line"><span class="keyword">this</span>.$message.error(err.response.data.msg);</span><br><span class="line"><span class="comment">//退出登陆状态和储存</span></span><br><span class="line">            <span class="keyword">this</span>.$store.commit(<span class="string">"logout"</span>);</span><br><span class="line">            <span class="comment">//返回登录页</span></span><br><span class="line">            <span class="keyword">this</span>.$router.push(&#123; <span class="attr">name</span>: <span class="string">"login"</span> &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue 登录注册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>router内的query和params</title>
      <link href="/A-lyc/2020/04/30/vue/router%E5%86%85%E7%9A%84query%E5%92%8Cparams/"/>
      <url>/A-lyc/2020/04/30/vue/router%E5%86%85%E7%9A%84query%E5%92%8Cparams/</url>
      
        <content type="html"><![CDATA[<p>this.$route.query和this.$route.params的使用：this.$route.query根据path来找查在url上有显示的，params根据name来找查在url上没有显示</p><a id="more"></a><h3 id="一、this-route-query的使用"><a href="#一、this-route-query的使用" class="headerlink" title="一、this.$route.query的使用,"></a>一、this.$route.query的使用,</h3><p>1、router/index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">path:&#39;&#x2F;mtindex&#39;,</span><br><span class="line">component: mtindex,</span><br><span class="line">&#x2F;&#x2F;添加路由</span><br><span class="line">    children:[</span><br><span class="line">    &#123;</span><br><span class="line">        path:&#39;:shopid&#39;,</span><br><span class="line">        component:guessdetail</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>2、传参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this.$router.push(&#123;</span><br><span class="line">      path: &#39;&#x2F;mtindex&#x2F;detail&#39;, </span><br><span class="line">      query:&#123;shopid: item.id&#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>3、获取参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$route.query.shopid</span><br></pre></td></tr></table></figure><p>4、url的表现形式(url中带有参数)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;#&#x2F;mtindex&#x2F;detail?shopid&#x3D;1</span><br></pre></td></tr></table></figure><h3 id="二、this-route-params"><a href="#二、this-route-params" class="headerlink" title="二、this.$route.params"></a>二、this.$route.params</h3><p>1、router/index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path:&#39;&#x2F;mtindex&#39;,</span><br><span class="line">    component: mtindex,</span><br><span class="line">    &#x2F;&#x2F;添加路由</span><br><span class="line">        children:[</span><br><span class="line">        &#123;</span><br><span class="line">            path:&quot;&#x2F;detail&quot;,</span><br><span class="line">            name:&#39;detail&#39;,</span><br><span class="line">            component:guessdetail</span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>2、传参数（ params相对应的是name query相对应的是path）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this.$router.push(&#123;</span><br><span class="line">      name: &#39;detail&#39;, </span><br><span class="line">      params:&#123;shopid: item.id&#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>3、获取参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$route.params.shopid</span><br></pre></td></tr></table></figure><p>4、url的表现形式(url中没带参数)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;#&#x2F;mtindex</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://www.jianshu.com/p/5deb7e90af76" target="_blank" rel="noopener">https://www.jianshu.com/p/5deb7e90af76</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue实现批量删除使用的数组方法</title>
      <link href="/A-lyc/2020/04/28/vue/vue%E5%AE%9E%E7%8E%B0%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E4%BD%BF%E7%94%A8%E7%9A%84%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
      <url>/A-lyc/2020/04/28/vue/vue%E5%AE%9E%E7%8E%B0%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E4%BD%BF%E7%94%A8%E7%9A%84%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>定义一个方法，之后取到全部的数组，循环遍历使用forEch方法找到有没有符合条件的，（没有返回-1），之后使用findIndedx方法遍历和原数组进行对比，有的话返回一个原数组的索引值，这个索引值有的话forEach这个的值不会返回-1，之后判断，有这个索引进行删除，没有跳过</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">deleteAll()&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="keyword">this</span>.multipleSelection.forEach(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> index = <span class="keyword">this</span>.tableData.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      item.id === res.id</span><br><span class="line">    &#125;)<span class="comment">//返回数组的索引值</span></span><br><span class="line">    <span class="keyword">if</span>(index !== <span class="number">-1</span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.tableData.splice(index,<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">    <span class="keyword">this</span>.multipleSelection = [] <span class="comment">//情况循环中的数组</span></span><br><span class="line">  <span class="built_in">console</span>.log(arr)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue 批量删除 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tinymce富文本编辑器</title>
      <link href="/A-lyc/2020/04/25/%E6%8F%92%E4%BB%B6/tinymce%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/A-lyc/2020/04/25/%E6%8F%92%E4%BB%B6/tinymce%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>富文本编辑器的使用方法，官网参考：<a href="https://www.tiny.cloud/，在vue中使用，参考如下" target="_blank" rel="noopener">https://www.tiny.cloud/，在vue中使用，参考如下</a></p><a id="more"></a><h4 id="安装tinymce"><a href="#安装tinymce" class="headerlink" title="安装tinymce"></a>安装tinymce</h4><blockquote><p>npm install tinymce -S</p></blockquote><h5 id="安装tinymce-vue"><a href="#安装tinymce-vue" class="headerlink" title="安装tinymce-vue"></a>安装tinymce-vue</h5><blockquote><p>npm install @tinymce/tinymce-vue -S</p></blockquote><h4 id="下载中文语言包"><a href="#下载中文语言包" class="headerlink" title="下载中文语言包"></a>下载中文语言包</h4><p>tinymce提供了很多的语言包，这里我们下载中文语言包<br>地址：<a href="https://www.tiny.cloud/get-tiny/language-packages/" target="_blank" rel="noopener">https://www.tiny.cloud/get-tiny/language-packages/</a></p><h6 id="下载完后放到静态文件public目录下"><a href="#下载完后放到静态文件public目录下" class="headerlink" title="下载完后放到静态文件public目录下"></a>下载完后放到静态文件public目录下</h6><p>1、在public目录下新建tinymce，将上面下载的语言包解压到该目录<br>2、在node_modules里面找到tinymce,将skins目录复制到public/tinymce里面</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/A-lyc/A-lyc/2020/04/25/%E6%8F%92%E4%BB%B6/tinymce%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/01.png" alt="image" title>                </div>                <div class="image-caption">image</div>            </figure><h4 id="tinymce使用"><a href="#tinymce使用" class="headerlink" title="tinymce使用"></a>tinymce使用</h4><h5 id="封装成组件"><a href="#封装成组件" class="headerlink" title="封装成组件"></a>封装成组件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;tinymce-box&quot;&gt;</span><br><span class="line">        &lt;editor v-model&#x3D;&quot;myValue&quot;</span><br><span class="line">          :init&#x3D;&quot;init&quot;</span><br><span class="line">          :disabled&#x3D;&quot;disabled&quot;</span><br><span class="line">          @onClick&#x3D;&quot;onClick&quot;&gt;</span><br><span class="line">        &lt;&#x2F;editor&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import tinymce from &#39;tinymce&#x2F;tinymce&#39; &#x2F;&#x2F;tinymce默认hidden，不引入不显示</span><br><span class="line">import Editor from &#39;@tinymce&#x2F;tinymce-vue&#39;</span><br><span class="line">import &#39;tinymce&#x2F;themes&#x2F;silver&#39;</span><br><span class="line">&#x2F;&#x2F; 编辑器插件plugins</span><br><span class="line">&#x2F;&#x2F; 更多插件参考：https:&#x2F;&#x2F;www.tiny.cloud&#x2F;docs&#x2F;plugins&#x2F;</span><br><span class="line">import &#39;tinymce&#x2F;plugins&#x2F;image&#39;&#x2F;&#x2F; 插入上传图片插件</span><br><span class="line">import &#39;tinymce&#x2F;plugins&#x2F;media&#39;&#x2F;&#x2F; 插入视频插件</span><br><span class="line">import &#39;tinymce&#x2F;plugins&#x2F;table&#39;&#x2F;&#x2F; 插入表格插件</span><br><span class="line">import &#39;tinymce&#x2F;plugins&#x2F;lists&#39;&#x2F;&#x2F; 列表插件</span><br><span class="line">import &#39;tinymce&#x2F;plugins&#x2F;wordcount&#39;&#x2F;&#x2F; 字数统计插件</span><br><span class="line">export default &#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        Editor</span><br><span class="line">    &#125;,</span><br><span class="line">    name:&#39;tinymce&#39;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        value: &#123;</span><br><span class="line">          type: String,</span><br><span class="line">          default: &#39;&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        disabled: &#123;</span><br><span class="line">          type: Boolean,</span><br><span class="line">          default: false</span><br><span class="line">        &#125;,</span><br><span class="line">        plugins: &#123;</span><br><span class="line">          type: [String, Array],</span><br><span class="line">          default: &#39;lists image media table wordcount&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        toolbar: &#123;</span><br><span class="line">          type: [String, Array],</span><br><span class="line">          default: &#39;undo redo |  formatselect | bold italic forecolor backcolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | lists image media table | removeformat&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            init: &#123;</span><br><span class="line">                language_url: &#39;&#x2F;tinymce&#x2F;langs&#x2F;zh_CN.js&#39;,</span><br><span class="line">                language: &#39;zh_CN&#39;,</span><br><span class="line">                skin_url: &#39;&#x2F;tinymce&#x2F;skins&#x2F;ui&#x2F;oxide&#39;,</span><br><span class="line">                &#x2F;&#x2F; skin_url: &#39;tinymce&#x2F;skins&#x2F;ui&#x2F;oxide-dark&#39;,&#x2F;&#x2F;暗色系</span><br><span class="line">                height: 300,</span><br><span class="line">                plugins: this.plugins,</span><br><span class="line">                toolbar: this.toolbar,</span><br><span class="line">                branding: false,</span><br><span class="line">                menubar: false,</span><br><span class="line">                &#x2F;&#x2F; 此处为图片上传处理函数，这个直接用了base64的图片形式上传图片，</span><br><span class="line">                &#x2F;&#x2F; 如需ajax上传可参考https:&#x2F;&#x2F;www.tiny.cloud&#x2F;docs&#x2F;configure&#x2F;file-image-upload&#x2F;#images_upload_handler</span><br><span class="line">                images_upload_handler: (blobInfo, success, failure) &#x3D;&gt; &#123;</span><br><span class="line">                  const img &#x3D; &#39;data:image&#x2F;jpeg;base64,&#39; + blobInfo.base64()</span><br><span class="line">                  success(img)</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              myValue: this.value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">        tinymce.init(&#123;&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        &#x2F;&#x2F; 添加相关的事件，可用的事件参照文档&#x3D;&gt; https:&#x2F;&#x2F;github.com&#x2F;tinymce&#x2F;tinymce-vue &#x3D;&gt; All available events</span><br><span class="line">        &#x2F;&#x2F; 需要什么事件可以自己增加</span><br><span class="line">        onClick (e) &#123;</span><br><span class="line">          this.$emit(&#39;onClick&#39;, e, tinymce)</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 可以添加一些自己的自定义事件，如清空内容</span><br><span class="line">        clear () &#123;</span><br><span class="line">          this.myValue &#x3D; &#39;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        value (newValue) &#123;</span><br><span class="line">          this.myValue &#x3D; newValue</span><br><span class="line">        &#125;,</span><br><span class="line">        myValue (newValue) &#123;</span><br><span class="line">          this.$emit(&#39;input&#39;, newValue)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h5 id="组件引用"><a href="#组件引用" class="headerlink" title="组件引用"></a>组件引用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;home&quot;&gt;</span><br><span class="line">    &lt;tinymce</span><br><span class="line">        ref&#x3D;&quot;editor&quot;</span><br><span class="line">        v-model&#x3D;&quot;msg&quot;</span><br><span class="line">        :disabled&#x3D;&quot;disabled&quot;</span><br><span class="line">        @onClick&#x3D;&quot;onClick&quot;</span><br><span class="line">    &#x2F;&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;clear&quot;&gt;清空内容&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;disabled &#x3D; true&quot;&gt;禁用&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F;引用上面新建的组件</span><br><span class="line">import tinymce from &#39;@&#x2F;components&#x2F;tinymce.vue&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#39;home&#39;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        tinymce</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            msg: &#39;Welcome to Use Tinymce Editor&#39;,</span><br><span class="line">                    disabled: false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        &#x2F;&#x2F; 鼠标单击的事件</span><br><span class="line">        onClick (e, editor) &#123;</span><br><span class="line">            console.log(&#39;Element clicked&#39;)</span><br><span class="line">            console.log(e)</span><br><span class="line">            console.log(editor)</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 清空内容</span><br><span class="line">        clear () &#123;</span><br><span class="line">            this.$refs.editor.clear()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 资源,插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
            <tag> tinymce富文本编辑器 </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue的依赖注入provide，inject</title>
      <link href="/A-lyc/2020/04/24/vue/vue%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
      <url>/A-lyc/2020/04/24/vue/vue%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>vue中使用很频繁的组件可以使用依赖注入的形式去编写，就是在一个公共文件，或者根组件app.vue中定义一个样式，之后使用provide(){return {}}的方法进行导出，之后在子组件中使用inject:[“”]进行导入，下面是举例子说明</p><a id="more"></a><p>App.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;app&quot;,</span><br><span class="line">  &#x2F;&#x2F;依赖注入&#x2F;&#x2F;依赖注入，给全局注册一个依赖</span><br><span class="line">  provide()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      app:this,&#x2F;&#x2F;当前的额this就是app全局可调用app.show即可调用show的方法</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      imageModel: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    show()&#123;</span><br><span class="line">      this.imageModel &#x3D; true</span><br><span class="line">    &#125;,</span><br><span class="line">    confirm()&#123;</span><br><span class="line">      this.imageModel &#x3D; false</span><br><span class="line">    &#125;,</span><br><span class="line">    hide()&#123;</span><br><span class="line">      this.imageModel &#x3D; false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>子组件：使用注入的依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">inject:[&#39;app&#39;],</span><br><span class="line">methods:&#123;</span><br><span class="line">  isShow()&#123;</span><br><span class="line">    console,log(this.app.show)&#x2F;&#x2F;这个值是上面App.vue中定义的一个函数</span><br><span class="line">    console,log(this.app.imageModel)&#x2F;&#x2F; false   因为上文中data中定义的是一个false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 全局依赖注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>watch的理解</title>
      <link href="/A-lyc/2020/04/23/vue/watch%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/A-lyc/2020/04/23/vue/watch%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>watch在vue的文档中是这样解释的。<br>一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()，遍历 watch 对象的每一个属性。</p><a id="more"></a><p>值是包括选项的对象：选项包括有三个。<br>第一个handler：其值是一个回调函数。即监听到变化时应该执行的函数。（内可以监听watch的变化如下：）<br>第二个是deep：其值是true或false；确认是否深入监听。（一般监听时是不能监听到对象属性值的变化的，数组的值变化可以听到。）<br>第三个是immediate：其值是true或false；确认是否以当前的初始值执行handler的函数（进入页面就开始 监听）。</p><p>$watch可以观察 Vue 实例变化的一个表达式或计算属性函数：<br>1.监听属性的变化，两个参数，参数1：要监听的对象;<br>参数2：监听的函数，函数中有两个参数，变化后的新值，变化之前的旧值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">"Site Logo Script- Click here for a DHTML script that creates a static logo image, positioned in the lower right corner of the browser."</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">"DHTML, Geocities watermark logo, logo script, static image, DHTML tutorial, free, JavaScript"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Dynamic Drive DHTML Scripts- Featured Image Zoomer<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>changeNum: &#123;&#123;changeNum&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>watchNum: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"watchNum"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            还可以这么写</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"example1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="actionscript">                watchNum: <span class="string">'张三'</span>,</span></span><br><span class="line"><span class="actionscript">                otherNum: <span class="string">' / '</span>,</span></span><br><span class="line"><span class="actionscript">                changeNum: <span class="string">' '</span>,</span></span><br><span class="line"><span class="actionscript">                example1: <span class="string">' '</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">            watch: &#123;</span><br><span class="line">                watchNum: &#123;</span><br><span class="line">                    handler(newVal, oldVal) &#123;</span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.changeNum = <span class="keyword">this</span>.watchNum + <span class="keyword">this</span>.otherNum + newVal + <span class="string">'---'</span> + oldVal;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="keyword">this</span>.changeNum)</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//全部的值 张三 / 张三 ---undefined -- 输入（李四）改变的时候值：张三李四 / 张三李四 ---张三</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="keyword">this</span>.watchNum)</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//张三 -- 改变的时候：张三李四</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="keyword">this</span>.otherNum)</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// "/"  改变的收 / </span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(newVal)</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//张三 改变的时候：张三李四</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(oldVal)</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//undefined 改变的时候：张三</span></span></span><br><span class="line"></span><br><span class="line">                    &#125;,</span><br><span class="line"><span class="actionscript">                    immediate: <span class="literal">true</span>,<span class="comment">//页面监听开始的时候就直接调用：见上文解释</span></span></span><br><span class="line"><span class="actionscript">                    deep: <span class="literal">true</span>,<span class="comment">//见上文解释</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            example1: <span class="string">"exampleMethods"</span>,</span></span><br><span class="line">            methods: &#123;</span><br><span class="line">                exampleMethods(newVal, oldVal) &#123;</span><br><span class="line">                    conosle.log(newVal, oldVal)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue watch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中的slot-scope=scope</title>
      <link href="/A-lyc/2020/04/19/vue/vue%E4%B8%AD%E7%9A%84slot-scope-scope/"/>
      <url>/A-lyc/2020/04/19/vue/vue%E4%B8%AD%E7%9A%84slot-scope-scope/</url>
      
        <content type="html"><![CDATA[<p>在vue中使用插槽,有匿名插槽,具名插槽,还有一个具有数据的插槽,就是说可以读取插槽上传来的数据,和实例data上的数据不会冲突<br>匿名插槽:<slot></slot>,没有命名的外部直接使用,定义一个子组件可以直接向插槽内输入内容<br>具名插槽:<slot name="name"></slot>,具名插槽,外部需要<div slot="name">使用</div></p><a id="more"></a><p>数据插槽:<br>组件定义插槽</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;下面是一个slot&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;slot a&#x3D;&quot;123&quot; b&#x3D;&quot;msg&quot; &gt;&lt;&#x2F;slot&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>使用:slot-scope=”scope”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;mysolt&gt;</span><br><span class="line">&lt;template slot-scope&#x3D;&quot;scope&quot;&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;scope&#125;&#125;&lt;&#x2F;div&gt;&#x2F;&#x2F; a&#x3D;&quot;123&quot; b&#x3D;&quot;456&quot;</span><br><span class="line">    &lt;div&gt;&#123;&#123;scope.a&#125;&#125;&lt;&#x2F;div&gt;&#x2F;&#x2F; 123</span><br><span class="line">    &lt;div&gt;&#123;&#123;scope.b&#125;&#125;&lt;&#x2F;div&gt;&#x2F;&#x2F; 456</span><br><span class="line">  &lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;mysolt&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue 插槽 slot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue过滤器语法</title>
      <link href="/A-lyc/2020/04/17/vue/vue%E8%BF%87%E6%BB%A4%E5%99%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/A-lyc/2020/04/17/vue/vue%E8%BF%87%E6%BB%A4%E5%99%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在双花括号中 --&gt;</span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在 &#96;v-bind&#96; 中 --&gt;</span><br><span class="line">&lt;div v-bind:id&#x3D;&quot;rawId | formatId&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>你可以在一个组件的选项中定义本地的过滤器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filters: &#123;</span><br><span class="line">  capitalize: function (value) &#123;</span><br><span class="line">    if (!value) return &#39;&#39;</span><br><span class="line">    value &#x3D; value.toString()</span><br><span class="line">    return value.charAt(0).toUpperCase() + value.slice(1)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者在创建 Vue 实例之前全局定义过滤器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(&#39;capitalize&#39;, function (value) &#123;</span><br><span class="line">  if (!value) return &#39;&#39;</span><br><span class="line">  value &#x3D; value.toString()</span><br><span class="line">  return value.charAt(0).toUpperCase() + value.slice(1)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当全局过滤器和局部过滤器重名时，会采用局部过滤器。</p><p>下面这个例子用到了 capitalize 过滤器：</p><p>john</p><p>过滤器函数总接收表达式的值 (之前的操作链的结果) 作为第一个参数。在上述例子中，capitalize 过滤器函数将会收到 message 的值作为第一个参数。</p><p>过滤器可以串联：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，filterA 被定义为接收单个参数的过滤器函数，表达式 message 的值将作为参数传入到函数中。然后继续调用同样被定义为接收单个参数的过滤器函数 filterB，将 filterA 的结果传递到 filterB 中。</p><p>过滤器是 JavaScript 函数，因此可以接收参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA(&#39;arg1&#39;, arg2) &#125;&#125;</span><br></pre></td></tr></table></figure><p>这里，filterA 被定义为接收三个参数的过滤器函数。其中 message 的值作为第一个参数，普通字符串 ‘arg1’ 作为第二个参数，表达式 arg2 的值作为第三个参数。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue 过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算属性中的get和set以及watch的router，本地缓存问题</title>
      <link href="/A-lyc/2020/04/16/vue/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E4%B8%AD%E7%9A%84get%E5%92%8Cset%E4%BB%A5%E5%8F%8Awatch%E7%9A%84router/"/>
      <url>/A-lyc/2020/04/16/vue/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E4%B8%AD%E7%9A%84get%E5%92%8Cset%E4%BB%A5%E5%8F%8Awatch%E7%9A%84router/</url>
      
        <content type="html"><![CDATA[<p>在vue中计算属性有两个值，一个是获取，一个是写入，大部分使用的都是计算属性中的获取功能，少部分使用写入这个功能，这个本人不太懂，知道有这个东西，它可以改变获取的值，不走data的逻辑，set可以间接修改get里面的值，页面直接修改get内的值是修改不了的</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    slideMenusActive: &#123;</span><br><span class="line">      get() &#123;</span><br><span class="line">        return this.tabBars.list[this.tabBars.active].submenuActive || &quot;0&quot;;</span><br><span class="line">      &#125;,&#x2F;&#x2F;获取</span><br><span class="line">      set(val) &#123;</span><br><span class="line">        console.log(val)</span><br><span class="line">        this.tabBars.list[this.tabBars.active].submenuActive &#x3D; val;</span><br><span class="line">      &#125;&#x2F;&#x2F;写入</span><br><span class="line">    &#125;,</span><br><span class="line">    slideMenus() &#123;</span><br><span class="line">      return this.tabBars.list[this.tabBars.active].submenu || [];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在watch中使用router的时候需要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  &#x2F;&#x2F;获取$route的路由，to是当前from是最后</span><br><span class="line">     &#39;$route&#39;(to,from)&#123;</span><br><span class="line">        &#x2F;&#x2F;下面方法是本地存储--刷新之后还是当前页面 localStorage.setItem(&#39;navActive&#39;,JSON.stringify(&#123;to:&#39;&#39;,from:&#39;&#39;&#125;)</span><br><span class="line">        localStorage.setItem(&#39;navActive&#39;,JSON.stringify(&#123;</span><br><span class="line">           top:this.tabBars.active,</span><br><span class="line">           left:this.slideMenusActive</span><br><span class="line">           </span><br><span class="line">        &#125;))</span><br><span class="line">        console.log(to,from)</span><br><span class="line">      this.getRouterBran()</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上面有本地存储，就要有获取才对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">__initNavBar()&#123;</span><br><span class="line">  &#x2F;&#x2F;获取本地存储   自定义的值要一样navActive</span><br><span class="line">  let r &#x3D;  localStorage.getItem(&#39;navActive&#39;)</span><br><span class="line">  if(r)&#123;</span><br><span class="line">    r &#x3D; JSON.parse(r)</span><br><span class="line">    this.tabBars.active &#x3D; r.top</span><br><span class="line">    this.slideMenusActive &#x3D; r.left</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue get和set以及watch的router 本地缓存问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序授权登录</title>
      <link href="/A-lyc/2020/04/12/%E5%BE%AE%E4%BF%A1/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8E%88%E6%9D%83%E7%99%BB%E5%BD%95/"/>
      <url>/A-lyc/2020/04/12/%E5%BE%AE%E4%BF%A1/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8E%88%E6%9D%83%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>页面中使用点击登录，bottom点击的时候授权登录open-type=”getUserInfo”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button open-type&#x3D;&quot;getUserInfo&quot; bindgetuserinfo&#x3D;&quot;onGetUserInfo&quot;&gt;&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><p>在页面加载的时候可以onload的时候可以调用<br>微信小程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取用户信息</span><br><span class="line">   wx.getSetting(&#123;</span><br><span class="line">     success: res &#x3D;&gt; &#123;</span><br><span class="line">       &#x2F;&#x2F;res.authSetting[&#39;scope.userInfo&#39;]这个值是一个true不然不走授权逻辑</span><br><span class="line">       if (res.authSetting[&#39;scope.userInfo&#39;]) &#123;</span><br><span class="line">         &#x2F;&#x2F; 已经授权，可以直接调用 getUserInfo 获取头像昵称，不会弹框</span><br><span class="line">         wx.getUserInfo(&#123;</span><br><span class="line">           success: res &#x3D;&gt; &#123;</span><br><span class="line">             this.setData(&#123;</span><br><span class="line">               avatarUrl: res.userInfo.avatarUrl,</span><br><span class="line">               userInfo: res.userInfo,</span><br><span class="line">             &#125;)</span><br><span class="line">             &#x2F;&#x2F;其他参数打印可见</span><br><span class="line">             console.log(res)</span><br><span class="line">           &#125;,</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     fail:() &#x3D;&gt;&#123;</span><br><span class="line">       console.log(&quot;授权失败&quot;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p>和onload同级别-上面就可以完成登录授权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">onGetUserInfo: function(e) &#123;</span><br><span class="line">  if (!this.data.logged &amp;&amp; e.detail.userInfo) &#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      logged: true,</span><br><span class="line">      avatarUrl: e.detail.userInfo.avatarUrl,</span><br><span class="line">      userInfo: e.detail.userInfo</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"> console.log(e)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> 微信小程序授权登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp数据请求封装应用</title>
      <link href="/A-lyc/2020/04/11/uniapp/uniapp%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85%E5%BA%94%E7%94%A8/"/>
      <url>/A-lyc/2020/04/11/uniapp/uniapp%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<ul><li><p>uniapp数据请求封装，存到公共文件夹内，之后引入,内有介绍，挺详细的</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">&#x2F;&#x2F; 全局配置</span><br><span class="line">common:&#123;</span><br><span class="line">    &#x2F;&#x2F;请求网址</span><br><span class="line">baseUrl:&quot;http:&#x2F;&#x2F;www.wangzhi.cn&#x2F;api&quot;,</span><br><span class="line">&#x2F;&#x2F;header头</span><br><span class="line">    header:&#123;</span><br><span class="line">&#39;Content-Type&#39;:&#39;application&#x2F;json;charset&#x3D;UTF-8&#39;,</span><br><span class="line">&#39;Content-Type&#39;:&#39;application&#x2F;x-www-form-urlencoded&#39;</span><br><span class="line">&#125;,</span><br><span class="line">    &#x2F;&#x2F;数据</span><br><span class="line">data:&#123;&#125;,</span><br><span class="line">    &#x2F;&#x2F;请求方式</span><br><span class="line">method:&#39;GET&#39;,</span><br><span class="line">    &#x2F;&#x2F;请求格式</span><br><span class="line">dataType:&#39;json&#39;</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F; 请求 返回promise</span><br><span class="line">request(options &#x3D; &#123;&#125;)&#123;</span><br><span class="line">&#x2F;&#x2F; 组织参数</span><br><span class="line">options.url &#x3D; this.common.baseUrl + options.url</span><br><span class="line">options.header &#x3D; options.header || this.common.header</span><br><span class="line">options.data &#x3D; options.data || this.common.data</span><br><span class="line">options.method &#x3D; options.method || this.common.method</span><br><span class="line">options.dataType &#x3D; options.dataType || this.common.dataType</span><br><span class="line">&#x2F;&#x2F; 请求</span><br><span class="line">return new Promise((res,rej)&#x3D;&gt;&#123;</span><br><span class="line">&#x2F;&#x2F; 请求之前... todo</span><br><span class="line">&#x2F;&#x2F; 请求中...</span><br><span class="line">uni.request(&#123;</span><br><span class="line">...options,</span><br><span class="line">success: (result) &#x3D;&gt; &#123;</span><br><span class="line">&#x2F;&#x2F; 服务端失败</span><br><span class="line">if(result.statusCode !&#x3D;&#x3D; 200)&#123;</span><br><span class="line">uni.showToast(&#123;</span><br><span class="line">title: result.data.msg || &#39;服务端失败&#39;,</span><br><span class="line">icon: &#39;none&#39;</span><br><span class="line">&#125;);</span><br><span class="line">return rej() </span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 请求成功</span><br><span class="line">let data &#x3D; result.data.data</span><br><span class="line">res(data)</span><br><span class="line">&#125;,</span><br><span class="line">        &#x2F;&#x2F; 请求失败</span><br><span class="line">fail: (error) &#x3D;&gt; &#123;</span><br><span class="line">uni.showToast(&#123;</span><br><span class="line">title: error.errMsg || &#39;请求失败&#39;,</span><br><span class="line">icon: &#39;none&#39;</span><br><span class="line">&#125;);</span><br><span class="line">return rej()</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F; get请求</span><br><span class="line">get(url,data &#x3D; &#123;&#125;,options &#x3D; &#123;&#125;)&#123;</span><br><span class="line">options.url &#x3D; url</span><br><span class="line">options.data &#x3D; data</span><br><span class="line">options.method &#x3D; &#39;GET&#39;</span><br><span class="line">return this.request(options)</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F; post请求</span><br><span class="line">post(url,data &#x3D; &#123;&#125;,options &#x3D; &#123;&#125;)&#123;</span><br><span class="line">options.url &#x3D; url</span><br><span class="line">options.data &#x3D; data</span><br><span class="line">options.method &#x3D; &#39;POST&#39;</span><br><span class="line">return this.request(options)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>get请求，不传递参数</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;定义的变量和url</span><br><span class="line">$H.get(&#39;&#x2F;index_category&#x2F;data&#39;).then((res) &#x3D;&gt;&#123;</span><br><span class="line">console.log(&quot;请求成功&quot;)</span><br><span class="line">&#125;).catch(() &#x3D;&gt;&#123;</span><br><span class="line">console.log(&#39;请求失败&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>使用1:请求的时候传递参数过去post和get</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let R &#x3D; await $H.get(&#39;&#x2F;index_category&#x2F;data&#39;,&#123;name:this.name,age:this.age&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;给&#x2F;index_category&#x2F;data传输参数，post请求传输的是name，age，传过去的参数返回是一个Promise可以使用.then接收</span><br><span class="line">this.$H.post(&#39;&#x2F;index_category&#x2F;data&#39;,&#123;name:this.name,age:this.age&#125;).then(res &#x3D;&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用2:需要引入之后自定义一个名称，</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$H.request(&#123;</span><br><span class="line">  &#x2F;&#x2F; 网址后面拼接的地址可拼接</span><br><span class="line">url:&#39;&#x2F;index_category&#x2F;data&#39; + this.id + &#39;&#x2F;data&#x2F;&#39; + this.iid,</span><br><span class="line">&#125;).then((res) &#x3D;&gt;&#123;</span><br><span class="line">console.log(&quot;请求成功&quot;)</span><br><span class="line">&#125;).catch(() &#x3D;&gt;&#123;</span><br><span class="line">console.log(&#39;请求失败&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue axios的get请求接收，传递</title>
      <link href="/A-lyc/2020/04/11/vue/vue%E7%9A%84get%E8%AF%B7%E6%B1%82%E6%8E%A5%E6%94%B6%EF%BC%8C%E4%BC%A0%E9%80%92/"/>
      <url>/A-lyc/2020/04/11/vue/vue%E7%9A%84get%E8%AF%B7%E6%B1%82%E6%8E%A5%E6%94%B6%EF%BC%8C%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<p>上次文章有封装好的axios 使用vue封装好的网络请求，可以通过引入的方式进行网络请求，就是引用：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; getDetail, Goods, DetailActive, DetailInfo &#125; from &quot;@&#x2F;network&#x2F;detail&quot;;</span><br></pre></td></tr></table></figure><p>在methods里面处理好之后，在页面加载完成发出网络请求，<br>如何接收网络请求，上次封装有的<br>使用promise.then(()=&gt;{}).catch(()=&gt;{})的方式。之后使用this保存值</p><p>如何返回值传入的时候有变动的参数进行拼接，使用params：{type，page….}等进行拼接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export function getDetail(iid)&#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: &#39;&#x2F;detail&#39;,</span><br><span class="line">    params:&#123;</span><br><span class="line">      iid</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GET：在methods里面处理的时候可以：异步函数（参数1，参数2）进行传输参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getHomeGoods(type) &#123;</span><br><span class="line">      let page &#x3D; 1</span><br><span class="line">      getHomeGoods(type, page).then(res &#x3D;&gt; &#123;</span><br><span class="line">        this.goods[type].list.push(...res.data.list);</span><br><span class="line">        this.goods[type].page +&#x3D; 1;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结合router使用，比如点击进入详情页，可以通过改变router的值改变你url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;点击传入</span><br><span class="line">this.$router.push(&#39;&#x2F;detail&#x2F;&#39;+this.goodsItem.iid)</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;router接收</span><br><span class="line">  path: &#39;&#x2F;detail&#x2F;:iid&#39;,</span><br><span class="line">  name: &#39;Detail&#39;,</span><br><span class="line">  component: Detail</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;打开页面找到url上拼接的id</span><br><span class="line"> this.iid &#x3D; this.$route.params.iid;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;发出网络请求，把iid传入，请求iid的数据</span><br><span class="line">getDetail(this.iid).then(res &#x3D;&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure><p>之后页面加载前取到url上的iid，获取方法：this.iid = this.$route.params.iid;（当前页面：route）之后使用把值代入函数的参数内传输给后端，（获取的时候要有一个params：{type，page….}）拼接的值，然后后端返回这个链接随对应的数据</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios基础使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp请求数据的方法</title>
      <link href="/A-lyc/2020/04/11/uniapp/uniapp%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/A-lyc/2020/04/11/uniapp/uniapp%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">__init()&#123;</span><br><span class="line">uni.request(</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;第一种</span><br><span class="line">url:&quot;http:&#x2F;&#x2F;ceshi3.dishait.cn&#x2F;api&#x2F;index_category&#x2F;data&quot;,</span><br><span class="line">method:&#39;GET&#39;,</span><br><span class="line">data:&#123;&#125;,</span><br><span class="line">success: (res) &#x3D;&gt; &#123;</span><br><span class="line">console.log(res)</span><br><span class="line">&#125;,</span><br><span class="line">fail: () &#x3D;&gt; &#123;</span><br><span class="line">console.log(&quot;请求失败&quot;)</span><br><span class="line">&#125;,</span><br><span class="line">complete: () &#x3D;&gt; &#123;</span><br><span class="line">console.log(&quot;请求完成&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;&#x2F;第二种prominse</span><br><span class="line">uni.request(&#123;</span><br><span class="line">url:&quot;http:&#x2F;&#x2F;ceshi3.dishait.cn&#x2F;api&#x2F;index_category&#x2F;data&quot;,</span><br><span class="line">method:&quot;GET&quot;</span><br><span class="line">&#125;).then(data &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">let [reeor,result] &#x3D; data</span><br><span class="line">console.log(reeor)&#x2F;&#x2F;错误的时候</span><br><span class="line">console.log(result)&#x2F;&#x2F;正确的时候</span><br><span class="line"></span><br><span class="line">if(reeor)&#123;</span><br><span class="line">return console.log(&quot;错误&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(result.statusCode !&#x3D;&#x3D; 200)&#123;</span><br><span class="line">return console.log(&quot;请求错误&quot;)</span><br><span class="line">&#125;</span><br><span class="line">console.log(result.data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第三种需要在函数最前面加async 是一个异步便同步的配合await这个使用</span><br><span class="line">let [error,result] &#x3D;  await uni.request(&#123;</span><br><span class="line">url:&quot;http:&#x2F;&#x2F;ceshi3.dishait.cn&#x2F;api&#x2F;index_category&#x2F;data&quot;,</span><br><span class="line">method:&quot;GET&quot;</span><br><span class="line">&#125;)</span><br><span class="line">if(error)&#123;</span><br><span class="line">return console.log(&quot;错误&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(result.statusCode !&#x3D;&#x3D; 200)&#123;</span><br><span class="line">return console.log(&quot;请求错误&quot;)</span><br><span class="line">&#125;</span><br><span class="line">let data &#x3D; result.data.data</span><br><span class="line"></span><br><span class="line">console.log(data)</span><br><span class="line">&#x2F;&#x2F;初始化tab</span><br><span class="line">this.tabBars &#x3D; data.category</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;初始化页面</span><br><span class="line">this.newsitems &#x3D; this.setNewsitems(data)</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信发送数据请求</title>
      <link href="/A-lyc/2020/04/07/%E5%BE%AE%E4%BF%A1/%E5%BE%AE%E4%BF%A1%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/"/>
      <url>/A-lyc/2020/04/07/%E5%BE%AE%E4%BF%A1/%E5%BE%AE%E4%BF%A1%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<p>uniapp和微信的类似，发送请求方式</p><a id="more"></a><p>微信</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  wx.request(&#123;</span><br><span class="line">&#x2F;&#x2F;传输的url</span><br><span class="line">  url: app.globalData.requestUrl,&#x2F;&#x2F;轮播图</span><br><span class="line">      &#x2F;&#x2F;后端给的参数值action后端给的请求放发</span><br><span class="line">      data: &#123;</span><br><span class="line">        action: &#39;taglib&#39;,</span><br><span class="line">        dopost: &#39;focus&#39;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;自己给后端传输的参数</span><br><span class="line">        data: &#39;123&#39;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;&#x2F;请求方式</span><br><span class="line">      method: &quot;post&quot;,</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F;post请求的三种方式之一</span><br><span class="line">      header: &#123;</span><br><span class="line">      &#39;content-type&#39;: &#39;application&#x2F;x-www-form-urlencoded&#39;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F;成功的时候</span><br><span class="line">      success: function (data) &#123;</span><br><span class="line">      &#x2F;&#x2F; console.log(data)</span><br><span class="line">      that.setData(&#123;</span><br><span class="line">      imgUrls: data.data.data,</span><br><span class="line">      &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;&#x2F;失败的时候</span><br><span class="line">      fail: function (data) &#123;</span><br><span class="line">      console.log(data)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#x2F;&#x2F;无论成功与失败</span><br><span class="line">      complete:() &#x3D;&gt;&#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>uniapp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">uni.request(&#123;</span><br><span class="line">    url: &#39;https:&#x2F;&#x2F;www.example.com&#x2F;request&#39;, &#x2F;&#x2F;仅为示例，并非真实接口地址。</span><br><span class="line">    data: &#123;</span><br><span class="line">        text: &#39;uni.request&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    header: &#123;</span><br><span class="line">        &#39;custom-header&#39;: &#39;hello&#39; &#x2F;&#x2F;自定义请求头信息</span><br><span class="line">    &#125;,</span><br><span class="line">    success: (res) &#x3D;&gt; &#123;</span><br><span class="line">        console.log(res.data);</span><br><span class="line">        this.text &#x3D; &#39;request success&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> 微信发送数据请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router官方说明</title>
      <link href="/A-lyc/2020/04/07/vue/vue-router%E5%AE%98%E6%96%B9%E8%AF%B4%E6%98%8E/"/>
      <url>/A-lyc/2020/04/07/vue/vue-router%E5%AE%98%E6%96%B9%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>我们经常需要把某种模式匹配到的所有路由，全都映射到同个组件。例如，我们有一个 User 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中使用“动态路径参数”(dynamic segment) 来达到这个效果：</p><a id="more"></a><h3 id="官方文档说明"><a href="#官方文档说明" class="headerlink" title="官方文档说明"></a>官方文档说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const User &#x3D; &#123;</span><br><span class="line">  template: &#39;&lt;div&gt;User&lt;&#x2F;div&gt;&#39;</span><br><span class="line">&#125;</span><br><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#x2F;&#x2F; 动态路径参数 以冒号开头</span><br><span class="line">    &#123; path: &#39;&#x2F;user&#x2F;:id&#39;, component: User &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在呢，像 /user/foo 和 /user/bar 都将映射到相同的路由。</p><p>一个“路径参数”使用冒号 : 标记。当匹配到一个路由时，参数值会被设置到 this.$route.params，可以在每个组件内使用。于是，我们可以更新 User 的模板，输出当前用户的 ID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const User &#x3D; &#123;</span><br><span class="line">  template: &#39;&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;&#x2F;div&gt;&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以在一个路由中设置多段“路径参数”，对应的值都会设置到 $route.params 中。例如：<br>模式，匹配路径，$route.params</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;user&#x2F;:username&#x2F;user&#x2F;evan&#123; username: &#39;evan&#39; &#125;</span><br><span class="line">&#x2F;user&#x2F;:username&#x2F;post&#x2F;:post_id&#x2F;user&#x2F;evan&#x2F;post&#x2F;123&#123; username: &#39;evan&#39;, post_id: &#39;123&#39; &#125;</span><br></pre></td></tr></table></figure><p>除了 $route.params 外，$route 对象还提供了其它有用的信息，例如，$route.query (如果 URL 中有查询参数)、$route.hash 等等。你可以查看 API 文档 的详细说明。</p><h3 id="使用编程式的添加路由"><a href="#使用编程式的添加路由" class="headerlink" title="使用编程式的添加路由"></a>使用编程式的添加路由</h3><p>如果提供了 path，params 会被忽略，上述例子中的 query 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 name 或手写完整的带有参数的 path：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const userId &#x3D; &#39;123&#39;</span><br><span class="line">router.push(&#123; name: &#39;user&#39;, params: &#123; userId &#125;&#125;) &#x2F;&#x2F; -&gt; &#x2F;user&#x2F;123</span><br><span class="line">router.push(&#123; path: &#96;&#x2F;user&#x2F;$&#123;userId&#125;&#96; &#125;) &#x2F;&#x2F; -&gt; &#x2F;user&#x2F;123</span><br><span class="line">&#x2F;&#x2F; 这里的 params 不生效</span><br><span class="line">router.push(&#123; path: &#39;&#x2F;user&#39;, params: &#123; userId &#125;&#125;) &#x2F;&#x2F; -&gt; &#x2F;user</span><br></pre></td></tr></table></figure><p>router.replace(location, onComplete?, onAbort?)<br>跟 router.push 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录。</p><p>声明式    编程式<br><router-link :to="..." replace>    router.replace(…)<br>#router.go(n)</router-link></p><h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><p>有时候，通过一个名称来标识一个路由显得更方便一些，特别是在链接一个路由，或者是执行一些跳转的时候。你可以在创建 Router 实例的时候，在 routes 配置中给某个路由设置名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;user&#x2F;:userId&#39;,</span><br><span class="line">      name: &#39;user&#39;,</span><br><span class="line">      component: User</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">要链接到一个命名路由，可以给 router-link 的 to 属性传一个对象：</span><br><span class="line"></span><br><span class="line">&lt;router-link :to&#x3D;&quot;&#123; name: &#39;user&#39;, params: &#123; userId: 123 &#125;&#125;&quot;&gt;User&lt;&#x2F;router-link&gt;</span><br><span class="line">这跟代码调用 router.push() 是一回事：</span><br></pre></td></tr></table></figure><p>router.push({ name: ‘user’, params: { userId: 123 }})<br>这两种方式都会把路由导航到 /user/123 路径</p><h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><p>你可以创建一个函数返回 props。这样你便可以将参数转换成另一种类型，将静态值与基于路由的值结合等等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: &#39;&#x2F;search&#39;, component: SearchUser, props: (route) &#x3D;&gt; (&#123; query: route.query.q &#125;) &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>URL /search?q=vue 会将 {query: ‘vue’} 作为属性传递给 SearchUser 组件。</p><p>请尽可能保持 props 函数为无状态的，因为它只会在路由发生变化时起作用。如果你需要状态来定义 props，请使用包装组件，这样 Vue 才可以对状态变化做出反应。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue $router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp组件之间的传递</title>
      <link href="/A-lyc/2020/04/04/uniapp/uniapp%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BC%A0%E9%80%92/"/>
      <url>/A-lyc/2020/04/04/uniapp/uniapp%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<h3 id="uniapp监听事件"><a href="#uniapp监听事件" class="headerlink" title="uniapp监听事件"></a>uniapp监听事件</h3><ul><li>原生导航搜索按钮点击事件,可以和data同级别</li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onNavigationBarButtonTap() &#123;</span><br><span class="line">uni.navigateTo(&#123;</span><br><span class="line">url:&#39;..&#x2F;SearchList&#x2F;SearchList&#39;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>点击搜索框事件，可以和data同级别<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">uni.onNavigationBarSearchInputClicked(() &#x3D;&gt;&#123;</span><br><span class="line">uni.navigateTo(&#123;</span><br><span class="line">url:&#39;..&#x2F;search&#x2F;search&#39;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(123)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>uniapp里面的组件之间传递信息数据，如何接收数据<h4 id="父组件传递给子组件，使用popst：-和vue一样传递方式"><a href="#父组件传递给子组件，使用popst：-和vue一样传递方式" class="headerlink" title="父组件传递给子组件，使用popst：{}和vue一样传递方式"></a>父组件传递给子组件，使用popst：{}和vue一样传递方式</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;父组件传递mag给子组件，mag定义到实例上的</span><br><span class="line">&lt;view :magess&#x3D;&quot;mag&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;子组件接收，实例上接收,和定义在data中的方法一样使用</span><br><span class="line">popst:&#123;</span><br><span class="line">  magess:&#123;</span><br><span class="line">    type:Objest,</span><br><span class="line">    default()&#123;</span><br><span class="line">      return &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子组件传递给父组件this-emit"><a href="#子组件传递给父组件this-emit" class="headerlink" title="子组件传递给父组件this.$emit"></a>子组件传递给父组件this.$emit</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;z子组件定义事件$emit()发出事件</span><br><span class="line">this.$emit(&#39;magess&#39;,&#123;name:name,aeg:age&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;父组件接收事件</span><br><span class="line">&lt;view @magess&#x3D;&quot;mag&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;操作传来的事件信息</span><br><span class="line">mag(e)&#123;</span><br><span class="line">console.log(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="uni-emit和uni-on页面之间传递应该是可以传输vue之间的页面，保证传输tab的页面"><a href="#uni-emit和uni-on页面之间传递应该是可以传输vue之间的页面，保证传输tab的页面" class="headerlink" title="uni.$emit和uni.$on页面之间传递应该是可以传输vue之间的页面，保证传输tab的页面"></a>uni.$emit和uni.$on页面之间传递应该是可以传输vue之间的页面，保证传输tab的页面</h4><p>uni.$off 销毁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;页面上定义事件</span><br><span class="line">uni.$emit(&#39;magess&#39;,&#123;name:name,aeg:age&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;另外的页面进行接收，最好使用箭头函数</span><br><span class="line">uni.$on(&#39;magess&#39;,(e) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(e)</span><br><span class="line">  &#x2F;&#x2F;这里的this可以直接访问data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="全局事件总件"><a href="#全局事件总件" class="headerlink" title="全局事件总件"></a>全局事件总件</h3><p>定义一个js文件，文件内是全局事件触发存储的，类似于vuex</p><blockquote><p>实例<br>在 uni-app 项目根目录下创建 common 目录，然后在 common 目录下新建 helper.js 用于定义公用的方法。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const now &#x3D; Date.now || function () &#123;  </span><br><span class="line">    return new Date().getTime();  </span><br><span class="line">&#125;;  </span><br><span class="line">const isArray &#x3D; Array.isArray || function (obj) &#123;  </span><br><span class="line">    return obj instanceof Array;  </span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line">export default &#123;  </span><br><span class="line">    websiteUrl,  </span><br><span class="line">    now,  </span><br><span class="line">    isArray  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来在 pages/index/index.vue 中引用该模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;  </span><br><span class="line">    import helper from &#39;..&#x2F;..&#x2F;common&#x2F;helper.js&#39;;  </span><br><span class="line"></span><br><span class="line">    export default &#123;  </span><br><span class="line">        data() &#123;  </span><br><span class="line">            return &#123;&#125;;  </span><br><span class="line">        &#125;,  </span><br><span class="line">        onLoad()&#123;  </span><br><span class="line">            console.log(&#39;now:&#39; + helper.now());  </span><br><span class="line">        &#125;,  </span><br><span class="line">        methods: &#123;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>这种方式维护起来比较方便，但是缺点就是每次都需要引入。</p><h3 id="全局变量globalData"><a href="#全局变量globalData" class="headerlink" title="全局变量globalData"></a>全局变量globalData</h3><p>小程序中有个globalData概念，可以在 App 上声明全局变量。 Vue 之前是没有这类概念的，但 uni-app 引入了globalData概念，并且在包括H5、App等平台都实现了。<br>在 App.vue 可以定义 globalData ，也可以使用 API 读写这个值。<br>globalData支持vue和nvue共享数据。<br>globalData是一种比较简单的全局变量使用方式。<br>定义：App.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;  </span><br><span class="line">    export default &#123;  </span><br><span class="line">        globalData: &#123;  </span><br><span class="line">            text: &#39;text&#39;  </span><br><span class="line">        &#125;,  </span><br><span class="line">        onLaunch: function() &#123;  </span><br><span class="line">            console.log(&#39;App Launch&#39;)  </span><br><span class="line">        &#125;,  </span><br><span class="line">        onShow: function() &#123;  </span><br><span class="line">            console.log(&#39;App Show&#39;)  </span><br><span class="line">        &#125;,  </span><br><span class="line">        onHide: function() &#123;  </span><br><span class="line">            console.log(&#39;App Hide&#39;)  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&lt;&#x2F;script&gt;  </span><br><span class="line"></span><br><span class="line">&lt;style&gt;  </span><br><span class="line">    &#x2F;*每个页面公共css *&#x2F;  </span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>js中操作globalData的方式如下：<br>赋值：getApp().globalData.text = ‘test’<br>取值：console.log(getApp().globalData.text) // ‘test’</p><p>修改上一个页面的数据<br>getCurrentPages() 函数用于获取当前页面栈的实例，以数组形式按栈的顺序给出，第一个元素为首页，最后一个元素为当前页面。（首页点击之后进入一个页面，这个页面点击之后进入下一个，这个函数会生成三个，以此类推），当点击底部的时候是一底部的为首页进入的 </p>]]></content>
      
      
      <categories>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/A-lyc/2020/04/03/js/Promise/"/>
      <url>/A-lyc/2020/04/03/js/Promise/</url>
      
        <content type="html"><![CDATA[<p>使用方法:Promise需要接收两个函数作为参数，分别代表then（成功）和catch（失败）<br>new Promise本身是一个对象，里面有个函数，函数内有两个返回值分是then（成功）和catch（失败）<br>jq使用promise多个请求嵌套，为了防止回调地狱</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;&#125;</span><br><span class="line">$.<span class="keyword">get</span>('url').then( res =&gt; &#123;</span><br><span class="line">    <span class="comment">// 返回的第一个请求数据存到data中去名字data1</span></span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    data.data1 = res</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在进行网络请求，</span></span><br><span class="line">    <span class="keyword">return</span> $<span class="keyword">get</span>('url')</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">    <span class="comment">// 接受第二个请求的参数存储到data中去名字data2</span></span><br><span class="line">    data.data2 = res</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出data</span></span><br><span class="line">    <span class="built_in">console</span>.log(data) <span class="comment">// data:&#123;data1:res,data2:res&#125;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><ul><li>new Promise本身不是一个异步操作，但是内部是一个异步的函数传入</li><li>.then(res=&gt;{return 12})当你return一个12的时候下一个then接受的参数就是12，当retuen一个Promise的时候接受的是res(data)的回调函数<a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise一旦创建直接执行内部的函数代码内部是一个异步的代码</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res,rej</span>)=&gt;</span>&#123;</span><br><span class="line">fs.readFile(<span class="string">'./data/a.txt'</span>,<span class="string">'utf8'</span>,(err,data)=&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">       <span class="comment">// 把容器的pending的状态改为rejected状态 = 就是失败状态</span></span><br><span class="line">        rej(err)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 把容器的pending的状态改为resolve状态 = 就是成功状态</span></span><br><span class="line">        res(data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// res就是上面return后的值</span></span><br><span class="line">      <span class="keyword">return</span> res + <span class="number">1</span> <span class="comment">// 输出2</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// res就是上面return后的值</span></span><br><span class="line">          <span class="keyword">return</span> res + <span class="number">1</span> <span class="comment">// 输出3</span></span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">rej</span> =&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const pro &#x3D; new Promise(res,rej &#x3D;&gt;&#123;</span><br><span class="line">    &#x2F;&#x2F;进行异步处理，这里使用定时器代替</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F;下面两个只执行一个，这里可以进行处理两个变量</span><br><span class="line">        rej(&#39;rej&#39;)&#x2F;&#x2F;失败的时候返回</span><br><span class="line">        res(&#39;我没错&#39;)&#x2F;&#x2F;成功的时候返回</span><br><span class="line">    &#125;, 200);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">pro.then(res &#x3D;&gt; &#123;</span><br><span class="line">       console.log(res)&#x2F;&#x2F;接收成功的值</span><br><span class="line">   </span><br><span class="line">   &#125;).catch(err &#x3D;&gt; &#123;</span><br><span class="line">       console.log(err)&#x2F;&#x2F;接收失败的时候的值</span><br><span class="line">   </span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p>Promise.all(iterable)<br>这个方法返回一个新的promise对象，该promise对象在iterable参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。Promise.all方法常被用于处理多个promise对象的状态集合。（可以参考jQuery.when方法—译者注）</p><p>Promise.race(iterable)<br>当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。</p><p>Promise.reject(reason)<br>返回一个状态为失败的Promise对象，并将给定的失败信息传递给对应的处理方法</p><p>Promise.resolve(value)<br>返回一个状态由给定value决定的Promise对象。如果该值是thenable(即，带有then方法的对象)，返回的Promise对象的最终状态由then方法执行决定；否则的话(该value为空，基本类型或者不带then方法的对象),返回的Promise对象状态为fulfilled，并且将该value传递给对应的then方法。通常而言，如果你不知道一个值是否是Promise对象，使用Promise.resolve(value) 来返回一个Promise对象,这样就能将该value以Promise对象形式使用。</p><p>试想一个页面聊天系统，我们需要从两个不同的URL分别获得用户的个人信息和好友列表，这两个任务是可以并行执行的，用Promise.all()实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var p1 &#x3D; new Promise(function (resolve, reject) &#123;</span><br><span class="line">    setTimeout(resolve, 500, &#39;P1&#39;);</span><br><span class="line">&#125;);</span><br><span class="line">var p2 &#x3D; new Promise(function (resolve, reject) &#123;</span><br><span class="line">    setTimeout(resolve, 600, &#39;P2&#39;);</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 同时执行p1和p2，并在它们都完成后执行then:</span><br><span class="line">Promise.all([p1, p2]).then(function (results) &#123;</span><br><span class="line">    console.log(results); &#x2F;&#x2F; 获得一个Array: [&#39;P1&#39;, &#39;P2&#39;]</span><br><span class="line">&#125;);</span><br><span class="line">有些时候，多个异步任务是为了容错。比如，同时向两个URL读取用户的个人信息，只需要获得先返回的结果即可。这种情况下，用Promise.race()实现：</span><br><span class="line"></span><br><span class="line">var p1 &#x3D; new Promise(function (resolve, reject) &#123;</span><br><span class="line">    setTimeout(resolve, 500, &#39;P1&#39;);</span><br><span class="line">&#125;);</span><br><span class="line">var p2 &#x3D; new Promise(function (resolve, reject) &#123;</span><br><span class="line">    setTimeout(resolve, 600, &#39;P2&#39;);</span><br><span class="line">&#125;);</span><br><span class="line">Promise.race([p1, p2]).then(function (result) &#123;</span><br><span class="line">    console.log(result); &#x2F;&#x2F; &#39;P1&#39;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jq小知识点</title>
      <link href="/A-lyc/2020/04/03/js/jq%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/A-lyc/2020/04/03/js/jq%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>//找到元素<br>let $header = $(‘.comp-menu’)</p><p>//全局找到命名这个的元素[data-open=”menu”]<br>let $header = $(‘[data-open=”menu”]’)</p><a id="more"></a><p>//执行事件<br>$header.on(‘click’, function () {})</p><p>//动态添加css样式<br>$header.css(‘opacity’,’1’)</p><p>//可以利用添加删除类来实现动画，动画内不要使用display：none<br>//添加类<br>$headerEl.addClass(‘active’)</p><p>//删除类<br>$headerEl.removeClass(‘active’)</p><p>//获取卷曲距离<br>$(window).on(‘scroll’, function () {</p><pre><code>//获取Y轴卷曲的距离console.log(window.pageYOffset)</code></pre><p>})</p>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli3.0脚手架搭建项目vant</title>
      <link href="/A-lyc/2020/04/02/vue/vue%E8%84%9A%E6%89%8B%E6%9E%B6%E5%BC%95%E5%85%A5vant/"/>
      <url>/A-lyc/2020/04/02/vue/vue%E8%84%9A%E6%89%8B%E6%9E%B6%E5%BC%95%E5%85%A5vant/</url>
      
        <content type="html"><![CDATA[<ul><li>node和npm安装完成的情况下，安装vue的3.0脚手架项目，npm i -g @vue/cli ，之后创建项目vue create hello word（项目名称叫hello word），<a id="more"></a><h2 id="有icon的话可以引入"><a href="#有icon的话可以引入" class="headerlink" title="有icon的话可以引入"></a>有icon的话可以引入</h2>// 引入iconfont的样式<br>import ‘./assets/iconfont/iconfont.css’</li></ul><h2 id="安装vant（ui框架）"><a href="#安装vant（ui框架）" class="headerlink" title="安装vant（ui框架）"></a>安装vant（ui框架）</h2><p>npm i vant -S</p><h2 id="引入组件"><a href="#引入组件" class="headerlink" title="引入组件"></a>引入组件</h2><ul><li><p>安装插件<br>npm i babel-plugin-import -D</p></li><li><p>在babel.config.js配置</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    &#39;@vue&#x2F;app&#39;</span><br><span class="line">  ],</span><br><span class="line">  plugins: [</span><br><span class="line">    [&#39;import&#39;, &#123;</span><br><span class="line">      libraryName: &#39;vant&#39;,</span><br><span class="line">      libraryDirectory: &#39;es&#39;,</span><br><span class="line">      style: true</span><br><span class="line">    &#125;, &#39;vant&#39;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在src/main.js配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &#39;.&#x2F;App.vue&#39;</span><br><span class="line">import router from &#39;.&#x2F;router&#39;</span><br><span class="line">import store from &#39;.&#x2F;store&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 引入Vant UI组件的样式</span><br><span class="line">import &#39;vant&#x2F;lib&#x2F;index.css&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 1.引入axios</span><br><span class="line">import axios from &#39;axios&#39;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip &#x3D; false</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.把axios绑定到vue实例的属性$axios</span><br><span class="line">Vue.prototype.$axios &#x3D; axios</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: h &#x3D;&gt; h(App)</span><br><span class="line">&#125;).$mount(&#39;#app&#39;)</span><br></pre></td></tr></table></figure><h2 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;home&quot;&gt;</span><br><span class="line">    home</span><br><span class="line">    &lt;div class&#x3D;&quot;iconfont icon-iconfonthome0&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;van-button type&#x3D;&quot;primary&quot;&gt;主要按钮&lt;&#x2F;van-button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Vue from &quot;vue&quot;;</span><br><span class="line">import &#123; Button &#125; from &quot;vant&quot;;</span><br><span class="line">Vue.use(Button);</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;home&quot;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F;使用axios</span><br><span class="line">    this.$axios</span><br><span class="line">      .get(&quot;https:&#x2F;&#x2F;www.xxx.com&quot;)</span><br><span class="line">      .then(res &#x3D;&gt; &#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style lang&#x3D;&quot;less&quot; scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 使用vant-UI库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jq获取卷曲出的距离</title>
      <link href="/A-lyc/2020/04/02/js/jq%E8%8E%B7%E5%8F%96%E5%8D%B7%E6%9B%B2%E5%87%BA%E7%9A%84%E8%B7%9D%E7%A6%BB/"/>
      <url>/A-lyc/2020/04/02/js/jq%E8%8E%B7%E5%8F%96%E5%8D%B7%E6%9B%B2%E5%87%BA%E7%9A%84%E8%B7%9D%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<p>使用jq获取卷曲的距离，秦哥脚手架</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let $headerEl &#x3D; $(&#39;.comp-header&#39;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取window的卷曲函数</span><br><span class="line">$(window).on(&#39;scroll&#39;, function () &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;判断卷曲距离window.pageYOffset获取卷曲的距离</span><br><span class="line">  if (window.pageYOffset !&#x3D;&#x3D; 0) &#123;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F;使用添加类删除类的方式</span><br><span class="line">    $headerEl.addClass(&#39;active&#39;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    $headerEl.removeClass(&#39;active&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端模块化脚手架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端脚手架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3.0解决跨域问题</title>
      <link href="/A-lyc/2020/03/31/vue/vue%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/A-lyc/2020/03/31/vue/vue%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在vue的vue.config.js（自己创建的）里面进行添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">      proxy: &#123;</span><br><span class="line">        <span class="string">'/api'</span>: &#123;</span><br><span class="line">          target: <span class="string">'https://www.XXXXXXXXX.com/'</span>,</span><br><span class="line">          changeOrigin: <span class="literal">true</span>,</span><br><span class="line">          ws: <span class="literal">true</span>,</span><br><span class="line">          pathRewrite: &#123;</span><br><span class="line">            <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候，发送网络请求：需要/api/请求地址</p><p>自己封装的axios：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1.创建axios的实例</span></span><br><span class="line">  <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">'/api'</span>,</span><br><span class="line">    <span class="comment">// '/api': 'https://www.XXXXXXXXX.com/',</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.axios的拦截器</span></span><br><span class="line">  <span class="comment">// 2.1.请求拦截的作用</span></span><br><span class="line">  instance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,err =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> err.data</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.2.响应拦截</span></span><br><span class="line">  instance.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.data</span><br><span class="line">  &#125;,err =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> err.data</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.发送真正的网络请求</span></span><br><span class="line">  <span class="keyword">return</span> instance(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用网络请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123;request&#125; from &quot;.&#x2F;request&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;前面的api是地址必加</span><br><span class="line">export function getCeshi()&#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: &#39;&#x2F;api&#x2F;XXX.php&#39;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">export function getArea(city,area)&#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: &#39;&#x2F;api&#x2F;XXX.php&#39;,</span><br><span class="line">    params:&#123;</span><br><span class="line">      city,</span><br><span class="line">      area</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6之async和await同步异步</title>
      <link href="/A-lyc/2020/03/30/js/ES6%E4%B9%8Basync%E5%92%8Cawait%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5/"/>
      <url>/A-lyc/2020/03/30/js/ES6%E4%B9%8Basync%E5%92%8Cawait%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<p>async和await是用来处理异步的。即你需要异步像同步一样执行，需要异步返回结果之后，再往下依据结果继续执行。<br>async 是“异步”的简写，而 await 可以认为是 async wait 的简写。<br>async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。<br>async 它用的是try/catch 来捕获异常，把await 放到 try 中进行执行，如有异常，就使用catch 进行处理。<br>async返回值是一个Promise 对象，也就是说可以调用then()</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">async</span><br><span class="line">async function testAsync() &#123;</span><br><span class="line">    return &quot;hello async&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const result &#x3D; testAsync();</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p>打印输出的是一个Promise 对象，async 函数会返回一个 Promise 对象。<br>在最外层不能用 await 获取其返回值的情况下，使用 then() 链来处理这个 Promise 对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">testAsync().then(v &#x3D;&gt; &#123;</span><br><span class="line">    console.log(v);    &#x2F;&#x2F; 输出 hello async</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当 async 函数没有返回值时，返回 Promise.resolve(undefined)</p><p>await<br>await只能放在async函数内部使用</p><p>await 用于一个异步操作之前，表示要“等待”这个异步操作的返回值。<br>await 也可以用于一个同步的值。</p><p>如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。<br>如果它等到的是一个 Promise 对象，await 就会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。</p><p>同步代码</p><p>const a = await ‘hello world’<br>// 相当于<br>const a = await Promise.resolve(‘hello world’);<br>// 所以直接写同步代码即可，不需要await关键字<br>const a = ‘hello world’;<br>异步代码</p><p>// 2s 之后返回双倍的值<br>function doubleAfter2seconds(num) {<br>    return new Promise((resolve, reject) =&gt; {<br>        setTimeout(() =&gt; {<br>            resolve(2 * num)<br>        }, 2000);<br>    })<br>}</p><p>async function testResult () {<br>    let result = await doubleAfter2seconds(30);<br>    console.log(result);<br>}</p><p>testResult();<br>// 2s 之后，输出了60.<br>执行顺序<br>案例一<br>// 2s 之后返回双倍的值<br>function doubleAfter2seconds(num) {<br>    return new Promise((resolve, reject) =&gt; {<br>        setTimeout(() =&gt; {<br>            resolve(2 * num)<br>        }, 2000);<br>    })<br>}</p><p>async function testResult () {<br>    console.log(‘内部调用前’) // 2<br>    let result = await doubleAfter2seconds(30);<br>    console.log(result); // 4<br>    console.log(‘内部调用后’) // 5<br>}</p><p>console.log(‘外部调用前’) // 1<br>testResult();<br>console.log(‘外部调用后’) // 3<br>// — 依次输出<br>// 外部调用前<br>// 内部调用前<br>// 外部调用后<br>// — 2s 之后输出<br>// 60<br>// 内部调用后<br>分析一下上面的执行顺序：<br>1、首先打印输出外部调用前，同步代码，顺序执行。<br>2、然后调用方法testResult()，打印输出内部调用前，同步代码，顺序执行。<br>3、再执行异步方法doubleAfter2seconds，<br>　1&gt;如果没用await关键字，此后的执行顺序应该是<br>　　内部调用后，外部调用后，2s 之后输出60<br>　　因为异步方法不阻塞其他代码的执行，最后再输出60<br>　2&gt;这里使用了await关键字，所以到这里后会等待异步返回结果，再往下执行。<br>4、当testResult函数内部await阻塞执行后，不会影响到testResult函数外面</p><p>async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。</p><p>所以，在调用testResult函数后，会继续向下执行，打印输出外部调用后<br>5、当2s之后，异步函数doubleAfter2seconds执行完成，返回结果，<br>打印输出60<br>6、因为await将异步变成同步，所以在输出60后，同步执行，再输出内部调用后</p><p>案例二<br>代码</p><p>console.log(“1”)<br>异步处理函数：console.log（2）<br>console.log(3)<br>结果</p><p>正常情况 132<br>用async await 123<br>例子<br>// 2s 之后返回双倍的值<br>function doubleAfter2seconds(num) {<br>    return new Promise((resolve, reject) =&gt; {<br>        setTimeout(() =&gt; {<br>            resolve(2 * num)<br>        }, 2000);<br>    })<br>}</p><p>async function testResult () {<br>    let first = await doubleAfter2seconds(10);<br>    let second = await doubleAfter2seconds(20);<br>    console.log(first + second);<br>}<br>错误处理<br>方式一 统一处理<br>// 2s 之后返回双倍的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;不使用async</span><br><span class="line">function doubleAfter2seconds(num) &#123;</span><br><span class="line">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            resolve(2 * num)</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用async</span><br><span class="line">async function testResult () &#123;</span><br><span class="line">    let first &#x3D; await doubleAfter2seconds(10);</span><br><span class="line">    let second &#x3D; await doubleAfter2seconds(20);    </span><br><span class="line">    let res &#x3D; first + second;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testResult().then(res &#x3D;&gt; &#123;</span><br><span class="line">    console.log(res);      </span><br><span class="line">&#125;).catch(error &#x3D;&gt; &#123;</span><br><span class="line">    console.log(error);     </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>方式二 try…catch<br>// 2s 之后返回双倍的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">function doubleAfter2seconds(num) &#123;</span><br><span class="line">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            resolve(2 * num)</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function testResult () &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        let first &#x3D; await doubleAfter2seconds(10);</span><br><span class="line">        let second &#x3D; await doubleAfter2seconds(20);    </span><br><span class="line">        let res &#x3D; first + second;</span><br><span class="line">        return res;</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        console.log(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testResult()</span><br><span class="line">在接口中使用(axios)</span><br><span class="line">created () &#123;</span><br><span class="line">    this.init()</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    async init () &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">          let first &#x3D; await this.getOne();</span><br><span class="line">          let second &#x3D; await this.getTwo();    </span><br><span class="line">          let res &#x3D; first + second;</span><br><span class="line">          console.log(res);</span><br><span class="line">      &#125; catch (error) &#123;</span><br><span class="line">          console.log(error);</span><br><span class="line">      &#125;        </span><br><span class="line">    &#125;,</span><br><span class="line">    getOne () &#123;</span><br><span class="line">        const params &#x3D; &#123;name: &#39;one&#39;&#125;</span><br><span class="line">        return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">            axios.get(&#39;&#x2F;one&#39;, &#123; params&#125;).then((res) &#x3D;&gt; &#123;</span><br><span class="line">                if (res.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">                    resolve(res)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).catch((err) &#x3D;&gt; &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    getTwo () &#123;</span><br><span class="line">        const params &#x3D; &#123;name: &#39;two&#39;&#125;</span><br><span class="line">        return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">            axios.get(&#39;&#x2F;two&#39;, &#123; params&#125;).then((res) &#x3D;&gt; &#123;</span><br><span class="line">                if (res.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">                    resolve(res)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).catch((err) &#x3D;&gt; &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>它用的是try/catch 来捕获异常，把await 放到 try 中进行执行，如有异常，就使用catch 进行处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; async&#x2F;await</span><br><span class="line">async function show()&#123;</span><br><span class="line">    let a &#x3D; 12;</span><br><span class="line">    let b &#x3D; 4;</span><br><span class="line">    try&#123;</span><br><span class="line">        let data &#x3D; await $.ajax(&#123;url:&#39;data&#x2F;1.txt&#39;,dataType:&#39;json&#39;&#125;);</span><br><span class="line">        console.log(&quot;async-try&quot;,data);</span><br><span class="line">    &#125;catch(e)&#123;</span><br><span class="line">        console.log(&quot;async-catch&quot;,e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">show();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> await async </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js找不到this问题</title>
      <link href="/A-lyc/2020/03/30/js/js%E6%89%BE%E4%B8%8D%E5%88%B0this%E9%97%AE%E9%A2%98/"/>
      <url>/A-lyc/2020/03/30/js/js%E6%89%BE%E4%B8%8D%E5%88%B0this%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>  在函数中找不到this的问题，可以重新定义一个this指向，that指向最外层data中this的this</p></blockquote><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">async selectGuwen (project_id) &#123;</span><br><span class="line">        var that &#x3D; this</span><br><span class="line">        that.showGuwen &#x3D; true</span><br><span class="line">        that.list_id &#x3D; project_id</span><br><span class="line">        uni.request(&#123;</span><br><span class="line">          url: &#39;&#39;,</span><br><span class="line">          data: &#123;</span><br><span class="line">            action: &#39;adviser&#39;,</span><br><span class="line">            dopost: &#39;adviser_list&#39;,</span><br><span class="line">            openid:this.openId,</span><br><span class="line">            project_id:project_id</span><br><span class="line">          &#125;,</span><br><span class="line">          method: &quot;post&quot;,</span><br><span class="line">          header: &#123;</span><br><span class="line">            &#39;content-type&#39;: &#39;application&#x2F;x-www-form-urlencoded&#39;</span><br><span class="line">          &#125;,</span><br><span class="line">          success: function (data) &#123;</span><br><span class="line">            console.log(data)</span><br><span class="line">&lt;!-- this.guwenData &#x3D; data.data.data --&gt;</span><br><span class="line">&#x2F;*</span><br><span class="line">*&#x2F;&#x2F;这个位置的this是找不到的，返回undefind&#x2F;&#x2F;指向的是这个父级函数中的data</span><br><span class="line">*找的是async selectGuwen 函数内的guwenData，</span><br><span class="line">*所以在async selectGuwen 重定义一下this，去找data中的this</span><br><span class="line">*&#x2F;</span><br><span class="line">            that.guwenData &#x3D; data.data.data&#x2F;&#x2F;</span><br><span class="line">          &#125;,</span><br><span class="line">          error: function (data) &#123;</span><br><span class="line">            console.log(data)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mixin什么是混入</title>
      <link href="/A-lyc/2020/03/28/vue/mixin%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B7%E5%85%A5/"/>
      <url>/A-lyc/2020/03/28/vue/mixin%E4%BB%80%E4%B9%88%E6%98%AF%E6%B7%B7%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>就是在一个公共的js中可以直接引入梦里面可以定义data，metahds，components，directives等，直接添加到相应的方法内。metahds中会添加子级，但是重名的时候会直接替换</p><a id="more"></a><p>生命周期是可以的<br>有冲突的时候以组件内的优先<br>在外面定义一个js文件如mixin.js<br>导出文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export const timeListenerMiXin&#x2F;&#x2F;导出名称 &#x3D; &#123;</span><br><span class="line">data()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;timeListenerMiXin&#125; from &#39;@&#x2F;common&#x2F;mixin&#39;;</span><br></pre></td></tr></table></figure><p>实例中调用 :   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name: &quot;Detail&quot;,</span><br><span class="line">mixins:[timeListenerMiXin],</span><br></pre></td></tr></table></figure><p>之后MiXin里面的timeListenerMiXin内的组件条件（data，popst等）会应用到导入的组件中，直接使用this可以调用</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> mixin混入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础</title>
      <link href="/A-lyc/2020/03/28/vue/vue%E5%9F%BA%E7%A1%80/"/>
      <url>/A-lyc/2020/03/28/vue/vue%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="vue属性"><a href="#vue属性" class="headerlink" title="vue属性"></a>vue属性</h3><p>methods:{}//定义方法属性<br>computed:{}//计算属性<br>watch:{}//监听属性变化<br>components:{}//模板注册<br>props:{}//获取父组件的数据</p><a id="more"></a><p>生命周期 内可以传输参数created(abc) {}<br>使用前导入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ref, computed, watch, getCurrentInstance,</span><br><span class="line">onMounted,onRenderTracked,onRenderTriggered,</span><br><span class="line">onBeforeMount,onBeforeUpdate,onUpdated,onBeforeUnmount,onUnmounted,</span><br><span class="line">onErrorCaptured&#125; from &quot;vue&quot;;</span><br></pre></td></tr></table></figure><h3 id="setup-：生命周期函数需要在这个函数内执行"><a href="#setup-：生命周期函数需要在这个函数内执行" class="headerlink" title="setup(){} ：生命周期函数需要在这个函数内执行"></a>setup(){} ：生命周期函数需要在这个函数内执行</h3><p>两种形式的生命周期函数可以共存（当然实际使用的时候最好只选用一种），它们都会被执行。Composition API形式的生命周期函数都是在 setup 方法中被调用注册。<br>最后，在实际的开发过程中，请注意一下Options API形式的组件生命周期钩子和Composition API之间的实际对应关系：</p><h3 id="beforeMount-3-0-gt-onBeforeMount"><a href="#beforeMount-3-0-gt-onBeforeMount" class="headerlink" title="beforeMount  3.0=&gt; onBeforeMount"></a>beforeMount  3.0=&gt; onBeforeMount</h3><p>官方说明：在挂载开始之前被调用：相关的 render 函数首次被调用。</p><p>解释：当模板在内存中编译完成，会立即执行实例创建阶段的第三个生命周期函数，这个函数就是beforeMount，此时内存中的模板结构，还没有真正渲染到页面上；此时，页面上看不到真实的数据，用户看到的只是一个模板页面而已；</p><h3 id="mounted-3-0-gt-onMounted"><a href="#mounted-3-0-gt-onMounted" class="headerlink" title="mounted 3.0=&gt; onMounted"></a>mounted 3.0=&gt; onMounted</h3><p>官方说明：el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。 </p><p>解释：mounted是组件创建阶段最后的一个生命周期函数；此时，页面已经真正的渲染好了，用户可以看到真实的页面数据了；当这个生命周期函数执行完，组件就离开了创建阶段，进入到了运行中的阶段；如果大家使用到一些第三方的UI插件，而且这个插件还需要被初始化，那么，必须在mounted中来初始化插件；</p><h3 id="beforeUpdate-3-0-gt-onBeforeUpdate"><a href="#beforeUpdate-3-0-gt-onBeforeUpdate" class="headerlink" title="beforeUpdate 3.0=&gt; onBeforeUpdate"></a>beforeUpdate 3.0=&gt; onBeforeUpdate</h3><p>官方说明：数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p><p>解释：在执行beforeUpdate运行中的生命周期函数的时候，数据肯定是最新的；但是页面上呈现的数据还是旧的</p><h3 id="updated-3-0-gt-onUpdated"><a href="#updated-3-0-gt-onUpdated" class="headerlink" title="updated 3.0=&gt; onUpdated"></a>updated 3.0=&gt; onUpdated</h3><p>官方说明：由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。</p><p>解释：页面也完成了更新，此时，data数据是最新的，同时，页面上呈现的数据也只最新的。</p><h3 id="beforeDestroy-3-0-gt-onBeforeUnmount"><a href="#beforeDestroy-3-0-gt-onBeforeUnmount" class="headerlink" title="beforeDestroy 3.0=&gt; onBeforeUnmount"></a>beforeDestroy 3.0=&gt; onBeforeUnmount</h3><p>官方说明：实例销毁之前调用。在这一步，实例仍然完全可用。</p><p>解释：当执行beforeDestroy的时候，组件即将被销毁，但是还没有真正开始销毁，此时组件还是正常可用的；data、methods等数据或方法，依旧可以被正常访问</p><h3 id="destroyed-3-0-gt-onUnmounted"><a href="#destroyed-3-0-gt-onUnmounted" class="headerlink" title="destroyed 3.0=&gt; onUnmounted"></a>destroyed 3.0=&gt; onUnmounted</h3><p>官方说明：vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p><p>解释：组件已完成了销毁，组件无法使用，data和methods都不可使用。</p><h3 id="errorCaptured-3-0-gt-onErrorCaptured"><a href="#errorCaptured-3-0-gt-onErrorCaptured" class="headerlink" title="errorCaptured 3.0=&gt; onErrorCaptured"></a>errorCaptured 3.0=&gt; onErrorCaptured</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;about&quot;&gt;</span><br><span class="line">    &lt;h1&gt;test count: &#123;&#123; count &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1&gt;test: &#123;&#123; test &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1&gt;computed: &#123;&#123; doubleCount &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1&gt;vuex: &#123;&#123; a &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h1 @click&#x3D;&quot;getgreet&quot;&gt;vue3.0的computed和watch，使用方式&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;add(&#39;1123456465645465&#39;)&quot;&gt;增加&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;update(&#39;1123456465645465&#39;)&quot;&gt;更改&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, computed, watch, getCurrentInstance,</span><br><span class="line">onMounted,onRenderTracked,onRenderTriggered,</span><br><span class="line">onBeforeMount,onBeforeUpdate,onUpdated,onBeforeUnmount,onUnmounted,</span><br><span class="line">onErrorCaptured&#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">       const &#123; ctx &#125; &#x3D; getCurrentInstance(); &#x2F;&#x2F; 获取当前实例</span><br><span class="line">    onBeforeMount(()&#x3D;&gt;&#123;</span><br><span class="line">      console.log(&quot;在挂载开始之前被调用&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    onBeforeUnmount(()&#x3D;&gt;&#123;</span><br><span class="line">      console.log(&quot;实例销毁之前调用&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    onBeforeUpdate(()&#x3D;&gt;&#123;</span><br><span class="line">      console.log(ctx)</span><br><span class="line">      console.log(&quot;数据更新时调用&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUnmounted(()&#x3D;&gt;&#123;</span><br><span class="line">      console.log(&quot;组件已完成了销毁&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    onErrorCaptured(()&#x3D;&gt;&#123;</span><br><span class="line">      console.log(&quot;在错误捕获&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUpdated(()&#x3D;&gt;&#123;</span><br><span class="line">      console.log(ctx)</span><br><span class="line">      console.log(&quot;页面也完成了更新&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    onMounted(() &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&quot;挂载后 &gt;&gt;&gt;&gt;&gt;&gt;01&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    onRenderTracked((e) &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&#39;渲染跟踪&#39;);</span><br><span class="line">      console.log(e);</span><br><span class="line">    &#125;);</span><br><span class="line">    onRenderTriggered((e) &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&#39;渲染 - 触发&#39;)</span><br><span class="line">      console.log(e);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;&#x2F; 页面加载的时候触发</span><br><span class="line">    const count &#x3D; ref(0);</span><br><span class="line"> </span><br><span class="line">    console.log(getCurrentInstance());</span><br><span class="line">    console.log(ctx.$router.currentRoute.value); &#x2F;&#x2F; 获取路由</span><br><span class="line">    const a &#x3D; computed(() &#x3D;&gt; ctx.$store.state.test.a); &#x2F;&#x2F; 计算属性获取vuex上的属性</span><br><span class="line">    const update &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; 修改vuex的信息</span><br><span class="line">      ctx.$store.commit(&quot;setTestA&quot;, count.value * 10);</span><br><span class="line">      console.log(ctx.$store.state.test.a);</span><br><span class="line">    &#125;;</span><br><span class="line">    let test &#x3D; ref(&quot;我们都是好孩子&quot;); &#x2F;&#x2F; 定义test默认显示内容</span><br><span class="line">    const add &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; 点击动作</span><br><span class="line">      test.value &#x3D; &quot;我是好人&quot;; &#x2F;&#x2F; 修改值</span><br><span class="line">      count.value++; &#x2F;&#x2F; count加一</span><br><span class="line">    &#125;;</span><br><span class="line">    &#x2F;&#x2F; function time() &#123;</span><br><span class="line">    &#x2F;&#x2F;   setInterval(()&#x3D;&gt;&#123;</span><br><span class="line">    &#x2F;&#x2F;     count.value++</span><br><span class="line">    &#x2F;&#x2F;   &#125;,100)</span><br><span class="line">    &#x2F;&#x2F; &#125;</span><br><span class="line">    &#x2F;&#x2F; time()</span><br><span class="line">    watch(</span><br><span class="line">      () &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F; 页面加载就读取这个信息 监听属性的变化</span><br><span class="line">        console.log(&quot;---- 1 ----&quot;);</span><br><span class="line">        console.log(count.value);</span><br><span class="line">        count.value;</span><br><span class="line">      &#125;,</span><br><span class="line">      (val) &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&quot;---- 2 ----&quot;);</span><br><span class="line">        console.log(&#96;count is $&#123;val&#125;&#96;);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    const doubleCount &#x3D; computed(() &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; 计算属性获取 count.value * 2</span><br><span class="line">      return count.value * 2;</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">    return &#123;</span><br><span class="line">      &#x2F;&#x2F; 返回定义的对象</span><br><span class="line">      count,</span><br><span class="line">      test,</span><br><span class="line">      doubleCount,</span><br><span class="line">      add,</span><br><span class="line">      a,</span><br><span class="line">      update,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">   mounted() &#123;</span><br><span class="line">     &#x2F;&#x2F; 这个比上面的on要晚</span><br><span class="line">        console.log(&#39;挂载后 &gt;&gt;&gt;&gt;&gt;&gt;02&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getgreet() &#123;</span><br><span class="line">      console.log(&quot;---- methods的点击动作 ----&quot;);</span><br><span class="line">      console.log(this.update);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件传递"><a href="#组件传递" class="headerlink" title="组件传递"></a>组件传递</h3><p>props：父传子<br>ref：子传父//定义到父组件模板上ref=“scroll”  通过this.$refs.scroll<br>emit：子传父//子组件发出事件this.$emit(“scroll”, position);   父组件接收@scroll=””</p><h3 id="事件监听基本使用"><a href="#事件监听基本使用" class="headerlink" title="事件监听基本使用"></a>事件监听基本使用</h3><p>v-once<br>v-html=“”<br>v-text=“”<br>v-cloak<br>v-pre<br>v-bind<br>v-on:<br>v-for=“变量 in 数组或对象”<br>v-if/v-else<br>v-show<br>ladet，点击输入框会有一个聚焦状态<br>v-model=“”数据的双向绑定<br>事件@input=“”</p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>stop；//可以阻止事件冒泡<br>prevent；//阻止系统自动提交<br>.enter；//键盘按下回车事件<br>.native；//组件定义事件的时候使用@cilkc.native=””<br>.once；//只执行一次的事件</p><h3 id="插槽语法"><a href="#插槽语法" class="headerlink" title="插槽语法"></a>插槽语法</h3><p>slot name=”left“单个替换<br>  html使用的时候需要更具名字进行替换例子：<br>  <slot name="left"><button>左边</button></slot><br>  <slot name="btn"><button>按钮</button></slot><br>  <cpn><button slot="btn">1</button></cpn><br>  如果html没有名字，替换模板没有名字的数据—注意模板是给slot一个name=“”    使用的时候是给buttom slot=“”的</p><p>:img加载完成<br>  @load=“方法”</p><h3 id="数据传输给对象需要新加建给对象"><a href="#数据传输给对象需要新加建给对象" class="headerlink" title="数据传输给对象需要新加建给对象"></a>数据传输给对象需要新加建给对象</h3><p>this.res.data = res//data是对象中新加的值</p><h3 id="数据传输给数组的时候需要push进去，或者用数组其他方法"><a href="#数据传输给数组的时候需要push进去，或者用数组其他方法" class="headerlink" title="数据传输给数组的时候需要push进去，或者用数组其他方法"></a>数据传输给数组的时候需要push进去，或者用数组其他方法</h3>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue 基本生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue的axios封装好的</title>
      <link href="/A-lyc/2020/03/28/vue/vue%E7%9A%84axios%E5%B0%81%E8%A3%85%E5%A5%BD%E7%9A%84/"/>
      <url>/A-lyc/2020/03/28/vue/vue%E7%9A%84axios%E5%B0%81%E8%A3%85%E5%A5%BD%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p>下载安装vue - axios ，npm install vue-axios –save，，通过axios和后端链接，获取数据，</p><a id="more"></a><h2 id="新建api文件夹内的index文件"><a href="#新建api文件夹内的index文件" class="headerlink" title="新建api文件夹内的index文件"></a>新建api文件夹内的index文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;git请求</span><br><span class="line">export function request(config) &#123;</span><br><span class="line">  &#x2F;&#x2F; 1.创建axios的实例</span><br><span class="line">  const instance &#x3D; axios.create(&#123;</span><br><span class="line">    baseURL: &#39;网址链接&#39;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 2.axios的拦截器</span><br><span class="line">  &#x2F;&#x2F; 2.1.请求拦截的作用</span><br><span class="line">  instance.interceptors.request.use(config &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&quot;请求拦截器&quot;)</span><br><span class="line">    return config</span><br><span class="line">  &#125;,err &#x3D;&gt; &#123;</span><br><span class="line">    return err.data</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 2.2.响应拦截</span><br><span class="line">  instance.interceptors.response.use(res &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&quot;响应拦截&quot;)</span><br><span class="line">    return res.data</span><br><span class="line">  &#125;,err &#x3D;&gt; &#123;</span><br><span class="line">    return err.data</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 3.发送真正的网络请求</span><br><span class="line">  return instance(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如果后端需要获取数据可传输数据给后端：params-是传输数据的参数-api文件夹内新建文件导入request-即可使用axios"><a href="#如果后端需要获取数据可传输数据给后端：params-是传输数据的参数-api文件夹内新建文件导入request-即可使用axios" class="headerlink" title="如果后端需要获取数据可传输数据给后端：params:是传输数据的参数 - api文件夹内新建文件导入request 即可使用axios"></a>如果后端需要获取数据可传输数据给后端：params:是传输数据的参数 - api文件夹内新建文件导入request 即可使用axios</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import &#123;request&#125; from &quot;.&#x2F;request&quot;;</span><br><span class="line"></span><br><span class="line">export function getHomeMultidata()&#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: &#39;XXX&#39;,</span><br><span class="line">    method:&#39;post&#39;,</span><br><span class="line">    data: &#123;</span><br><span class="line">    firstName: &#39;Fred&#39;,</span><br><span class="line">    lastName: &#39;Flintstone&#39;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; get请求传值</span><br><span class="line">export function getHomeGoods(type,page)&#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: &#39;XXX&#39;,&#x2F;&#x2F;&#96;XXX&gt;?data&#x3D;$&#123;data&#125;&amp;page&#x3D;$&#123;page&#125;&#96;</span><br><span class="line">    &#x2F;&#x2F;传到后端一个type和page获取相应的数据</span><br><span class="line">    params:&#123;</span><br><span class="line">      type,</span><br><span class="line">      page</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用：created生命周期内"><a href="#应用：created生命周期内" class="headerlink" title="应用：created生命周期内"></a>应用：created生命周期内</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> created()&#123;</span><br><span class="line">  this.getHomeMultidata().then(res &#x3D;&gt; &#123;</span><br><span class="line">  console.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="最好这样写："><a href="#最好这样写：" class="headerlink" title="最好这样写："></a>最好这样写：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  getHomeMultidata() &#123;</span><br><span class="line">    getHomeMultidata().then(res &#x3D;&gt; &#123;</span><br><span class="line">      console.log(res);</span><br><span class="line">    &#125;).catch(() &#x3D;&gt; &#123;</span><br><span class="line">      console.log(&#39;请求失败&#39;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"> &#125;,</span><br><span class="line"> created()&#123;</span><br><span class="line">   this.getHomeMultidata()</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="可以封装一个class类来储存数据"><a href="#可以封装一个class类来储存数据" class="headerlink" title="可以封装一个class类来储存数据"></a>可以封装一个class类来储存数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export class Goods&#123;</span><br><span class="line">  constructor(itemInfo)&#123;&#x2F;&#x2F;异步请求之后传来的值</span><br><span class="line">    this.title &#x3D; itemInfo.title&#x2F;&#x2F;this指向当前实例对象</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用：在总的数据请求中把数据给到data中的Goods"><a href="#使用：在总的数据请求中把数据给到data中的Goods" class="headerlink" title="使用：在总的数据请求中把数据给到data中的Goods"></a>使用：在总的数据请求中把数据给到data中的Goods</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.Goods &#x3D; new Goods(res.result.itemInfo&#125;&#x2F;&#x2F;把异步请求到的数据传输给Goods，之后Goods接收之后处理接收的信息</span><br><span class="line">&#x2F;&#x2F; data中的this.Goods进行接收</span><br></pre></td></tr></table></figure><h2 id="常识："><a href="#常识：" class="headerlink" title="常识："></a>常识：</h2><p>导入main.js：import axios from ‘axios’<br>使用：<br>导出：export class Goods{}//导出一个类名为Goods的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">url:&#39;&#39;,</span><br><span class="line">method:&#39;&#39;&#x2F;&#x2F;修改请求方式（个get等）</span><br><span class="line">params:&#123;&#x2F;&#x2F;针对get请求参数拼接</span><br><span class="line">  type:&quot;pop&quot;,</span><br><span class="line">  page:1</span><br><span class="line">&#125;</span><br><span class="line">&#125;).then( res &#x3D;&gt; &#123;</span><br><span class="line">console.log(res)</span><br><span class="line">&#125;).catch(()&#x3D;&gt;&#123;</span><br><span class="line">  console.log(&#39;失败&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>params：{}  get参数拼接的<br>服务器真实返回的是data的数据<br>axis请求方式<br>常见的配置选项<br>请求多个数据，一起返回结果使用axios.all([axios(),axios()]).then(()=&gt;{})///all里面是数组<br>全局配置axios.defaults.baseURL = “”;</p><h2 id="创建实例的axios"><a href="#创建实例的axios" class="headerlink" title="创建实例的axios"></a>创建实例的axios</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const app &#x3D; axios.create(&#123;</span><br><span class="line">       公用的如：baseUrl：&#39;&#39;</span><br><span class="line">   &#125;)</span><br><span class="line">使用：</span><br><span class="line">   app(&#123;</span><br><span class="line">   u   rl:&quot;&quot;,</span><br><span class="line">   &#125;).then(()&#x3D;&gt;&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h2><p>axios(config)</p><p>axios.request(config)</p><p>axios.get(url[, config])</p><p>axios.delete(url[, config])</p><p>axios.head(url[, config])</p><p>axios.post(url[, data[, config]])</p><p>axios.put(url[, data[, config]])</p><p>axios.patch(url[, data[, config]])</p><p>常见的配置<br>请求地址<br>url: ‘/user’,</p><p>请求类型<br>method: ‘get’,</p><p>请根路径<br>baseURL: ‘<a href="http://www.baidu.com/api&#39;" target="_blank" rel="noopener">http://www.baidu.com/api&#39;</a>,</p><p>请求前的数据处理<br>transformRequest:[function(data){}],</p><p>请求后的数据处理<br>transformResponse: [function(data){}],</p><p>自定义的请求头<br>headers:{‘x-Requested-With’:’XMLHttpRequest’},</p><p>URL查询对象<br>params:{ id: 12 },</p><p>查询对象序列化函数<br>paramsSerializer: function(params){ }<br>request body<br>data: { key: ‘aa’},</p><p>超时设置s<br>timeout: 1000,</p><p>跨域是否带Token<br>withCredentials: false,</p><p>自定义请求处理<br>adapter: function(resolve, reject, config){},</p><p>身份验证信息<br>auth: { uname: ‘’, pwd: ‘12’},</p><p>响应的数据格式 json / blob /document /arraybuffer / text / stream<br>responseType: ‘json’,</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue axios封装基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>$router使用方法</title>
      <link href="/A-lyc/2020/03/28/vue/router%E4%BD%BF%E7%94%A8%E6%96%B9%E5%8F%91/"/>
      <url>/A-lyc/2020/03/28/vue/router%E4%BD%BF%E7%94%A8%E6%96%B9%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>我们可以在任何组件内通过 this.$router 访问路由器，也可以通过 this.$route 访问当前路由：<br>当vue打包的时候打包生成的路由路径打不开，调整router中的//mode: “history”,，将他注释，是不让url指向发生改变</p><a id="more"></a><h2 id="常识："><a href="#常识：" class="headerlink" title="常识："></a>常识：</h2><p>返回上一层：<br>this.$router.go(-1)</p><p>tag=“渲染的标签名”<br>to=“模板名字”<br>linkActiveClasss：“active”    //修改点击切换的时候的class<br>active-class=“active”   //默认选中的class修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;home&quot;&gt;首页&lt;&#x2F;router-link&gt;&#x2F;&#x2F;防止模板的标签，to&#x3D;“模板名字”</span><br><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;About&quot;&gt;关于&lt;&#x2F;router-link&gt;&#x2F;&#x2F;防止模板的标签，to&#x3D;“模板名字”</span><br><span class="line">&lt;router-view&gt;&lt;&#x2F;router-view&gt;&#x2F;&#x2F;模板里面内容显示的区域</span><br></pre></td></tr></table></figure><h2 id="拿到路由对象"><a href="#拿到路由对象" class="headerlink" title="拿到路由对象"></a>拿到路由对象</h2><p>$router拿到最大的路由<br>this.$router.方法如：replaceStateurl监听<br>$route拿到当前路由的数据</p><h2 id="导航守卫："><a href="#导航守卫：" class="headerlink" title="导航守卫："></a>导航守卫：</h2><p>前置钩子（守卫guard）：beforeEach<br>    函数类型，函数内包含三个参数to,from,next,next()是必须有的router.beforeEach((to,from,next) =&gt;{})<br>后置的钩子（钩子hook）：afterEach<br>    函数类型，函数内有两个参数，to,from；router.beforeEach((to,from) =&gt;{})</p><h2 id="缓存数据"><a href="#缓存数据" class="headerlink" title="缓存数据"></a>缓存数据</h2><p>keep-ailve–清除缓存每次点击重新创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive exclude&#x3D;&quot;创建模板的name,name2,name3&quot;&gt;&#x2F;&#x2F;那些不缓存</span><br></pre></td></tr></table></figure><h3 id="router："><a href="#router：" class="headerlink" title="router："></a>router：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建导入，总结整合目录这个是起一个项目的基本</span><br><span class="line">&#x2F;*</span><br><span class="line">*找到对应的vue文件命名一下，之后使用</span><br><span class="line">*&#x2F;</span><br><span class="line">const Home &#x3D; () &#x3D;&gt; import(&#39;views&#x2F;home&#x2F;Home&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建与个router</span><br><span class="line">const routes &#x3D; [</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;默认的路径，打开直接是&#x2F;home</span><br><span class="line">  &#123;</span><br><span class="line">    path:&#39;&#x2F;&#39;,</span><br><span class="line">    redirect:&#39;&#x2F;home&#39;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;导入的目录</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;home&#39;,</span><br><span class="line">    name: &#39;Home&#39;,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;详情页传递，因为:iid可以传来参数更改url的请求，可以通过vue axios来更改这个值</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;detail&#x2F;:iid&#39;,</span><br><span class="line">    name: &#39;Detail&#39;,</span><br><span class="line">    component: Detail</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;实例化</span><br><span class="line">const router &#x3D; new VueRouter(&#123;</span><br><span class="line">  mode: &#39;history&#39;,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;导出</span><br><span class="line">export default router</span><br></pre></td></tr></table></figure><ul><li>vue axios接收参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123; request &#125; from &quot;.&#x2F;request&quot;;</span><br><span class="line"></span><br><span class="line">export function getDetailActive(iid) &#123;</span><br><span class="line">  return request(&#123;</span><br><span class="line">    url: &#39;&#x2F;detail&#39;,</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;拼接的参数</span><br><span class="line">    params: &#123;</span><br><span class="line">      iid</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如何传入axios接收参数：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;生命周期 - 创建完成（可以访问当前this实例）</span><br><span class="line">created() &#123;</span><br><span class="line">  &#x2F;&#x2F;获取route中的iid，注意是当前路由的iid</span><br><span class="line">  const iid &#x3D; this.$route.params.iid</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;axios发来的getDetailActive需要传参</span><br><span class="line">    getDetailActive(iid).then(res &#x3D;&gt; &#123;</span><br><span class="line">      console.log(res)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>如何改变url路径</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;监听事件····detail在router中定义过后缀名一定同一（iid）</span><br><span class="line"> this.$router.push(&#39;&#x2F;detail&#x2F;&#39; + &#39;找到iid，或者唯一的id&#39;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> $router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>父子之间传递信息和ref，$el</title>
      <link href="/A-lyc/2020/03/28/vue/%E7%88%B6%E5%AD%90%E4%B9%8B%E9%97%B4%E4%BC%A0%E9%80%92%E4%BF%A1%E6%81%AF/"/>
      <url>/A-lyc/2020/03/28/vue/%E7%88%B6%E5%AD%90%E4%B9%8B%E9%97%B4%E4%BC%A0%E9%80%92%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>父子之间传递信息和ref，$el</p><h2 id="emit子组件定义事件，父组件接收-父组件访问子组件"><a href="#emit子组件定义事件，父组件接收-父组件访问子组件" class="headerlink" title="$emit子组件定义事件，父组件接收//父组件访问子组件"></a>$emit子组件定义事件，父组件接收//父组件访问子组件</h2><a id="more"></a><ul><li>子组件：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  addToCart(index)&#123;</span><br><span class="line">    this.$emit(&#39;addCart&#39;,index)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>父组件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;addToCart:可以自己定义事件内容,还可以取到传来的参数</span><br><span class="line"> &lt;detail-bottom-bar @addCart&#x3D;&quot;addToCart&quot;&gt;&lt;&#x2F;detail-bottom-bar&gt;</span><br></pre></td></tr></table></figure><h2 id="popst父组件传数据，子组件接收-父组件传输给子组件的信息，子组件是不可以进行修改的，需要传入data中另存一份进行修改，这个数据和父组件的数据是没有双向绑定的，如果需要子组件修改后的数据需要通过子组件传输的方式进行传输"><a href="#popst父组件传数据，子组件接收-父组件传输给子组件的信息，子组件是不可以进行修改的，需要传入data中另存一份进行修改，这个数据和父组件的数据是没有双向绑定的，如果需要子组件修改后的数据需要通过子组件传输的方式进行传输" class="headerlink" title="popst父组件传数据，子组件接收,父组件传输给子组件的信息，子组件是不可以进行修改的，需要传入data中另存一份进行修改，这个数据和父组件的数据是没有双向绑定的，如果需要子组件修改后的数据需要通过子组件传输的方式进行传输"></a>popst父组件传数据，子组件接收,父组件传输给子组件的信息，子组件是不可以进行修改的，需要传入data中另存一份进行修改，这个数据和父组件的数据是没有双向绑定的，如果需要子组件修改后的数据需要通过子组件传输的方式进行传输</h2><ul><li>父组件：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;父组件把goods传入子组件</span><br><span class="line">:good&#x3D;&quot;goods&quot;</span><br><span class="line">&#x2F;&#x2F;good和子组件关联的</span><br></pre></td></tr></table></figure><ul><li>子组件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  &#x2F;&#x2F;子组件的good是父组件传来的goods  是数组或对象可以循环遍历，别的值可用&#123;&#123;&#125;&#125;</span><br><span class="line">    good:&#123;</span><br><span class="line">        type:Array,</span><br><span class="line">        &#x2F;&#x2F;数组和对象默认值是一个函数</span><br><span class="line">        default()&#123;</span><br><span class="line">            return []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;scroll ref&#x3D;&quot;scroll&quot;&gt;&lt;&#x2F;scroll&gt;</span><br></pre></td></tr></table></figure><p>获取scroll对象的Vue Component里面的组件</p><p>使用//自行打印看看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$refs.scroll</span><br></pre></td></tr></table></figure><h2 id="el-自行打印看看"><a href="#el-自行打印看看" class="headerlink" title="$el //自行打印看看"></a>$el //自行打印看看</h2><p>$el获取整个页面的DOM就是整个页面的HTML</p><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p>有时候我们需要父组件直接访问子组件，子组件直接访问父组件，或者是子组件访问跟组件。<br>父组件访问子组件：使用$children或$refs<br>子组件访问父组件：使用$parent</p><p>$children<br>我们先来看下$children的访问<br>this.$children是一个数组类型，它包含所有子组件对象。<br>我们这里通过一个遍历，取出所有子组件的message状态。</p><p>$children的缺陷：<br>通过$children访问子组件时，是一个数组类型，访问其中的子组件必须通过索引值。<br>但是当子组件过多，我们需要拿到其中一个时，往往不能确定它的索引值，甚至还可能会发生变化。<br>有时候，我们想明确获取其中一个特定的组件，这个时候就可以使用$refs</p><p>$refs的使用：<br>$refs和ref指令通常是一起使用的。<br>首先，我们通过ref给某一个子组件绑定一个特定的ID。<br>其次，通过this.$refs.ID就可以访问到该组件了。</p><p>如果我们想在子组件中直接访问父组件，可以通过$parent<br>注意事项：<br>尽管在Vue开发中，我们允许通过$parent来访问父组件，但是在真实开发中尽量不要这样做。<br>子组件应该尽量避免直接访问父组件的数据，因为这样耦合度太高了。<br>如果我们将子组件放在另外一个组件之内，很可能该父组件没有对应的属性，往往会引起问题。<br>另外，更不好做的是通过$parent直接修改父组件的状态，那么父组件中的状态将变得飘忽不定，很不利于我的调试和维护。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ref refs 组件传递 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sceoll插件应用</title>
      <link href="/A-lyc/2020/03/28/js/sceoll%E5%BA%94%E7%94%A8/"/>
      <url>/A-lyc/2020/03/28/js/sceoll%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>如果滚动不好用使用contentScroll执行组件中的refresh() 或者 @load=””给scroll中组件内的图片加上这个属性之后传出来执行refresh()</p><a id="more"></a><h2 id="scroll-网址：https-better-scroll-github-io"><a href="#scroll-网址：https-better-scroll-github-io" class="headerlink" title="scroll 网址：https://better-scroll.github.io/"></a>scroll 网址：<a href="https://better-scroll.github.io/" target="_blank" rel="noopener">https://better-scroll.github.io/</a></h2><ul><li>安装:npm install @better-scroll/core@next –save</li></ul><hr><ul><li><p>其余插件介绍</p><p>  目前支持鼠标滚轮有：核心滚动</p><pre><code>npm install @better-scroll/mouse-wheel@next --save</code></pre><p>  下拉动作</p><pre><code>npm install @better-scroll/pull-down@next --save</code></pre><p>  样式美观的滚动条</p><pre><code>npm install @better-scroll/scroll-bar@next --save</code></pre><p>  用于轮播和 swipe 效果</p><pre><code>npm install @better-scroll/slide@next --save</code></pre><p>上拉加载插件<br>  npm install @better-scroll/pull-up@next –save      </p></li></ul><hr><ul><li><p>模板使用方法<br>  通过ref=“scroll”<br>  :prode-type=”3”    3为监听滚动到拿了<br>  :pullUpLoad=”true”  需要安装插件，监听上拉加载<br>  @scroll=”事件名”  返回参数“position”–返回顶部：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;内容滚动到一定位置返回按钮显示</span><br><span class="line">  contentScroll(position) &#123;</span><br><span class="line">    this.isShowBackTop &#x3D; -position.y &gt; 1000;</span><br><span class="line">  &#125;,</span><br><span class="line">这个方法返回一个true，定义一个组件为flase的时候为隐藏，ture为显示</span><br></pre></td></tr></table></figure><p>  @pullingUp=“事件”  上拉加载事件加载更多</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">data中有个列表名称所以能直接使用</span><br><span class="line">currentType：“pop”</span><br><span class="line"></span><br><span class="line">找到异步传来的函数调用列表名</span><br><span class="line">this.getHomeGoods(this.currentType);</span><br><span class="line">&#x2F;&#x2F;异步请求，有列表名称和页码</span><br><span class="line">getHomeGoods(type) &#123;</span><br><span class="line">      &#x2F;&#x2F;获取当前第几页</span><br><span class="line">      const page &#x3D; this.goods[type].page + 1;</span><br><span class="line">      &#x2F;&#x2F;异步请求</span><br><span class="line">      getHomeGoods(type, page).then(res &#x3D;&gt; &#123;</span><br><span class="line">        &#x2F;&#x2F;ES6语法追加到某个数组中</span><br><span class="line">        this.goods[type].list.push(...res.data.list)</span><br><span class="line">        this.goods[type].page +&#x3D; 1;</span><br><span class="line">        &#x2F;&#x2F;监听连续加载</span><br><span class="line">        this.$refs.scroll.finishPullUp();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li>使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;组件上</span><br><span class="line">&lt;scroll class&#x3D;&quot;content&quot; ref&#x3D;&quot;scroll&quot; :probe-type&#x3D;&quot;2&quot; @scroll&#x3D;&quot;contentScroll&quot;&gt;&lt;&#x2F;scroll&gt;</span><br><span class="line">import Scroll from &quot;@&#x2F;components&#x2F;common&#x2F;scroll&#x2F;Scroll&quot;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;scrol滚动</span><br><span class="line">    contentScroll() &#123;</span><br><span class="line">      this.$refs.scroll.refresh();</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li><li>如果滚动不好用使用contentScroll执行组件中的refresh() 或者 @load=””给scroll中组件内的图片加上这个属性之后传出来执行refresh()</li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex和全局组件传递的使用</title>
      <link href="/A-lyc/2020/03/27/vue/vuex%E5%92%8C%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/A-lyc/2020/03/27/vue/vuex%E5%92%8C%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>使用vuex中的state需要在组件中导入，计算属性中使用…mapState({name: state =&gt; state.XX.XXX.XXX})，使用方法的时候可以直接this.$store.commit(“logout”);就是调用mutations上的方法</p><a id="more"></a><p>vuex和全局组件传递的使用，传给vuex的时候是一个确切的值，页面通过this.$store.dispatch(“”,{})的属性给Action值进行整合，Action之后通过commit属性给mutations值，之后mutations直接把值给state</p><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><ul><li>向vuex中传递参数</li><li>执行一个动作或者一个事件如：页面加载，点击。处于活跃状态等生命周期</li><li>vuex的目录结构：<br>//保存状态的：state<br>/保存方法的：mutations：//单独页面，统一导入<br>//计算属性：Getters；//单独页面，统一导入<br>//处理异步的操作：Action；//单独页面，统一导入-Action 提交的是 mutation，而不是直接变更状态-<br>//划分模块，Module</li></ul><ul><li>页面使用使用this.$store.dispatch传输给VUEX中的actions—–1：Action 提交的是 mutation，而不是直接变更状态；2：Action 可以包含任意异步操作。<br>Action返回值可以是一个Promise通过.then可以调用返回值—–id=”0”</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">*引号内是发出的事件，vuex actions中接收，</span><br><span class="line">*this.index是data或者其他地方的参数。可以是任何形式的，如&#123;&#125;，[]</span><br><span class="line">*&#x2F;</span><br><span class="line">this.$store.dispatch(&#39;addClick&#39;,this.index)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Promise   -----id&#x3D;&quot;0&quot;</span><br><span class="line">this.$store.dispatch(&#39;addClick&#39;,this.index).then(res &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;打印的是在vuex中的actions里面的resolve()  id：01</span><br><span class="line">  console.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>actions接收页面传来的数据<br>你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;传入的方法，之后给到mutations</span><br><span class="line">  actions: &#123;</span><br><span class="line">    &#x2F;&#x2F;事件名称接收addClick  &#x2F;&#x2F;第一个参数是固定的，第二个payLoad传来的参数</span><br><span class="line">    addClick(context, payLoad) &#123;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F;返回的是上一级调用Promise的res（使用dispatch传输给VUEX中的actions）id：01</span><br><span class="line">      resolve(&#39;当前数量+1&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ul><li>actions使用commit传输给VUEX中的mutations</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;接收到参数通过commit给mutations  getTabControl()&#123;&#125;</span><br><span class="line">actions&#123;</span><br><span class="line">   context.commit(&#39;getTabControl&#39;,payLoad)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>也可以在页面直接传递</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">this.$store.commit(&#39;getTabControl&#39;,this.index)</span><br><span class="line">&#x2F;*</span><br><span class="line">*引号内是发出的事件，vuex mutations中接收，</span><br><span class="line">*this.index是data或者其他地方的参数。可以是任何形式的，如&#123;&#125;，[]</span><br><span class="line">*payLoad接收，可以其他名字，但不建议</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><ul><li>mutations接收actions和页面传来的参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;传入的方法最好是是单一的 getTabControl</span><br><span class="line">mutations: &#123;</span><br><span class="line">  &#x2F;&#x2F;需要通过state.tabcontrol赋值给state</span><br><span class="line">  &#x2F;*</span><br><span class="line">  *参数：</span><br><span class="line">  *payLoad--传输来的值</span><br><span class="line">  *state----state系统定义的第一个参数</span><br><span class="line">  *</span><br><span class="line">  *&#x2F;</span><br><span class="line">    getTabControl(state, payLoad)&#123;</span><br><span class="line">      state.tabcontrol &#x3D; payLoad</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><ul><li>vuex页面上的应用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;导入vuex会找到Actions内定义的方法进行传入</span><br><span class="line">&#x2F;*</span><br><span class="line">*mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性</span><br><span class="line">*mapActions 辅助函数仅仅是将 store 中的 actions 映射到methods ......</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">import &#123;mapActions&#125; from &#39;vuex&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用vuex</span><br><span class="line">  methods : &#123;</span><br><span class="line">    &#x2F;&#x2F;数组方式使用，还可以对象方式等</span><br><span class="line">    ...mapActions([</span><br><span class="line">      &#x2F;&#x2F;tabcontrol是Actions内的一个方法，进行导入的是在计算属性内，</span><br><span class="line">          &#39;tabcontrol&#39;</span><br><span class="line">      ]),</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;调用vuex的数据，由于此步骤的上一步进行了导入，所以这里可以直接操作</span><br><span class="line">this.tabcontrol&#x2F;&#x2F;可以直接达到</span><br></pre></td></tr></table></figure><p>async/await</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 假设 getData() 和 getOtherData() 返回的是 Promise</span><br><span class="line"></span><br><span class="line">actions: &#123;</span><br><span class="line">  async actionA (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(&#39;gotData&#39;, await getData())</span><br><span class="line">  &#125;,</span><br><span class="line">  async actionB (&#123; dispatch, commit &#125;) &#123;</span><br><span class="line">    await dispatch(&#39;actionA&#39;) &#x2F;&#x2F; 等待 actionA 完成后执行下面的</span><br><span class="line">    commit(&#39;gotOtherData&#39;, await getOtherData())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>vuex中接收传来的参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;不可以直接修改state内的值</span><br><span class="line">  state: &#123;</span><br><span class="line">    tabcontrol:&#39;pop&#39;,&#x2F;&#x2F;接收到的实际参数,其他页面可应用的参数</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;传入的方法最好是是单一的</span><br><span class="line">mutations: &#123;</span><br><span class="line">    getTabControl(state, payLoad)&#123;</span><br><span class="line">      state.tabcontrol &#x3D; payLoad</span><br><span class="line">    &#125;&#x2F;&#x2F;需要通过state.tabcontrol赋值给state</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;传入的方法，之后给到mutations</span><br><span class="line">  actions: &#123;</span><br><span class="line">    tabcontrols(context, payLoad) &#123;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F;返回的是上一级调用Promise的res（使用dispatch传输给VUEX中的actions）</span><br><span class="line">      resolve(&#39;当前数量+1&#39;)</span><br><span class="line">      </span><br><span class="line">      &#x2F;&#x2F;接收到参数通过commit给mutations</span><br><span class="line">      context.commit(&#39;getTabControl&#39;,payLoad)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="bus-自定义后缀"><a href="#bus-自定义后缀" class="headerlink" title="$bus  自定义后缀"></a>$bus  自定义后缀</h2><p>min.js定义一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$bus &#x3D; new Vue()</span><br></pre></td></tr></table></figure><p>传出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;使用$bus.$emit传出</span><br><span class="line">this.$bus.$emit(&#39;itemImages&#39;,parameter)</span><br></pre></td></tr></table></figure><p>接收：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">接收</span><br><span class="line">  this.$bus.$on(&quot;itemImages&quot;, () &#x3D;&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue 全局组件传递 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何创建一个博客网站</title>
      <link href="/A-lyc/2020/03/27/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
      <url>/A-lyc/2020/03/27/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>如何创建一个博客网站</p><h1 id="如何创建一个博客网站"><a href="#如何创建一个博客网站" class="headerlink" title="如何创建一个博客网站"></a>如何创建一个博客网站</h1><h2 id="参考网址：https-hexo-io-zh-cn-docs"><a href="#参考网址：https-hexo-io-zh-cn-docs" class="headerlink" title="参考网址：https://hexo.io/zh-cn/docs/"></a>参考网址：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></h2><a id="more"></a><h2 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h2><h3 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h3><h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ul><li>npm install -g hexo-cli</li><li>npm install hexo</li><li>新建文件后输入：hexo init  &lt;文件夹名&gt;</li></ul><h3 id="新建文件之后"><a href="#新建文件之后" class="headerlink" title="新建文件之后"></a>新建文件之后</h3><p>新建完成后，指定文件夹的目录如下<br>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes</p><ul><li>hexo init</li><li>cd 文件夹</li><li>npm i</li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li><a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/configuration</a></li></ul><h3 id="添加文章"><a href="#添加文章" class="headerlink" title="添加文章"></a>添加文章</h3><ul><li><p>hexo new ’文章名称加双引号‘</p></li><li><p>文章路径</p><p>参数描述-p, –path自定义新文章的路径-r, –replace如果存在同名文章，将其替换-s, –slug文章的 Slug，作为新文章的文件名和发布后的 URL</p><ul><li><p>hexo new page –path about/me “About me”</p><p>以上命令会创建一个 source/about/me.md 文件，同时 Front Matter 中的 title 为 “About me”</p></li></ul></li><li><p>文章</p><h2 id="Front-matter-是文件最上方以-—-分隔的区域，用于指定个别文件的变量，举例来说："><a href="#Front-matter-是文件最上方以-—-分隔的区域，用于指定个别文件的变量，举例来说：" class="headerlink" title="Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，举例来说："></a>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，举例来说：</h2><p>title: Hello World</p><h2 id="date-2013-7-13-20-46-25"><a href="#date-2013-7-13-20-46-25" class="headerlink" title="date: 2013/7/13 20:46:25"></a>date: 2013/7/13 20:46:25</h2><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><p>参数描述默认值layout布局title标题文章的文件名date建立日期文件建立日期updated更新日期文件更新日期comments开启文章的评论功能truetags标签（不适用于分页）categories分类（不适用于分页）permalink覆盖文章网址keywords仅用于 meta 标签和 Open Graph 的关键词（不推荐使用）</p><ul><li><a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/front-matter</a></li><li><a href="https://hexo.io/zh-cn/docs/tag-plugins" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/tag-plugins</a></li></ul></li></ul><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><ul><li><p>hexo g</p><p>选项描述-d, –deploy文件生成后立即部署网站-w, –watch监视文件变动-b, –bail生成过程中如果发生任何未处理的异常则抛出异常-f, –force强制重新生成文件<br>Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。<br>使用该参数的效果接近 hexo clean &amp;&amp; hexo generate-c, –concurrency最大同时生成文件的数量，默认无限制</p></li></ul><h3 id="静态模式"><a href="#静态模式" class="headerlink" title="静态模式"></a>静态模式</h3><p>在静态模式下，服务器只处理 public 文件夹内的文件，而不会处理文件变动，在执行时，您应该先自行执行 hexo generate，此模式通常用于生产环境（production mode）下。<br>$ hexo server -s</p><h3 id="草稿发布"><a href="#草稿发布" class="headerlink" title="草稿发布"></a>草稿发布</h3><ul><li><p>hexo publish [layout] <filename>“草稿名称”</filename></p></li><li><p>草稿建立</p><ul><li>hexo new draft “new draft”</li></ul></li></ul><h3 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h3><p>使用 Hexo 生成静态文件快速而且简单。</p><ul><li><p>hexo generate</p></li><li><p>监视文件变动</p><p>Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入</p><ul><li>hexo generate –watch</li></ul></li><li><p>完成后部署</p><p>您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。</p></li></ul><p>  简写<br>  上面两个命令可以简写为<br>  $ hexo g -d<br>  $ hexo d -g</p><pre><code>- hexo generate --deploy- hexo deploy --generate</code></pre><h3 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h3><ul><li><p>hexo new photo “My Gallery”</p><p>在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：<br>$ hexo new photo “My Gallery”<br>在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章，以下是您可以在模版中使用的变量：<br>变量描述layout布局title标题date文件建立日期</p></li></ul><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><p>选项描述-p, –port重设端口-s, –static只使用静态文件-l, –log启动日记记录，使用覆盖记录格式</p><ul><li>hexo serve</li></ul><h3 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h3><p>部署网站。<br>参数描述-g, –generate部署之前预先生成静态文件</p><ul><li>hexo d</li></ul><h3 id="清除缓存文件"><a href="#清除缓存文件" class="headerlink" title="清除缓存文件"></a>清除缓存文件</h3><p>$ hexo clean<br>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><ul><li>hexo clean</li></ul><h3 id="列出网站资料"><a href="#列出网站资料" class="headerlink" title="列出网站资料"></a>列出网站资料</h3><p>list<br>$ hexo list <type><br>列出网站资料</type></p><ul><li>hexo list</li></ul><h3 id="引用资源"><a href="#引用资源" class="headerlink" title="引用资源"></a>引用资源</h3><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><h2 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h2><h3 id="安装Hexo-1"><a href="#安装Hexo-1" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ul><li><p>npm install -g hexo-cli</p></li><li><p>npm install hexo</p></li><li><p>新建文件后输入：hexo init  &lt;文件夹名&gt;</p></li><li><p>进环境</p><ul><li>hexo server</li></ul></li><li><p>部署</p><ul><li>hexo deploy</li></ul></li><li><p>清除缓存</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令</p><ul><li>hexo clean</li></ul></li></ul><h3 id="git上操作"><a href="#git上操作" class="headerlink" title="git上操作"></a>git上操作</h3><ul><li><p>在gti新建一个和用户名相同的储存库</p></li><li><p>之后安装 Travis CI</p><p>新建一个 repository。如果你希望你的站点能通过 &lt;你的 GitHub 用户名&gt;.github.io 域名访问，你的 repository 应该直接命名为 &lt;你的 GitHub 用户名&gt;.github.io。<br>将你的 Hexo 站点文件夹推送到 repository 中。默认情况下不应该 public 目录将不会被推送到 repository 中，你应该检查 .gitignore 文件中是否包含 public 一行，如果没有请加上。<br>将 Travis CI 添加到你的 GitHub 账户中。<br>前往 GitHub 的 Applications settings，配置 Travis CI 权限，使其能够访问你的 repository。<br>你应该会被重定向到 Travis CI 的页面。如果没有，请 手动前往。<br>在浏览器新建一个标签页，前往 GitHub 新建 Personal Access Token，只勾选 repo 的权限并生成一个新的 Token。Token 生成后请复制并保存好。<br>回到 Travis CI，前往你的 repository 的设置页面，在 Environment Variables 下新建一个环境变量，Name 为 GH_TOKEN，Value 为刚才你在 GitHub 生成的 Token。确保 DISPLAY VALUE IN BUILD LOG 保持 不被勾选 避免你的 Token 泄漏。点击 Add 保存。<br>在你的 Hexo 站点文件夹中新建一个 .travis.yml 文件：<br>sudo: false<br>language: node_js<br>node_js:</p><ul><li>10 # use nodejs v10 LTS<br>cache: npm<br>branches:<br>only:<ul><li>master # build master branch only<br>script:</li></ul></li><li>hexo generate # generate static files<br>deploy:<br>provider: pages<br>skip-cleanup: true<br>github-token: $GH_TOKEN<br>keep-history: true<br>on:<br>branch: master<br>local-dir: public<br>将 .travis.yml 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 gh-pages 分支下<br>在 GitHub 中前往你的 repository 的设置页面，修改 GitHub Pages 的部署分支为 gh-pages。<br>前往 https://&lt;你的 GitHub 用户名&gt;.github.io 查看你的站点是否可以访问。这可能需要一些时间。<br>Project page<br>如果你更希望你的站点部署在 &lt;你的 GitHub 用户名&gt;.github.io 的子目录中，你的 repository 需要直接命名为子目录的名字，这样你的站点可以通过 https://&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt; 访问。你需要检查你的 Hexo 配置文件，将 url 修改为 https://&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;、将 root 的值修改为 /&lt;repository 的名字&gt;/<br>Private repository<br>The following instruction is adapted from one-command deployment page.<br>Install hexo-deployer-git.<br>Add the following configurations to _config.yml, (remove existing lines if any)</li></ul><p>deploy:<br>  type: git<br>  repo: <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><username>/<project></project></username></p><h1 id="example-https-github-com-hexojs-hexojs-github-io"><a href="#example-https-github-com-hexojs-hexojs-github-io" class="headerlink" title="example, https://github.com/hexojs/hexojs.github.io"></a>example, <a href="https://github.com/hexojs/hexojs.github.io" target="_blank" rel="noopener">https://github.com/hexojs/hexojs.github.io</a></h1><p>  branch: gh-pages<br>Run hexo clean &amp;&amp; hexo deploy.<br>Check the webpage at username.github.io.</p><ul><li><a href="https://hexo.io/zh-cn/docs/github-pages" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/github-pages</a></li></ul></li><li><p>保存上传的git命令</p></li><li><p>注意修改子用户名</p><h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><h2 id="If-your-site-is-put-in-a-subdirectory-set-url-as-‘http-yoursite-com-child-39-and-root-as-‘-child-‘"><a href="#If-your-site-is-put-in-a-subdirectory-set-url-as-‘http-yoursite-com-child-39-and-root-as-‘-child-‘" class="headerlink" title="If your site is put in a subdirectory, set url as ‘http://yoursite.com/child&#39; and root as ‘/child/‘"></a>If your site is put in a subdirectory, set url as ‘<a href="http://yoursite.com/child&#39;" target="_blank" rel="noopener">http://yoursite.com/child&#39;</a> and root as ‘/child/‘</h2><p>url: <a href="http://yoursite.com" target="_blank" rel="noopener">http://yoursite.com</a><br>root: /child/<br>permalink: :year/:month/:day/:title/<br>permalink_defaults:<br>pretty_urls:<br>  trailing_index: true # Set to false to remove trailing ‘index.html’ from permalinks<br>  trailing_html: true # Set to false to remove trailing ‘.html’ from permalinks</p></li></ul><h2 id="发表文章过程"><a href="#发表文章过程" class="headerlink" title="发表文章过程"></a>发表文章过程</h2><h3 id="需要进入环境查看"><a href="#需要进入环境查看" class="headerlink" title="需要进入环境查看"></a>需要进入环境查看</h3><ul><li>hexo serve</li></ul><h3 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h3><ul><li>hexo new ‘文章标题’</li></ul><h3 id="生成静态"><a href="#生成静态" class="headerlink" title="生成静态"></a>生成静态</h3><ul><li>hexo generate</li></ul><h3 id="上传服务器"><a href="#上传服务器" class="headerlink" title="上传服务器"></a>上传服务器</h3><ul><li>hexo deploy</li></ul><h3 id="源码上传"><a href="#源码上传" class="headerlink" title="源码上传"></a>源码上传</h3><ul><li>软件上传源码</li></ul>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 零散资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于秦哥脚手架创建项目</title>
      <link href="/A-lyc/2020/03/27/%E5%9F%BA%E4%BA%8E%E7%A7%A6%E5%93%A5%E8%84%9A%E6%89%8B%E6%9E%B6%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
      <url>/A-lyc/2020/03/27/%E5%9F%BA%E4%BA%8E%E7%A7%A6%E5%93%A5%E8%84%9A%E6%89%8B%E6%9E%B6%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>前后端分离项目，但是不使用 vue，react，angular（也就是说没有现成的脚手架）</p><h1 id="generator-jason"><a href="#generator-jason" class="headerlink" title="generator-jason"></a>generator-jason</h1><blockquote><p>前端模块化脚手架</p></blockquote><a id="more"></a><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>First, install <a href="http://yeoman.io" target="_blank" rel="noopener">Yeoman</a> and generator-jason using <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a> (we assume you have pre-installed <a href="https://nodejs.org/" target="_blank" rel="noopener">node.js</a>).</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yo</span><br><span class="line">npm install -g generator-jason</span><br></pre></td></tr></table></figure><p>Then generate your new project:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yo jason</span><br><span class="line">npm run dev -&gt; localhost:8080</span><br></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>非前后端分离，后端模板项目</li><li>前后端分离项目，但是不使用 vue，react，angular（也就是说没有现成的脚手架）</li></ol><h2 id="目录解析"><a href="#目录解析" class="headerlink" title="目录解析"></a>目录解析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">管理员目录，项目会生成一个管理员目录</span><br><span class="line">启动开发环境后</span><br><span class="line">可以在 http://localhost:8080/admin.html 中</span><br><span class="line">查看全部页面的链接 和 组件</span><br><span class="line">- admin</span><br><span class="line"></span><br><span class="line">打包后的目录</span><br><span class="line">- dist</span><br><span class="line"></span><br><span class="line">项目源码</span><br><span class="line">src</span><br><span class="line">  资产目录，css，js，font</span><br><span class="line">  - assets</span><br><span class="line">  </span><br><span class="line">  组件目录，由于使用的 ejs 作为 html 语言，可通过 require 的方式引入并且传入 prop，实现组件化</span><br><span class="line">  其中 components/index.js 会在 main.js 中执行，初始化组件</span><br><span class="line">  - components</span><br><span class="line">  </span><br><span class="line">  国际化目录</span><br><span class="line">  - i18n</span><br><span class="line">  </span><br><span class="line">  页面目录，存放着页面组件</span><br><span class="line">  - views</span><br><span class="line">  </span><br><span class="line">  项目公共配置</span><br><span class="line">  - main.js</span><br></pre></td></tr></table></figure><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><blockquote><p>components 和 views 目录下的 A 文件夹作为模板，复制改名用即可 <br><br>ejs require 实现<br>&lt;% ‘脚本’ 标签，用于流程控制，无输出，任意类型。 %&gt;<br>  &lt;%_ 删除其前面的空格符<br>  &lt;%= 输出数据到模板（输出是转义 HTML 标签）<br>  &lt;%- 输出非转义的数据到模板<br>  &lt;%# 注释标签，不执行、不输出内容<br>  &lt;%% 输出字符串 ‘&lt;%’<br>  %&gt; 一般结束标签<br>  -%&gt; 删除紧随其后的换行符<br>  _%&gt; 将结束标签后面的空格符删除</p></blockquote><p>ejs基本使用方法，循环，判断，赋值，传值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;组件模板中定义：</span><br><span class="line">&#x2F;*</span><br><span class="line">*如果text有值的时候是假的，之后执行假的，也就是显示组件上的值</span><br><span class="line">*&#x2F;</span><br><span class="line">&lt;%</span><br><span class="line">if (!text) var text &#x3D; &#39;&#39;;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义之后使用</span><br><span class="line">  &lt;div class&#x3D;&quot;product-active-title&quot;&gt;</span><br><span class="line">    &lt;%&#x3D; text %&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">*组件内可以进行判断，ejs可以写判断的代码</span><br><span class="line">*&#x2F;</span><br><span class="line">&lt;% if (title) &#123; %&gt;</span><br><span class="line">        &lt;%&#x3D; title %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- ejs 中引入组件 --&gt;</span><br><span class="line">&lt;%&#x3D; require(&#39;..&#x2F;..&#x2F;components&#x2F;A&#x2F;index.ejs&#39;)(&#123;</span><br><span class="line">  &#x2F;&#x2F; 可传参数任意类型</span><br><span class="line">  title: &#39;我是title&#39;，</span><br><span class="line">  arr：[&#123;name:&#39;mame&#39;&#125;]</span><br><span class="line">&#125;) %&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;组件内进行判断 -三元表达式</span><br><span class="line">&lt;%</span><br><span class="line">if (!dir) var dir &#x3D; &#39;x&#39;;</span><br><span class="line">var coverPath &#x3D; dir &#x3D;&#x3D;&#x3D; &#39;x&#39; ? require(&#39;.&#x2F;images&#x2F;article-x.jpg&#39;) : require(&#39;.&#x2F;images&#x2F;article-y.jpg&#39;)</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;模板使用</span><br><span class="line">&lt;a class&#x3D;&quot;comp-article &lt;%&#x3D; dir %&gt;&quot; href&#x3D;&quot;#&quot;&gt;</span><br><span class="line">    &lt;b class&#x3D;&quot;comp-article-media-inner&quot; style&#x3D;&quot;background-image: url(&lt;%&#x3D; coverPath %&gt;);&quot;&gt;&lt;&#x2F;b&gt;</span><br><span class="line">&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>//使用循环,定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">*if判断这传来的参数，有传来的参数的时候显示传来的参数，没有显示[ &#39;1&#39;, &#39;2&#39; ]</span><br><span class="line">*注意 &lt;% 循环 %&gt;  注意是&lt;% %&gt; 之后内如何显示参数：&lt;%&#x3D; 参数值[i索引值] %&gt; </span><br><span class="line">*&#x2F;</span><br><span class="line">&lt;%</span><br><span class="line">if (!dataArr) var dataArr &#x3D; [ &#39;1&#39;, &#39;2&#39; ]</span><br><span class="line">%&gt;</span><br><span class="line">&#x2F;&#x2F;模板使用</span><br><span class="line">&lt;div class&#x3D;&quot;comp-tab&quot;&gt;</span><br><span class="line">  &lt;% for (var i &#x3D; 0; i &lt; dataArr.length; i++) &#123; %&gt;</span><br><span class="line">    &lt;a class&#x3D;&quot;comp-tab-item &lt;%&#x3D; i &#x3D;&#x3D;&#x3D; 0 ? &#39;active&#39; : &#39;&#39; %&gt;&quot; href&#x3D;&quot;#&quot;&gt;</span><br><span class="line">      &lt;%&#x3D; product[ i ].name %&gt;</span><br><span class="line">      &lt;%&#x3D; product[ i ].age %&gt;</span><br><span class="line">    &lt;&#x2F;a&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>//ejs使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">*使用require导入这个模板之后可使用定义的参数进行传参，使用逗号进行隔开，传输值，</span><br><span class="line">*例子是传输一个字符串的方式</span><br><span class="line">*&#x2F;</span><br><span class="line">&lt;%&#x3D; require(&#39;..&#x2F;..&#x2F;components&#x2F;list&#x2F;index.ejs&#39;)(&#123;</span><br><span class="line">    text:&quot;Apis&quot;,</span><br><span class="line">    product:[&#123;name:&quot;nihao&quot;,age:&#39;18&#39;&#125;,&#123;name:&quot;nihao&quot;,age:&#39;18&#39;&#125;]</span><br><span class="line">&#125;) %&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;条件判断</span><br><span class="line">&lt;% if(false) &#123; %&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是显示的</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;% &#125;else&#123; %&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是隐藏的</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><p>views</p><blockquote><p>打包时，页面组件的 css 和 js 的名称，进行了单独的处理 <br><br>将按照页面组件的目录名编译成 hash 字符串（相同页面的 css 和 js 名称是一样的）<br><br>目的是实现页面组件的中文目录命名，方便开发（后端模板项目建议中文命名，前后端分离项目不建议中文命名）</p></blockquote></li><li><p>html 路径问题</p><blockquote><p>使用下面方法引入即可</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;&lt;%&#x3D; require(&#39;.&#x2F;images&#x2F;abc.jpg&#39;) %&gt;&quot;&gt;</span><br><span class="line">&lt;div style&#x3D;&quot;background-image: url(&lt;%&#x3D; require(&#39;.&#x2F;images&#x2F;abc.jpg&#39;) %&gt;)&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h2 id="css使用说明"><a href="#css使用说明" class="headerlink" title="css使用说明"></a>css使用说明</h2><ul><li><p>include引入外部文件 res是一个变量</p><blockquote><p>@include res(width,100px,20/100);<br>@include res(width,100px,(xs:10px,md:20px)); </p></blockquote></li><li><p>import引入’css路径’ ~包内的css</p><blockquote><p>@import “../../assets/styles/utils”;<br>@import “~jason-css/src/responsive/util”;</p></blockquote></li></ul><h2 id="生成的-css-文件说明"><a href="#生成的-css-文件说明" class="headerlink" title="生成的 css 文件说明"></a>生成的 css 文件说明</h2><ul><li><p>vendor</p><blockquote><p>第三方模块 css（node_modules）</p></blockquote></li><li><p>common</p><blockquote><p>项目中的通用样式以及组件样式（assets，components）</p></blockquote></li><li><p>hash.css</p><blockquote><p>各个页面的单独样式（views/**/index.scss）</p></blockquote></li></ul><h2 id="生成的-js-文件说明"><a href="#生成的-js-文件说明" class="headerlink" title="生成的 js 文件说明"></a>生成的 js 文件说明</h2><ul><li><p>vendor</p><blockquote><p>第三方模块（node_modules）</p></blockquote></li><li><p>common</p><blockquote><p>项目中的工具库以及组件（assets，components）</p></blockquote></li><li><p>main</p><blockquote><p>main.js</p></blockquote></li><li><p>hash.js</p><blockquote><p>各页面单独的业务逻辑（views/**/index.js）</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端模块化脚手架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端脚手架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>px转换单位为vw和rpx的插件</title>
      <link href="/A-lyc/2020/03/25/vue/px%E8%BD%AC%E6%8D%A2%E5%8D%95%E4%BD%8D%E4%B8%BArpx/"/>
      <url>/A-lyc/2020/03/25/vue/px%E8%BD%AC%E6%8D%A2%E5%8D%95%E4%BD%8D%E4%B8%BArpx/</url>
      
        <content type="html"><![CDATA[<h2 id="vw"><a href="#vw" class="headerlink" title="vw"></a>vw</h2><h3 id="postcss-px-to-viewport，将px单位自动转换成viewport单位，用起来超级简单，"><a href="#postcss-px-to-viewport，将px单位自动转换成viewport单位，用起来超级简单，" class="headerlink" title="postcss-px-to-viewport，将px单位自动转换成viewport单位，用起来超级简单，"></a>postcss-px-to-viewport，将px单位自动转换成viewport单位，用起来超级简单，<a href="https://npm.taobao.org/package/postcss-px-to-viewport" title="[postcss-px-to-viewport 文档]" target>postcss-px-to-viewport 文档</a></h3><p>· 如果不想转换为Px，大写的P就好</p><a id="more"></a><h4 id="安装-–dev是安装到开发环境中-打包之后的依赖"><a href="#安装-–dev是安装到开发环境中-打包之后的依赖" class="headerlink" title="安装  –dev是安装到开发环境中 打包之后的依赖"></a>安装  –dev是安装到开发环境中 打包之后的依赖</h4><blockquote><p>npm install postcss-px-to-viewport –save-dev</p></blockquote><h4 id="引入vue项目，再postcss-config-js引入"><a href="#引入vue项目，再postcss-config-js引入" class="headerlink" title="引入vue项目，再postcss.config.js引入"></a>引入vue项目，再postcss.config.js引入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line"></span><br><span class="line">  plugins: &#123;</span><br><span class="line"></span><br><span class="line">    autoprefixer: &#123;&#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &quot;postcss-px-to-viewport&quot;: &#123;</span><br><span class="line">      viewportWidth: 750,   &#x2F;&#x2F; 视窗的宽度，对应的是我们设计稿的宽度，一般是750</span><br><span class="line"></span><br><span class="line">      viewportHeight: 1334, &#x2F;&#x2F; 视窗的高度，根据750设备的宽度来指定，一般指定1334，也可以不配置</span><br><span class="line"></span><br><span class="line">      unitPrecision: 3,     &#x2F;&#x2F; 指定&#96;px&#96;转换为视窗单位值的小数位数</span><br><span class="line"></span><br><span class="line">      viewportUnit: &quot;vw&quot;,   &#x2F;&#x2F;指定需要转换成的视窗单位，建议使用vw</span><br><span class="line"></span><br><span class="line">      selectorBlackList: [&#39;.ignore&#39;,&#39;tab-bar&#39;,&#39;tab-bar-item&#39;],&#x2F;&#x2F; 指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名</span><br><span class="line"></span><br><span class="line">      minPixelValue: 1,     &#x2F;&#x2F; 小于或等于&#96;1px&#96;不转换为视窗单位，你也可以设置为你想要的值</span><br><span class="line"></span><br><span class="line">      mediaQuery: false     &#x2F;&#x2F; 允许在媒体查询中转换&#96;px&#96;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  unitToConvert: &#39;px&#39;</span><br><span class="line">  viewportWidth: 320,</span><br><span class="line">  unitPrecision: 5,</span><br><span class="line">  propList: [&#39;*&#39;],</span><br><span class="line">  viewportUnit: &#39;vw&#39;,</span><br><span class="line">  fontViewportUnit: &#39;vw&#39;,</span><br><span class="line">  selectorBlackList: [],</span><br><span class="line">  minPixelValue: 1,</span><br><span class="line">  mediaQuery: false,</span><br><span class="line">  replace: true,</span><br><span class="line">  exclude: [],</span><br><span class="line">  landscape: false,</span><br><span class="line">  landscapeUnit: &#39;vw&#39;,</span><br><span class="line">  landscapeWidth: 568</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>unitToConvert  (String) 要转换的单位，默认是’px’<br>viewportWidth (Number) viewport的宽度，默认是320，可根据设计稿来，750的设计稿就写750<br>unitPrecision  (Number) 指定<code>px</code>转换为视窗单位值的小数位数，默认是5<br>propList (Array) 指定可以转换的css属性，默认是[‘*’]，代表全部属性进行转换<br>  精确匹配</p><ul><li>代表全部属性<br>在字符串前面或者后面用<em>，如 [‘*position</em>‘] 会匹配background-position-y<br>用！则该属性排除. 如: [‘*’, ‘!letter-spacing’]<br>Combine the “not” prefix with the other prefixes. Example: [‘’, ‘!font’]</li></ul></li><li><p>viewportUnit  (String)指定需要转换成的视窗单位，默认vw<br>fontViewportUnit  (String)指定字体需要转换成的视窗单位，默认vw<br>selectorBlackList  (Array) 指定不转换为视窗单位的类，保留px，值为string或正则regexp，建议定义一至两个通用的类名<br>  值为string类型， 检查字符是否包含</p><pre><code>[&apos;body&apos;] 匹配 .body-class</code></pre><p>值为regexp类型，正则匹配.</p><pre><code>[/^body$/] 匹配 body 而不是 .body</code></pre></li></ul><p>​​​​​​​minPixelValue (Number) 默认值1，小于或等于<code>1px</code>不转换为视窗单位,<br>mediaQuery  (Boolean) 是否在媒体查询时也转换px，默认false<br>replace (Boolean)  replaces rules containing vw instead of adding fallbacks.<br>exclude (Array or Regexp) 设置忽略文件，如node_modules<br>  如果是regexp, 忽略全部匹配文件.<br>  如果是数组array, 忽略指定文件.</p><hr><p>可能遇到的问题<br>1、@keyframes 和media查询里的px默认是不转化的，设置mediaQuery： true则媒体查询里也会转换px</p><p>@keyframes可以暂时手动填写vw单位的转化结果</p><h4 id="px2rem"><a href="#px2rem" class="headerlink" title="px2rem"></a>px2rem</h4><p>如何在vue-cli3.0中使用postcss-plugin-px2rem 插件<br>插件的作用是 自动将vue项目中的px转换为rem 。</p><p>为什么这三个中要推荐 postcss-plugin-px2rem呢？</p><p>因为 postcss-plugin-px2rem 这个插件 配置选项上有 exclude 属性，它可以配置 是否对 某个文件夹下的所有css文件不进行从px到rem的转换。</p><p>所以我们可以利用这个特性，把项目中的 node_module 文件夹排除掉。这样如果我们项目中是用了，前端UI框架的话，就不会吧UI框架（Vant,Element等）中的 px单位转换成rem了</p><ul><li>postcss-plugin-px2rem 官方文档：<a href="https://www.npmjs.com/package/postcss-plugin-px2rem" target="_blank" rel="noopener">https://www.npmjs.com/package/postcss-plugin-px2rem</a><br>postcss-pxtorem 官方文档：<a href="https://www.npmjs.com/package/postcss-pxtorem" target="_blank" rel="noopener">https://www.npmjs.com/package/postcss-pxtorem</a></li></ul><p>postcss-px2rem 官方文档：<a href="https://www.npmjs.com/package/postcss-px2rem" target="_blank" rel="noopener">https://www.npmjs.com/package/postcss-px2rem</a></p><p>使用npm安装插件：<br>npm i postcss-plugin-px2rem  –save -dev</p><p>具体配置方法如下：<br>在vue-cli3.0中。去掉了build和config文件夹。所有的配置都放到了vue.config.js中（默认为空，如果没有这个文件自己写一个）。</p><p>反向代理的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    &#x2F;&#x2F;反向代理的配置</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            &#39;&#x2F;api&#39;: &#123;</span><br><span class="line">                target: &#39;http:&#x2F;&#x2F;-,&#x2F;&#x2F;目标地址</span><br><span class="line">                ws: true, &#x2F;&#x2F;&#x2F;&#x2F; 是否启用websockets</span><br><span class="line">                changeOrigin: true, &#x2F;&#x2F;开启代理：在本地会创建一个虚拟服务端，然后发送请求的数据，并同时接收请求的数据，这样服务端和服务端进行数据的交互就不会有跨域问题</span><br><span class="line">                pathRewrite: &#123;&#39;^&#x2F;api&#39;: &#39;&#x2F;&#39;&#125;    &#x2F;&#x2F;这里重写路径</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在vue-cli3中使用postcss-px2rem 配置类似，如下：</p><ol><li>使用postcss-px2rem时的vue.config.js配置：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    lintOnSave: true,</span><br><span class="line">    css: &#123;</span><br><span class="line">        loaderOptions: &#123;</span><br><span class="line">            postcss: &#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                    require(&#39;postcss-px2rem&#39;)(&#123; &#x2F;&#x2F;配置项，详见官方文档</span><br><span class="line">                        remUnit: 30</span><br><span class="line">                    &#125;), &#x2F;&#x2F; 换算的基数</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>记得npm i 安装包；</li></ol><p>可能遇到的坑：</p><p>如果个别地方不想转化px。可以简单的使用大写的 PX 或 Px 。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue插件 </tag>
            
            <tag> 单位转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue插件懒加载和移动端延迟</title>
      <link href="/A-lyc/2020/03/25/vue/vue%E6%8F%92%E4%BB%B6%E6%87%92%E5%8A%A0%E8%BD%BD%E5%92%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BB%B6%E8%BF%9F/"/>
      <url>/A-lyc/2020/03/25/vue/vue%E6%8F%92%E4%BB%B6%E6%87%92%E5%8A%A0%E8%BD%BD%E5%92%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BB%B6%E8%BF%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在移动端会使用fastClick插件</p></blockquote><ul><li><p>安装npm i fastclick</p><a id="more"></a><p>导入：min.js中：import FastClick from ‘fastclick’</p><p>调用：//解决移动端的300ms延迟<br>FastClick.attach(document.body)</p></li></ul><hr><blockquote><p>图片懒加载</p></blockquote><ul><li><p>安装npm i vue-lazyload -save </p><p>导入:min.js:<br>import VuelazyLoad from ‘vue-lazyload’<br>//使用图片懒加载插件<br>Vue.use(VuelazyLoad)</p><p>使用:<br>img :src=“./img.jpg”修改成v-lazy=“./img.jpg”</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue插件 懒加载 移动端延迟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vsCoods快捷创建模板</title>
      <link href="/A-lyc/2020/03/24/vsCoods%E5%BF%AB%E6%8D%B7%E5%88%9B%E5%BB%BA%E6%A8%A1%E6%9D%BF/"/>
      <url>/A-lyc/2020/03/24/vsCoods%E5%BF%AB%E6%8D%B7%E5%88%9B%E5%BB%BA%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在一个Vue的项目中，反复的新建.vue文件是一个必不可少的工序。本着科技让人偷懒的原则，我们可以利用VSCode的snippet在.vue文件创建后能轻松地生成一套模板。</p></blockquote><a id="more"></a><h4 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h4><p>使用ctrl+shift+p（文件-首选项-用户代码片段）输入vue 自动打开vue.json 的文件输入模板<br>模板具体格式：<br>$0  鼠标在的位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&quot;Print to console&quot;: &#123;</span><br><span class="line">       &quot;prefix&quot;: &quot;vue&quot;,</span><br><span class="line">       &quot;body&quot;: [</span><br><span class="line">           &quot;&lt;!-- $1 --&gt;&quot;,</span><br><span class="line">           &quot;&lt;template&gt;&quot;,</span><br><span class="line">           &quot;&lt;div class&#x3D;&#39;$&#123;2:webapp&#125;&#39;&gt;$5&lt;&#x2F;div&gt;&quot;,</span><br><span class="line">           &quot;&lt;&#x2F;template&gt;&quot;,</span><br><span class="line">           &quot;&quot;,</span><br><span class="line">           &quot;&lt;script&gt;&quot;,</span><br><span class="line">           &quot;&#x2F;&#x2F;这里可以导入其他文件（比如：组件，工具js，第三方插件js，json文件，图片文件等等）&quot;,</span><br><span class="line">           &quot;&#x2F;&#x2F;例如：import 《组件名称》 from &#39;《组件路径》&#39;;&quot;,</span><br><span class="line">           &quot;&quot;,</span><br><span class="line">&quot;export default &#123;&quot;,</span><br><span class="line">&quot;name:&#39;$&#123;2:another&#125;&#39;,&quot;,</span><br><span class="line">           &quot;&#x2F;&#x2F;import引入的组件需要注入到对象中才能使用&quot;,</span><br><span class="line">           &quot;components: &#123;&#125;,&quot;,</span><br><span class="line">           &quot;data() &#123;&quot;,</span><br><span class="line">           &quot;&#x2F;&#x2F;这里存放数据&quot;,</span><br><span class="line">           &quot;return &#123;&quot;,</span><br><span class="line">           &quot;&quot;,</span><br><span class="line">           &quot;&#125;;&quot;,</span><br><span class="line">           &quot;&#125;,&quot;,</span><br><span class="line">           &quot;&#x2F;&#x2F;监听属性 类似于data概念&quot;,</span><br><span class="line">           &quot;computed: &#123;&#125;,&quot;,</span><br><span class="line">           &quot;&#x2F;&#x2F;监控data中的数据变化&quot;,</span><br><span class="line">           &quot;watch: &#123;&#125;,&quot;,</span><br><span class="line">           &quot;&#x2F;&#x2F;方法集合&quot;,</span><br><span class="line">           &quot;methods: &#123;&quot;,</span><br><span class="line">           &quot;&quot;,</span><br><span class="line">           &quot;&#125;,&quot;,</span><br><span class="line">           &quot;&#x2F;&#x2F;生命周期 - 创建完成（可以访问当前this实例）&quot;,</span><br><span class="line">           &quot;created() &#123;&quot;,</span><br><span class="line">           &quot;&quot;,</span><br><span class="line">           &quot;&#125;,&quot;,</span><br><span class="line">           &quot;&#x2F;&#x2F;生命周期 - 挂载完成（可以访问DOM元素）&quot;,</span><br><span class="line">           &quot;mounted() &#123;&quot;,</span><br><span class="line">           &quot;&quot;,</span><br><span class="line">           &quot;&#125;,&quot;,</span><br><span class="line">           &quot;beforeCreate() &#123;&#125;, &#x2F;&#x2F;生命周期 - 创建之前&quot;,</span><br><span class="line">           &quot;beforeMount() &#123;&#125;, &#x2F;&#x2F;生命周期 - 挂载之前&quot;,</span><br><span class="line">           &quot;beforeUpdate() &#123;&#125;, &#x2F;&#x2F;生命周期 - 更新之前&quot;,</span><br><span class="line">           &quot;updated() &#123;&#125;, &#x2F;&#x2F;生命周期 - 更新之后&quot;,</span><br><span class="line">           &quot;beforeDestroy() &#123;&#125;, &#x2F;&#x2F;生命周期 - 销毁之前&quot;,</span><br><span class="line">           &quot;destroyed() &#123;&#125;, &#x2F;&#x2F;生命周期 - 销毁完成&quot;,</span><br><span class="line">           &quot;activated() &#123;&#125;, &#x2F;&#x2F;如果页面有keep-alive缓存功能，这个函数会触发&quot;,</span><br><span class="line">           &quot;&#125;&quot;,</span><br><span class="line">           &quot;&lt;&#x2F;script&gt;&quot;,</span><br><span class="line">           &quot;&lt;style lang&#x3D;&#39;scss&#39; scoped&gt;&quot;,</span><br><span class="line">           &quot;&#x2F;&#x2F;@import url($3); 引入公共css类&quot;,</span><br><span class="line">           &quot;.$&#123;2:another&#125; &#123;&#125;&quot;,</span><br><span class="line">           &quot;&lt;&#x2F;style&gt;&quot;</span><br><span class="line">       ],</span><br><span class="line">       &quot;description&quot;: &quot;Log output to console&quot;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>第二步: 添加配置，让vscode允许自定义的代码片段提示出来<br>文件 –&gt; 首选项 –&gt; 设置 —&gt; 添加这2项<br>// Specifies the location of snippets in the suggestion widget<br>“editor.snippetSuggestions”: “top”,<br>// Controls whether format on paste is on or off<br>“editor.formatOnPaste”: true</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue vsCoods快捷创建模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>map导入点击地图出现</title>
      <link href="/A-lyc/2020/03/23/vue/map%E5%AF%BC%E5%85%A5%E7%82%B9%E5%87%BB%E5%9C%B0%E5%9B%BE%E5%87%BA%E7%8E%B0/"/>
      <url>/A-lyc/2020/03/23/vue/map%E5%AF%BC%E5%85%A5%E7%82%B9%E5%87%BB%E5%9C%B0%E5%9B%BE%E5%87%BA%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>需要引入js<br>npm i –save jason-webmap<br>安装，使用秦哥脚手架自动安装的<br>然后建立一个wenmap的文件，</p><a id="more"></a><p>webmap-Js：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import webmap from &#39;jason-webmap&#39;;</span><br><span class="line">import &#39;~jason-webmap&#x2F;dist&#x2F;jason-webmap.css&#39;;</span><br><span class="line">&#x2F;&#x2F; or&#x2F;&#x2F; 推荐，可通过变量定制</span><br><span class="line">import &#39;~jason-webmap&#x2F;src&#x2F;style.scss&#39;;</span><br><span class="line">webmap(&#123;</span><br><span class="line">  &#x2F;&#x2F; 激活 map 的按钮选择器  选择器是根据a标签的open-map来的，可以写成a[open-map&#x3D;”webmap”]</span><br><span class="line">  openSelector: &#39;a[open-map&#x3D;webmap]&#39;,</span><br><span class="line">  &#x2F;&#x2F; 跟随者 map 一同移动的内容选择器  最好市body市第一父级，之后有个自己名称叫做comp-root类名</span><br><span class="line">  moveSelector: &#39;.comp-root&#39;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>webmap-ejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;aside class&#x3D;&quot;jason-map&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;jason-map-content&quot;&gt;</span><br><span class="line">    &lt;h3 class&#x3D;&quot;jason-map-heading&quot;&gt;网站导航&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;jason-map-item&quot;&gt;</span><br><span class="line">        &lt;h4 class&#x3D;&quot;jason-map-title&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;公司简介&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;</span><br><span class="line">        &lt;ul class&#x3D;&quot;jason-map-ilist&quot;&gt;</span><br><span class="line">          &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;导航&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">          &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;导航&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">          &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;导航&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">          &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;导航&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">          &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;导航&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;jason-map-item&quot;&gt;</span><br><span class="line">        &lt;h4 class&#x3D;&quot;jason-map-title&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;公司简介&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;</span><br><span class="line">        &lt;ul class&#x3D;&quot;jason-map-ilist&quot;&gt;</span><br><span class="line">          &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;导航&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">          &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;导航&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">          &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;导航&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">          &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;导航&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">          &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;导航&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;jason-map-footer&quot;&gt;</span><br><span class="line">      &lt;h5&gt;版权所有&lt;&#x2F;h5&gt;</span><br><span class="line">      &lt;h5&gt;xxxxxxx 有限公司 &lt;&#x2F;h5&gt;</span><br><span class="line">      &lt;p class&#x3D;&quot;mt-xs-10&quot;&gt;鲁ICP备 xxxxxxx 号&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;p&gt;网站设计：jason&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;aside&gt;</span><br></pre></td></tr></table></figure><p>webmap - Css：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;..&#x2F;..&#x2F;assets&#x2F;styles&#x2F;utils&quot;;</span><br><span class="line">@import &#39;~jason-webmap&#x2F;src&#x2F;style.scss&#39;;</span><br></pre></td></tr></table></figure><p>需要导入css<br>定制的时候可以使用强制执行来做</p><p>footer组件-ejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;#&quot; open-map&#x3D;&quot;webmap&quot;&gt;</span><br><span class="line">  DESIGNED BY LTD</span><br><span class="line">&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>首页以及其他页面 - ejs  和内容为兄弟级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;main class&#x3D;&quot;comp-root&quot;&gt;&lt;&#x2F;main&gt;</span><br><span class="line">&lt;%&#x3D; require(&#39;..&#x2F;..&#x2F;components&#x2F;webmap&#x2F;index.ejs&#39;)() %&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>语法引入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%&#x3D; require(&#39;..&#x2F;..&#x2F;components&#x2F;webmap&#x2F;index.ejs&#39;)() %&gt;&#x2F;&#x2F;创建一个webmap组件文件进行引入，</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端模块化脚手架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端脚手架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础</title>
      <link href="/A-lyc/2020/03/22/js/%E8%BF%90%E7%AE%97%E4%BD%BF%E7%94%A8%E5%88%B0%E7%9A%84%E6%95%B0%E7%BB%84%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/A-lyc/2020/03/22/js/%E8%BF%90%E7%AE%97%E4%BD%BF%E7%94%A8%E5%88%B0%E7%9A%84%E6%95%B0%E7%BB%84%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="运算符操符："><a href="#运算符操符：" class="headerlink" title="运算符操符："></a>运算符操符：</h3><ul><li>算数运算符：</li></ul><p>  +、-、<em>、/、%    +：特殊是连接作用，两个都是数字运算，一个数字一个字符串拼接<br>  <a id="more"></a><br>  一元运算符：<br>  ++、–    ++：累加        –：累减<br>  （如果++在前面先自身+1，之后和后面的值进行运算，<br>  如果++在后面，先运算完成之后在自身+1）<br>  二元运算符（符合运算符）：<br>  +=、-=、</em>=、/=、 例子：var a += b；//var a = a+b<br>  关系运算符：<br>  &lt;、 &lt;=、 &gt; 、&gt;=、==(不严格)、 ===（类型和值都要一样）、 !=(不严格) 、!==（严格）：返回的值是一个boolean类型的<br>  逻辑运算符：<br>  &amp;&amp;、||、！    ：&amp;&amp;如果有一个为false结果为flase        ||:有一个为true返回true<br>  赋值运算符：<br>  =</p><h3 id="运算符的优先级别："><a href="#运算符的优先级别：" class="headerlink" title="运算符的优先级别："></a>运算符的优先级别：</h3><ul><li>1：（）<br>2：++  –  ！<br>3：+ - * / %<br>4：&gt; &gt;= &lt; &lt;=<br>5：== === != ！==<br>6:先&amp;&amp; 后||<br>7：=</li></ul><h3 id="获取值的相关信息"><a href="#获取值的相关信息" class="headerlink" title="获取值的相关信息"></a>获取值的相关信息</h3><p>.length        获取任何值的长度；用法（变量.length）<br>this            这个元素本身</p><h3 id="字符转换"><a href="#字符转换" class="headerlink" title="字符转换"></a>字符转换</h3><p>.toString()    转字符串<br>.parseInt()    转整数（遇到字符会转字符之前的数字）<br>.parseFloat()    转小数（遇到字符会转字符之前的数字）<br>.Number()    转数字（严格模式）<br>Boolean()        转布尔值（0、“”、null、undefined、为false其他为ture）</p><h3 id="关键字："><a href="#关键字：" class="headerlink" title="关键字："></a>关键字：</h3><p>continue        循环中使用，遇到直接进行下一个循环<br>brack        跳出循环<br>return        函数中使用，返回值，遇到直接跳出函数</p><h3 id="Maht方法："><a href="#Maht方法：" class="headerlink" title="Maht方法："></a>Maht方法：</h3><pre><code>//静态对象：不需要创建，直接就是一个对象，方法（静态方法）直接通过这个对象名字调用的</code></pre><p>静态必须通过大写的名称调用<br>Math.PI                是3.1415926<br>Math.E                    自然数的2底数2.17<br>Math.abc(值)           数字的绝对值<br>Math.ceil(值)           想上取余<br>Math.floor(值)            向下取余<br>Math.max()                最大值<br>Math.max.apply(null,arr)      数组中最大值<br>Math.min()                最大值<br>Math.pow(x,y)             x的y次方<br>Math.sqrt()<br>Math.random()             返回一个伪随机数</p><h3 id="总结date方法"><a href="#总结date方法" class="headerlink" title="//总结date方法"></a>//总结date方法</h3><p>dt.getFullYear();//年<br>dt.getMonth();//月<br>dt.getDay();//日<br>dt.getDate();//周<br>dt.getHours();//时<br>dt.getMinutes();//分<br>dt.getSeconds();//秒<br>dt.getDay();///日<br>dt.toDateString();//英文时间<br>dt.toLocaleDateString();//正常时间<br>dt.toTimeString();//24小时制时间<br>dt.toLocaleTimeString();//12小时制时间<br>dt.valueOf()//毫秒</p><p>//<em>DOM</em>//<br>docnment        文档<br>element            元素<br>node            节点<br>root                根</p><h3 id="获取文档中的标签"><a href="#获取文档中的标签" class="headerlink" title="获取文档中的标签"></a>获取文档中的标签</h3><p>//根据id获取<br>getElementById(‘id属性’)//找到这个id的元素属性，返回这个属性</p><h3 id="根据标签-名称获取"><a href="#根据标签-名称获取" class="headerlink" title="//根据标签 名称获取"></a>//根据标签 名称获取</h3><p>getElementByTagName(‘标签名称’)//返回这个标签名称的伪数组，不管是一个还是多个标签返回值就是一个数组,需要循环遍历出来</p><h3 id="根据类样式获取元素，"><a href="#根据类样式获取元素，" class="headerlink" title="//根据类样式获取元素，"></a>//根据类样式获取元素，</h3><p> document.getElementsByClassName(‘class标签名称’)反回的是是一个数组，一个伪数组，只要有这个calss的值，都会读取得到//–ie8以下不支持</p><h3 id="获取一个属性"><a href="#获取一个属性" class="headerlink" title="//获取一个属性"></a>//获取一个属性</h3><p>querySelector(“标签名，#1 #2 cls”)<br>document.querySelectorAll(‘选择器名称’)//返回多个值，形成一个为数组</p><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="//自定义属性"></a>//自定义属性</h3><p>获取自定义属性的值getAttribute(‘自定义属性’)//需要在html上设置之后获取<br>设置自定义属性的值setAttribute(“自定义属性”,“值”)//设置完之后需要上面方法获取<br>移除自定义属性的值.removeAttribute(‘自定义属性’)//html中有自定义属性输入属性值可以</p><h3 id="创建一个元素标签"><a href="#创建一个元素标签" class="headerlink" title="//创建一个元素标签"></a>//创建一个元素标签</h3><p>docnment.wirte(‘标签的额代码内容’);创建元素有缺陷，如果加载完毕之后，此时通过这个方式创建元素，此时页面上创建的内容全部不存在了<br>对象.innerHTML = “标签机代码内容”;</p><p>document.createElement(“标签名字”);//创建之后需要追加父级元素.appendChild(标签名所对应的变量)<br>appendChild(变量)        从前向后添加这个标签<br>insertBefore(变量,参照的参数)    在参照参数后面添加<br>replaceChild(变量，元素)    第一个变量/元素替换第二个元素/变量<br>cloneNode(true/false)    true：全部复制，包括标签属性，值。False：只复制标签</p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>.onclick                //点击事件<br>.onmouseover            //鼠标经过事件<br>.onmouseout             //鼠标移出事件<br>.onfocus                 //获取焦点事件<br> .onblur                 //失去焦点事件<br>.onkeyup                //键盘抬起事件<br>.onmousemove        //鼠标移动事件（使用方法：.onmousemove = function(e){<br>元素.offsetLeft = e.clientX+”px”;        元素.offsetLeft = e.clientY+”px”;<br>可视区域的横纵坐标<br>}）<br>.onscroll        //元素的滚动事件获取滚动的距离</p><h3 id="对象点添加属性"><a href="#对象点添加属性" class="headerlink" title="对象点添加属性"></a>对象点添加属性</h3><p>.innerHTML        //带标签的文档（可不带）<br>.innerText        //不带标签<br>.style.color        //style样式<br>classList.add(标签名称)        //添加class类<br>classList.remove(标签名称)    //删除class类<br>className        //添加class类（有弊端，添加可能会把别的删除）<br>addClass            //添加class类（有弊端，添加可能会把别的删除）<br>removeClass        //删除class类（有弊端，删除可能会把别的删除）<br>//设置元素样式的方式<br>对象.style.属性 = 值;<br>对象.calss.属性 = 值;</p><h3 id="节点元素获取"><a href="#节点元素获取" class="headerlink" title="节点元素获取"></a>节点元素获取</h3><p>//获取父级节点<br>console.log(ulObj.parentNode);//找到父级所有的节点</p><p>//获取父级元素<br>console.log(ulObj.parentElement);//找到父级所有的标签</p><p>//获取子节点<br>console.log(ulObj.childNodes);//找到子级标签和文本（空格换行算是文本）</p><p>//获取子元素<br>console.log(ulObj.children)//找到子级标签</p><p>//获取第一个子节点<br>console.log(ulObj.firstChild)//可能是字或者空格换行，不是标签</p><p>//获取第一个子元素<br>console.log(ulObj.firstElementChild)//是第一个标签</p><p> //获取最后一个子节点<br>console.log(ulObj.lastChild)//最后一个文本空格换行。。。。。。</p><p>//获取最后一个子元素<br>console.log(ulObj.lastElementChild)//是最后一个标签</p><p>//获取某个元素的前一个节点<br>console.log(threebj.previousSibling)//前一个文本空格换行。。。。。。</p><p> //获取某个元素的前一个元素<br>console.log(threebj.previousElementSibling)//前一个标签</p><p>//获取某个元素的后一个节点<br>console.log(threebj.nextSibling)//后一个文本空格换行。。。。。。</p><p>//获取某个元素的后一个元素<br>console.log(threebj.nextElementSibling)//后一个标签</p><p>节点属性：（可以使用标签–元素.出来；属性节点.出来，文本节点.出来）(下面是相互对应的)<br> nodeType:   节点类型    标签；1，                   属性；2：                 3：文本<br>nodeName:   节点名字    标签节点：大写的表标签名     属性节点：小写的属性名     文本节点：#text<br>nodeValue:  节点的值    标签节点–null              属性节点：属性的值         文本节点：文本内容</p><h3 id="为元素绑定事件"><a href="#为元素绑定事件" class="headerlink" title="为元素绑定事件"></a>为元素绑定事件</h3><p>1：addEventListener()<br>    //参数1：事件的类型，事件名称,没有on<br>    //参数2：是一个函数<br>    //参数3：布尔类型<br>对象.addEventListener(“事件类型”,事件处理函数,false)谷歌火狐ie11支持，ie8不支持<br>对象.attachEvent(“事件类型”,事件处理函数）有on谷歌火狐不支持ie11不支持，ie8支持<br>解绑事件<br> 注意：用什么事件绑定事件就用对应的方式解绑事件<br> 1：<br>先绑定,后解除<br>对象.on事件名称 = function(){}<br>解绑<br>对象.on事件名称 = null</p><p> 2：<br>绑定事件<br>对象.addEventListener(“没有on的click”,命名函数,false)//ie8不支持<br>解绑事件<br>对象.removeEventListener(“click”,解绑的命名函数,flase)</p><p>3:<br> 绑定事件<br>对象.attachEvent(“on事件名称”,函数名称)//火狐谷歌不支持<br>解绑事件<br>对象.detachEvent(“on事件名称”,函数名称)</p><p>//事件的三个阶段<br>1.事件捕获阶段：从外向内<br>2.事件目标阶段<br>3.事件冒泡阶段：从里向外<br>//为元素绑定事件<br>addEventListener(“没有on的事件”,事件处理函数,控制事件阶段（布尔值）);<br>事件触发过程中，会出现事件冒泡效果，如何阻止冒泡<br>控制:addEventListener中的第三个参数是控制事件阶段的，<br>获取:e.eventPhase 这个属性可以知道这个属性是当前的那个阶段，<br>值1是捕获阶段 从外向内<br>值2是目标阶段 唯一的<br>值3是冒泡阶段 从里向外，一般是冒泡阶段</p><p>定时器：<br>//参数1：函数    参数2：时间毫秒数1000毫秒就是1秒<br>        //timeSet是定时器的id，不点击停止会一直执行<br>       var timeSet =  setInterval(函数,毫秒时间)<br>//停止定时器<br>clearInterval(timeSet);//定时器的id</p><h3 id="获取元素-根据-介绍"><a href="#获取元素-根据-介绍" class="headerlink" title="获取元素    根据    介绍"></a>获取元素    根据    介绍</h3><p>.getElementById(“btn”)    根据id获取这个标签(元素)    从文档中找到id值为btn的这个标签(元素)，document.getElementById(“id属性的值”);======&gt;返回的是一个元素对象<br>.getElementsByTagName(“p”);    .getElementsByTagName(“标签的名字”);返回的是一个伪数组,    无论获取的是一个标签,还是多个标签,最终都是在数组中存储的,这行代码的返回值就是一个数组<br>.getElementsByClassName(“cls”);    根据类样式的名字来获取元素，返回的是一个伪数组,    无论获取的是一个标签,还是多个标签,最终都是在数组中存储的,这行代码的返回值就是一个数组<br>.querySelectorAll(“.cls”)    根据选择器的方式获取元素    </p><!-- more -->    <hr><h3 id="事件-1"><a href="#事件-1" class="headerlink" title="事件"></a>事件</h3><p>.onclick          注册鼠标点击事件<br>.onmouseover      注册鼠标进入事件<br>.onmouseout        注册鼠标离开事件<br>.onfocus          注册获取焦点的事件<br>.onblur            注册失去焦点的事件<br>.onkeydow         注册键盘按下事件<br>.onkeyup          注册键盘抬起事件<br>.onload            页面加载完毕,这个事件就会触发<br>.onmousemove      注册鼠标拖动事件    clientX，clientY，pageX，pageY   坐标轴<br>.onscroll          注册滚动事件<br>.onmousedown      注册鼠标按下<br>.onmouseup        注册鼠标抬起<br>document.onkeydown = function(e){console.log(e.keyCode);}    查看键盘按下的是哪个键，对应着数字        </p><hr><p>对象.addEventListener(“事件类型”,事件处理函数,false)    为元素绑定事件谷歌和火狐支持,IE8不支持<br>my$(“btn”).removeEventListener(“click”,f1,false);    解绑事件的时候,需要在绑定事件的时候,使用命名函数<br>对象.attachEvent(“有on的事件类型”,事件处理函数)    谷歌不支持,火狐不支持,IE8支持<br>my$(“btn”).detachEvent(“onclick”,f1);    解绑事件的时候,需要在绑定事件的时候,使用命名函数    </p><hr><h3 id="DOM方法"><a href="#DOM方法" class="headerlink" title="DOM方法"></a>DOM方法</h3><p>.innerText    innerHTML才是真正的获取标签中间的所有内容<br>.textContent    设置标签中的文本内容<br>.innerText    凡是成对的标签,中间的文本内容,设置的时候,都使用innerText这个属性的方式    document.getElementById(“p1”).innerText=”这是一个p”<br>.style.width     凡是css中这个属性是多个单词的写法,在js代码中DOM操作的时候.把-干掉,后面的单词的首字母大写即可<br>.className=”cls”    在js代码中DOM操作的时候,设置元素的类样式,不用class关键字,应该使用,className<br>.removeAttribute(“class”)    删除calss<br>.classList.add(“类名称”)    添加css类<br>.classList.remove(“类名称”)    删除css类        </p><h2 id="offset系列"><a href="#offset系列" class="headerlink" title="offset系列"></a>offset系列</h2><p>元素.offsetLeft（宽高上下左右）    样式在style标签中获取方法    :父级元素margin+父级元素padding+父级元素的border+自己的margin<br>.offsetWidth:    获取元素的宽<br>.offsetHeight:    获取元素的高<br>.offsetLeft:    获取元素距离左边位置的值<br>.offsetTop:    获取元素距离上面位置的值</p><h2 id="scroll系列"><a href="#scroll系列" class="headerlink" title="scroll系列"></a>scroll系列</h2><p>.scrollWidth    元素中内容的实际的宽<br>.scrollHeight    元素中内容的实际的高<br>.scrollTop    向上卷曲出去的距离<br>.scrollLeft    向左卷曲出去的距离    </p><h2 id="client系列-可视区域"><a href="#client系列-可视区域" class="headerlink" title="client系列    可视区域"></a>client系列    可视区域</h2><p>.clientHeight    可视区域的高(没有边框),边框内部的高度<br>.clientWidth    可视区域的宽(没有边框),边框内部的宽度<br>.clientLeft    左边边框的宽度<br>.clientTop    上面的边框的宽度<br>.clientX    可视区域的横坐标（单机的位置距离X轴开始位置的坐标）<br>.clientY    可视区域的纵坐标（单机的位置距离Y轴开始位置的坐标）        </p><hr><h3 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h3><p>getAttribute(“score”)    在html标签中添加的自定义属性,如果想要获取这个属性的值,需要使用getAttribute(“自定义属性的名字”)才能获取这个属性的值    获取自定义属性的值<br>setAttribute(“属性的名字”,”属性的值”)    设置自定义属性:setAttribute(“属性的名字”,”属性的值”);    设置自定义属性<br>removeAttribute(“属性的名字”)    移除自定义属性:removeAttribute(“属性的名字”)    移除自定义属性<br>nodeType:    节点的类型:1—-标签,2—属性,3—文本<br>nodeName    节点的名字:标签节点—大写的标签名字,属性节点—小写的属性名字,文本节点—-#text<br>nodeValue    节点的值:标签节点—null,属性节点—属性值,文本节点—文本内容<br>parentNode    父级节点<br>parentElement    父级元素<br>childNodes    子节点<br>children    子元素<br>firstChild    第一个子节点<br>firstElementChild    第一个子元素<br>lastChild    最后一个子节点    IE8中是第一个子元素<br>lastElementChild    最后一个子元素    IE8中不支持<br>previousSibling    某个元素的前一个兄弟节点    IE8中是第一个子元素<br>previousElementSibling    某个元素的前一个兄弟元素    IE8中不支持<br>nextSibling    某个元素的后一个兄弟节点<br>nextElementSibling    某个元素的后一个兄弟元素</p><hr><p>.write(“标签的代码及内容”)    创建元素,缺陷:如果是在页面加载完毕后,此时通过这种方式创建元素,那么页面上存在的所有的内容全部被干掉<br>对象.innerHTML=”标签及代码”    对象.innerHTML=”标签代码及内容”<br>document.createElement(“标签的名字”)    document.createElement(“标签名字”);对象    “//把创建后的子元素追加到父级元素中<br>    父级对象.appendChild(pObj);”<br>父级元素.appendChild(子级元素对象)    追加元素<br>父级元素.inerstBefore(新的子级对象,参照的子级对象)    把新的子元素插入到参考子元素的前面<br>父级元素.removeChild(要干掉的子级元素对象)    移除父级元素中子级元素<br>getComputedStyle    获取任意一个元素的任意一个样式属性的值    “兼容代码：function getStyle(element,attr) {<br>    //判断浏览器是否支持这个方法<br>   return window.getComputedStyle? window.getComputedStyle(element,null)[attr]:element.currentStyle[attr];<br>  }”    使用方法： console.log(getStyle(my$(“dv”),”top”))<br>getComputedStyle(elenent,null)    传入一个对象和一个空值        </p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><h3 id="排他功能"><a href="#排他功能" class="headerlink" title="排他功能"></a>排他功能</h3><p>阻止a跳转    阻止超链接的默认的跳转:return false        </p><h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><p>console.log(window.location.hash)    地址栏上#及后面的内容<br>console.log(window.location.host)    主机名及端口号<br>console.log(window.location.hostname)    主机名<br>console.log(window.location.pathname)    文件的路径—相对路径<br>console.log(window.location.port)    端口号<br>console.log(window.location.protocol)    协议<br>console.log(window.location.search)    搜索的内容<br>location.href=”<a href="http://www.jd.com&quot;" target="_blank" rel="noopener">http://www.jd.com&quot;</a>    设置跳转的页面的地址<br>location.assign(“<a href="http://www.jd.com&quot;" target="_blank" rel="noopener">http://www.jd.com&quot;</a>)    设置跳转的页面的地址<br>location.reload()    重新加载–刷新<br>location.replace(“<a href="http://www.jd.com&quot;" target="_blank" rel="noopener">http://www.jd.com&quot;</a>)    没有历史记录        </p><hr><h3 id="userAgent"><a href="#userAgent" class="headerlink" title="userAgent"></a>userAgent</h3><p>console.log(window.navigator.userAgent)     通过userAgent可以判断用户浏览器的类型<br>console.log(window.navigator.platform)    通过platform可以判断浏览器所在的系统平台类型.        </p><hr><h3 id="client系列-可视区域-1"><a href="#client系列-可视区域-1" class="headerlink" title="client系列    可视区域"></a>client系列    可视区域</h3><p>.clientHeight    可视区域的高(没有边框),边框内部的高度<br>.clientWidth    可视区域的宽(没有边框),边框内部的宽度<br>.clientLeft    左边边框的宽度<br>.clientTop    上面的边框的宽度        </p><hr><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>var timeId = setInterval(function () {}, 1000);    “参数1:函数<br>参数2:时间—毫秒—1000毫秒–1秒<br>执行过程:页面加载完毕后,过了1秒,执行一次函数的代码,又过了1秒再执行函数…..<br>返回值就是定时器的id值”<br>clearInterval(timeId);    参数:要清理的定时的id的值<br>window.setTimeout(函数,时间);    另一个定时器——-一次性的定时<br>clearTimeout(timeId);    参数:要清理的定时的id的值        </p><hr><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>控制:addEventListener中的第三个参数是控制事件阶段的，    事件触发过程中，会出现事件冒泡效果，如何阻止冒泡<br>获取:e.eventPhase 这个属性可以知道这个属性是当前的那个阶段，    window.enent.cancelBubble = true;//谷歌，ie支持，火狐不支持<br>1是捕获阶段 从外向内    事件处理函数中的参数（e）.stopPropagation()//阻止事件冒泡//ie不支持，这是火狐的标准<br>2是目标阶段 唯一的    事件参数e 在ie的浏览器不存在可以使用 window.enent来代替<br>3是冒泡阶段 从里向外，一般是冒泡阶段            </p><hr><p>window.setSelection().removeAllRanges()||docnment.selection.empty()            </p><p>知道三个值可根据比例来的出第四个值<br>公式<br>x/y = a/b   移项  ay = bx   求y = bx/a            </p><hr><p>不占空间的原型prototype    使用方法：自定义对象名称.prototype.自定义方法名称 = function(){}   或者一个值<br>创建实例化对象    prototype使用这个创建里面的this认清    使用，举例子<br>“ function 实例化对象名（首字母大写）(btnObj,dvObj,json) {<br>        this.btnObj = btnObj;<br>        this.dvObj = dvObj;<br>        this.json = json;<br>    }<br>    实例化对象名.prototype.init = function(){<br>        var  than = this;<br>        this.btnObj.onclick = function(){<br>            for(var key in json){<br>                than.dvObj.style[key] = than.json[key];<br>        };<br>        };<br>    };<br>“    “ var json = {<br>        “”width””:””100px””,<br>        “”height””:””500px””,<br>        “”backgroundColor””:””yellow””,<br>        “”border””:””1px solid red””<br>    }<br>    var sc = new Person(my$(“”btn””),my$(“”dv””),json);<br>    sc.init();”        </p><hr><h4 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h4><p>function(){this}.bind(than)//函数中的this就是bind中的than（变量对象）<br>比如定时器中的this是window，然后在函数中.bind(构造函数顶级this的变量名)，定时器中的this就是bind出来的变量名，bind改变了里面this的指向            </p><hr><h3 id="函数中的继承问题-Proson-call-this-父级形参-没有继承方法-构造函数-call（当前对象this）"><a href="#函数中的继承问题-Proson-call-this-父级形参-没有继承方法-构造函数-call（当前对象this）" class="headerlink" title="函数中的继承问题     Proson.call(this,父级形参)没有继承方法    构造函数.call（当前对象this）"></a>函数中的继承问题     Proson.call(this,父级形参)没有继承方法    构造函数.call（当前对象this）</h3><p>function Person(name){this.name = name}<br>function Student(name,exe){proson.call(this,name);this.exe = exe;}<br>var stu = new Student(“小明”,10)            </p><hr><h3 id="改变this的指向-当前对象就是想让这个this指向谁-调用的时候改变this的指向"><a href="#改变this的指向-当前对象就是想让这个this指向谁-调用的时候改变this的指向" class="headerlink" title="改变this的指向     当前对象就是想让这个this指向谁    调用的时候改变this的指向"></a>改变this的指向     当前对象就是想让这个this指向谁    调用的时候改变this的指向</h3><p>函数名/方法名.prototype/方法.call(当前对象,值，值…)    f1.call(当前对象,值，值…)<br>函数名/方法名.prototype/方法.apply(当前对象,[值，值，值，..])    f1.apply(当前对象,[值，值，值，..])<br>改变this的指向，使用方法<br>函数名.apply(对象,[参数1，参数2，参数3.。。。。])；<br>函数名.call(对象,参数1,参数2,……)<br>我想要使用其他对象的某个方法，其他对象.方法名.apply（当前对象，参数1…..）/call(当前对象，参数……)<br>这个方法就会被当前的对象所用，同时这个方法中的this就是当前对象，在调用方法的时候改变了this的指向            </p><hr><p>复制一份的时候，把参数传入到函数中，第一个参数默认为window    可以穿this   是复制的时候改变了this的指向<br>.bind();这个方法是复制的意思，参数可以在复制的时候传进去，也可以在复制之后调用的时候传进去            </p><hr><h3 id="函数内的几个属性"><a href="#函数内的几个属性" class="headerlink" title="函数内的几个属性"></a>函数内的几个属性</h3><p>函数.name   返回值是函数的名字<br>函数名.arguments   返回值是一个伪数组<br>函数名.length   返回形参的个数<br>函数名.caller   返回有谁调用了这个函数            </p>]]></content>
      
      
      <categories>
          
          <category> 学习整理的前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsES5-js单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css3动画</title>
      <link href="/A-lyc/2020/03/21/css/css3%E5%8A%A8%E7%94%BB/"/>
      <url>/A-lyc/2020/03/21/css/css3%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<p>tarnsfrom可以用来设置元素的形状改变、主要有几种：</p><a id="more"></a><h3 id="transfrom设置元素的形状改变"><a href="#transfrom设置元素的形状改变" class="headerlink" title="transfrom设置元素的形状改变"></a>transfrom设置元素的形状改变</h3><p>tarnsfrom可以用来设置元素的形状改变、主要有几种：<br>rotata（旋转（单位deg））、<br>scale（缩放）、<br>skew（扭曲）、<br>teanslate（移动）、<br>marix（矩形变阵）</p><p>使用方法<br>.类名称{<br>transfrom：rotate（60deg） scale（.2） skew（） translate（X，Y） matrix（）；<br>}</p><h3 id="transfrom-origin基点设置"><a href="#transfrom-origin基点设置" class="headerlink" title="transfrom-origin基点设置"></a>transfrom-origin基点设置</h3><p>所有的变形都是基于基点，基点默认为元素的中心点。用法：transform-origin: (x, y)，其中 x 和 y 的值可以是百分比、rem 或者是 px 等等，也可以用表示位置的单词来表示例如：x 可以用left、center、right；y 可以用top、center、bottom。</p><p>使用方法<br>.transform-class {<br>    transform-origin: (left, bottom);<br>}</p><h3 id="rotate-旋转"><a href="#rotate-旋转" class="headerlink" title="rotate 旋转"></a>rotate 旋转</h3><p>用法：rotate(<angle>)；表示通过指定的角度对元素进行旋转变形，如果是正数则顺时针旋转，如果是负数则逆时针旋转，例如：</angle></p><p>.transform-rotate {<br>    transform: rotate(30deg);<br>}</p><h3 id="scale-缩放"><a href="#scale-缩放" class="headerlink" title="scale 缩放"></a>scale 缩放</h3><p>它有三种用法：scale(<number>[, <number>])、scaleX(<number>)和scaleY(<number>)；分别代表水平和垂直方向同时缩放、水平方向的缩放以及垂直方向的缩放，入参代表水平或者垂直方向的缩放比例。缩放比例如果大于1则放大，反之则缩小，如果等于1代表原始大小。</number></number></number></number></p><p>.transform-scale {<br>    transform: scale(2,1.5);<br>}</p><p>.transform-scaleX {<br>    transform: scaleX(2);<br>}</p><p>.transform-scaleY {<br>    transform: scaleY(1.5);<br>}</p><h3 id="translate-移动"><a href="#translate-移动" class="headerlink" title="translate 移动"></a>translate 移动</h3><p>移动也分三种情况：translate(<translation-value>[, <translation-value>])、translateX(<translation-value>)和translateY(<translation-value>)；分别代表水平和垂直的移动、水平方向的移动以及垂直方向同时移动，移动单位是 CSS 中的长度单位：px、rem等;</translation-value></translation-value></translation-value></translation-value></p><p>.transform-translate {<br>    transform: translate(400px, 20px);<br>}</p><p>.transform-translateX {<br>    transform: translateX(300px);<br>}</p><p>.transform-translateY {<br>    transform: translateY(20px);<br>}</p><h3 id="skew-扭曲"><a href="#skew-扭曲" class="headerlink" title="skew 扭曲"></a>skew 扭曲</h3><p>扭曲同样也有三种情况，skew(<angle>[, <angle>])、skewX(<angle>)和skewY(<angle>)；同样也是水平和垂直方向同时扭曲、水平方向的扭曲以及垂直方向的扭曲，单位为角度。</angle></angle></angle></angle></p><p>.transform-skew {<br>    transform: skew(30deg, 10deg);<br>}</p><p>.transform-skewX {<br>    transform: skewX(30deg);<br>}</p><p>.transform-skewY {<br>    transform: skewY(10deg);<br>}</p><h3 id="transition一种状态变平滑过渡到另外一种状态"><a href="#transition一种状态变平滑过渡到另外一种状态" class="headerlink" title="transition一种状态变平滑过渡到另外一种状态"></a>transition一种状态变平滑过渡到另外一种状态</h3><p>transition是用来设置样式的属性值是如何从从一种状态变平滑过渡到另外一种状态，它有四个属性：</p><p>transition-property（变换的属性，即那种形式的变换：大小、位置、扭曲等）；<br>transition-duration（变换延续的时间）；<br>transition-timing-function（变换的速率）<br>transition-delay（变换的延时）</p><p>.transition-class {<br>    transition ： [&lt;’transition-property’&gt; || &lt;’transition-duration’&gt; || &lt;’transition-timing-function’&gt; || &lt;’transition-delay’&gt; [, [&lt;’transition-property’&gt; || &lt;’transition-duration’&gt; || &lt;’transition-timing-function’&gt; || &lt;’transition-delay’&gt;]]*;<br>}</p><h2 id="transition-property平滑过渡的效果"><a href="#transition-property平滑过渡的效果" class="headerlink" title="transition-property平滑过渡的效果"></a>transition-property平滑过渡的效果</h2><p>它是用来设置哪些属性的改变会有这种平滑过渡的效果，主要有以下值：</p><p>none；<br>all；<br>元素属性名：<br>color；<br>length；<br>visibility；<br>…<br>.transition-property {<br>    transition-property ： none | all | [ <IDENT> ] [ ‘,’ <IDENT> ]*;<br>}</IDENT></IDENT></p><h3 id="transition-duration转换过程的持续时间"><a href="#transition-duration转换过程的持续时间" class="headerlink" title="transition-duration转换过程的持续时间"></a>transition-duration转换过程的持续时间</h3><p>它是用来设置转换过程的持续时间，单位是s或者ms，默认值为0；</p><p>.transition-duration {<br>    transition-duration ： <time> [, <time>]* ;<br>}</time></time></p><h3 id="transition-timing-function渡效果的速率"><a href="#transition-timing-function渡效果的速率" class="headerlink" title="transition-timing-function渡效果的速率"></a>transition-timing-function渡效果的速率</h3><p>它是来设置过渡效果的速率，它有6种形式的速率：</p><p>ease：逐渐变慢（默认），等同于贝塞尔曲线(0.25, 0.1, 0.25, 1.0)；<br>linear：匀速，等同于贝塞尔曲线(0.0, 0.0, 1.0, 1.0)；<br>ease-in：加速，等同于贝塞尔曲线(0.42, 0, 1.0, 1.0)；<br>ease-out：减速，等同于贝塞尔曲线(0, 0, 0.58, 1.0)；<br>ease-in-out：先加速后减速，等同于贝塞尔曲线(0.42, 0, 0.58, 1.0)；<br>cubic-bezier：自定义贝塞尔曲线。<br>.transition-timing {<br>    transition-timing-function ： ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>) [, ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>)]*;<br>}</number></number></number></number></number></number></number></number></p><h3 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h3><h2 id="transition-delay渡动画开始执行的时间"><a href="#transition-delay渡动画开始执行的时间" class="headerlink" title="transition-delay渡动画开始执行的时间"></a>transition-delay渡动画开始执行的时间</h2><p>它是来设置过渡动画开始执行的时间，单位是s或者ms，默认值为0；</p><p>.transition-delay {<br>    transition-delay ： <time> [, <time>]*;<br>}</time></time></p><h2 id="transition它是transition-property、transition-duration、transition-timing-function、transition-delay的简写："><a href="#transition它是transition-property、transition-duration、transition-timing-function、transition-delay的简写：" class="headerlink" title="transition它是transition-property、transition-duration、transition-timing-function、transition-delay的简写："></a>transition它是transition-property、transition-duration、transition-timing-function、transition-delay的简写：</h2><p>.transition {<br>    transition ：<property> <duration> <timing function> <delay>;<br>}</delay></timing></duration></property></p><h2 id="animationflash-中的逐帧动画"><a href="#animationflash-中的逐帧动画" class="headerlink" title="animationflash 中的逐帧动画"></a>animationflash 中的逐帧动画</h2><p>animation比较类似于 flash 中的逐帧动画，逐帧动画就像电影的播放一样，表现非常细腻并且有非常大的灵活性。然而transition只是指定了开始和结束态，整个动画的过程也是由特定的函数控制。学习过 flash 的同学知道，这种逐帧动画是由关键帧组成，很多个关键帧连续的播放就组成了动画，在 CSS3 中是由属性keyframes来完成逐帧动画的。</p><h2 id="keyframes"><a href="#keyframes" class="headerlink" title="@keyframes"></a>@keyframes</h2><p>@keyframes animationName {<br>    from {<br>        properties: value;<br>    }<br>    percentage {<br>        properties: value;<br>    }<br>    to {<br>        properties: value;<br>    }<br>}<br>//or<br>@keyframes animationName {<br>    0% {<br>        properties: value;<br>    }<br>    percentage {<br>        properties: value;<br>    }<br>    100% {<br>        properties: value;<br>    }<br>}</p><p>percentage：为百分比值，可以添加多个百分比值；<br>properties：样式属性名称，例如：color、left、width等等。</p><h2 id="animation设置动画的名称"><a href="#animation设置动画的名称" class="headerlink" title="animation设置动画的名称"></a>animation设置动画的名称</h2><p>它是用来设置动画的名称，可以同时赋值多个动画名称用空格隔开：</p><p>none：不改变默认行为。<br>forwards ：当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。<br>backwards：在 animation-delay 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。<br>both：向前和向后填充模式都被应用。  </p><p>.animation {<br>    animation:name| none | IDENT[,none | IDENT]*;<br>    例子:animation: name .5s forwards;<br>}</p><h2 id="animation-duration设置动画的持续时间"><a href="#animation-duration设置动画的持续时间" class="headerlink" title="animation-duration设置动画的持续时间"></a>animation-duration设置动画的持续时间</h2><p>它是用来设置动画的持续时间，单位为s，默认值为0：</p><p>.animation {<br>    animation-duration: <time>[,<time>]*;<br>}</time></time></p><h2 id="animation-timing-function和transition-timing-function类似"><a href="#animation-timing-function和transition-timing-function类似" class="headerlink" title="animation-timing-function和transition-timing-function类似"></a>animation-timing-function和transition-timing-function类似</h2><p>和transition-timing-function类似：</p><p>.animation {<br>    animation-timing-function:ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>) [, ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>)]*;<br>}</number></number></number></number></number></number></number></number></p><h2 id="animation-delay设置动画的开始时间"><a href="#animation-delay设置动画的开始时间" class="headerlink" title="animation-delay设置动画的开始时间"></a>animation-delay设置动画的开始时间</h2><p>它是来设置动画的开始时间，单位是s或者ms，默认值为0：</p><p>.animation {<br>    animation-delay: <time>[,<time>]*;<br>}</time></time></p><h2 id="animation-iteration-count动画循环的次数"><a href="#animation-iteration-count动画循环的次数" class="headerlink" title="animation-iteration-count动画循环的次数"></a>animation-iteration-count动画循环的次数</h2><p>它是来设置动画循环的次数，默认为1，infinite为无限次数的循环：</p><p>.animation {<br>    animation-iteration-count:infinite | <number> [, infinite | <number>]*;<br>}</number></number></p><h2 id="animation-direction动画播放的方向"><a href="#animation-direction动画播放的方向" class="headerlink" title="animation-direction动画播放的方向"></a>animation-direction动画播放的方向</h2><p>它是来设置动画播放的方向，默认值为normal表示向前播放，alternate代表动画播放在第偶数次向前播放，第奇数次向反方向播放：</p><p>.animation {<br>    animation-direction: normal | alternate [, normal | alternate]*;<br>}</p><h2 id="animation-play-state控制动画的播放状态"><a href="#animation-play-state控制动画的播放状态" class="headerlink" title="animation-play-state控制动画的播放状态"></a>animation-play-state控制动画的播放状态</h2><p>它主要是来控制动画的播放状态：running代表播放，而paused代表停止播放，running为默认值：</p><p>.animation {<br>    animation-play-state:running | paused [, running | paused]*;<br>}</p><h2 id="animation简写"><a href="#animation简写" class="headerlink" title="animation简写"></a>animation简写</h2><p>它是animation-name、animation-duration、animation-timing-function、animation-delay、animation-iteration-count、animation-direction的简写：</p><p>.animation {<br>animation:[<animation-name> || <animation-duration> || <animation-timing-function> || <animation-delay> || <animation-iteration-count> || <animation-direction>] [, [<animation-name> || <animation-duration> || <animation-timing-function> || <animation-delay> || <animation-iteration-count> || <animation-direction>] ]*;<br>}</animation-direction></animation-iteration-count></animation-delay></animation-timing-function></animation-duration></animation-name></animation-direction></animation-iteration-count></animation-delay></animation-timing-function></animation-duration></animation-name></p><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><blockquote><p>关于 CSS3 的动画的三个属性transform、transition、animation我们都介绍完了，让我们回顾一下。transform我们可以理解为元素的几何变形，它是有规律可寻的，这种变形并不会产生动画效果仅仅是原有形状的改变；transition和animation它们很像 flash 中的补间动画和逐帧动画；transition是从一个状态变化到另外一种状态，当变化有了平滑的效果后就产生了动画，它是一个公式化的变化，在比较规则的动画效果中我们可以使用，例如：旋转的风车、行驶的汽车、颜色的渐变等等；animation的动画效果更加灵活，可以实现像影片一样的复杂无规则的动画</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css效果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全屏显示一侧颜色不同</title>
      <link href="/A-lyc/2020/03/21/css/%E5%85%A8%E5%B1%8F%E6%98%BE%E7%A4%BA%E4%B8%80%E4%BE%A7%E9%A2%9C%E8%89%B2%E4%B8%8D%E5%90%8C/"/>
      <url>/A-lyc/2020/03/21/css/%E5%85%A8%E5%B1%8F%E6%98%BE%E7%A4%BA%E4%B8%80%E4%BE%A7%E9%A2%9C%E8%89%B2%E4%B8%8D%E5%90%8C/</url>
      
        <content type="html"><![CDATA[<p>这个是通过最大的100%父级有个溢出隐藏，之后在定宽内设置一个定位position-absol….之后左上对齐，可以一直延续到右直到浏览器外，因为最外面有个溢出隐藏所以看不到了</p><a id="more"></a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/A-lyc/A-lyc/2020/03/21/css/%E5%85%A8%E5%B1%8F%E6%98%BE%E7%A4%BA%E4%B8%80%E4%BE%A7%E9%A2%9C%E8%89%B2%E4%B8%8D%E5%90%8C/01.png" alt="查入图片" title>                </div>                <div class="image-caption">查入图片</div>            </figure><p>内容以共享、参考、研究为目的,不存在任何商业目的。其版权属原作者所有,如有侵权,请与小编联系!情况属实本人将予以删除!</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 全屏侧边布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Css边框阴影</title>
      <link href="/A-lyc/2020/03/20/css/Css%E8%BE%B9%E6%A1%86%E9%98%B4%E5%BD%B1/"/>
      <url>/A-lyc/2020/03/20/css/Css%E8%BE%B9%E6%A1%86%E9%98%B4%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<p>ox-shadow是css3新增的一个属性。在W3School里，定义box-shadow是向框添加一个或者多个阴影的属性。</p><a id="more"></a><h4 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a>box-shadow</h4><h3 id="一-box-shadow的定义和语法"><a href="#一-box-shadow的定义和语法" class="headerlink" title="一. box-shadow的定义和语法"></a>一. box-shadow的定义和语法</h3><p>定义：box-shadow是css3新增的一个属性。在W3School里，定义box-shadow是向框添加一个或者多个阴影的属性。</p><p>语法：box-shadow: h-shadow v-shadow blur spread color inset. </p><p>h-shadow: 阴影的水平位置</p><p>v-shadow：阴影的垂直位置</p><p>blur：阴影的模糊半经</p><p>spread：阴影的半径</p><p>color：阴影的颜色</p><p>inset：将外部阴影改成内部阴影</p><p>【outset反过来】 根据box-shadow的定义，我们可以为一个框设置一个阴影，也可以设置多个阴影。</p><p>当我们需要设置多个阴影时，中间需要将每个阴影用逗号隔开。</p><p>举个例子：</p><p>/<em>html代码</em>/ </p><div class="test"></div>/*对应的css代码*/ .test{   width: 100px;   height: 100px;   background: yellow;   margin: 100px auto;   border-radius: 50%;   box-shadow: 10px 10px 20px 10px rgba(255,255,0,0.5), -10px 10px 10px 10px rgba(255,255,255,0.5) } 这里我们用border-radius属性设置了一个圆形，并且为这个圆形添加了一个浅黄色阴影和一个白色的阴影。<p>以第一个阴影：box-shadow: 10px 10px 20px 10px rgba(255,255,0,0.5)为例：</p><p>这段代码表示阴影的水平位置为右移10px；</p><p>垂直位置为下移10px；</p><p>第三个10px代表阴影的模糊程度blur，我们也将它设置成20px；</p><p>第四个10px是阴影半径的意思；最后一个规定了阴影的颜色为rgba(255,255,0,0.5)。</p><p>也就是说，我们为class为test的div元素添加了一个偏离框，并且向右距离为10px、向下距离为10px、模糊半径为10px、阴影半径为10px的浅黄色的阴影。</p><p>根据上面的CSS代码，我们看一下同时设置了两个阴影的效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/A-lyc/A-lyc/2020/03/20/css/Css%E8%BE%B9%E6%A1%86%E9%98%B4%E5%BD%B1/1.jpg" alt="查入图片" title>                </div>                <div class="image-caption">查入图片</div>            </figure><h3 id="二-box-shadow属性值的详细解析"><a href="#二-box-shadow属性值的详细解析" class="headerlink" title="二. box-shadow属性值的详细解析"></a>二. box-shadow属性值的详细解析</h3><p>根据前面的语法规则，box-shadow可以有六个值。接下来我们来聊一聊box-shadow属性里的每个值都怎么用</p><ol><li>h-shadow【必需】<br>这个值代表的是阴影在x轴上的阴影位置。可以是负值。</li></ol><p>当它为正值的时候表示向右位移一定的距离【出现在元素的右边】，负值表示向左位移【出现在元素的左边】。这个距离的单位可以是px、em或者rem；</p><p>需要注意的是：h-shadow是必需的，不能省略！</p><p>box-shadow: 10px 0px 10px rgba(0,0,0,0.9) /<em>阴影出现在元素的右侧</em>/</p><p>box-shadow: -10px 0px 10px rgba(0,0,0,0.9) /<em>阴影出现在元素的左侧</em>/</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/A-lyc/A-lyc/2020/03/20/css/Css%E8%BE%B9%E6%A1%86%E9%98%B4%E5%BD%B1/5.jpg" alt="查入图片" title>                </div>                <div class="image-caption">查入图片</div>            </figure><ol start="2"><li>v-shadow【必需】<br>这个值表示阴影在y轴上的位置。也可以是负值。</li></ol><p>当值为负的时候表示向上偏移一定的距离【出现在元素的上方】；值为正的时候表示向下偏移一定的距离【出现的元素的下方】</p><p>box-shadow: 0px -20px 10px rgba(0,0,0,0.9)/<em>阴影出现在元素上方</em>/ </p><p>box-shadow: 0px 20px 10px rgba(0,0,0,0.9)/<em>阴影出现在元素下方</em>/</p><ol start="3"><li>blur【可选】<br>blur指的是阴影的模糊半径。这个值使得阴影部分的过渡看起来更柔和。我们可以试一试不同blur值对阴影效果的影响：</li></ol><p>box-shadow: 10px 10px 5px rgba(0,0,0,0.9) /<em>blur值为5px</em>/ </p><p>box-shadow: 10px 10px 10px rgba(0,0,0,0.9)/<em>blur值为10px</em>/</p><p>box-shadow: 10px 10px 15px rgba(0,0,0,0.9)/<em>blur值为15px</em>/<br>将blur值为5px、10px、15px 的效果图依次从左往右排列，可以看出来随着模糊半径数值的增大，阴影的模糊程度越高。</p><ol start="4"><li>spread【可选】<br>spread表示的是阴影的半径。我在网上看到有人对spread和blur的区别发出疑问，其实很简单：blur用于描述模糊半径，它的值决定了阴影的模糊程度；而spread是表示阴影所占区域的大小，这是两个不同的概念。</li></ol><p>我们来试试其他属性值相同的情况下，spread不同时阴影的表现：</p><p>box-shadow: 10px 10px 10px 5px rgba(0,0,0,0.9);/<em>阴影半径为5px</em>/<br>box-shadow: 10px 10px 10px 15px rgba(0,0,0,0.9);/<em>阴影半径为15px</em>/<br>box-shadow: 10px 10px 10px 25px rgba(0,0,0,0.9);/<em>阴影半径为25px</em>/<br>将spread的值为5px、15px、25px的效果图依次 从左向右排列，很明显阴影在逐渐变大</p><ol start="5"><li>color【可选】<br>阴影的颜色可以用任何颜色单位来表示。当我们没有设置color值的时候，默认就是黑色。</li></ol><p>box-shadow: 10px 10px 10px 5px rgba(0,0,0,0.9);/<em>黑色阴影，用rgba表示，透明度为0.9</em>/ </p><p>box-shadow: 10px 10px 10px 5px rgb(255,0,0);/<em>红色阴影，用rgb表示</em>/ </p><p>box-shadow: 10px 10px 10px 5px #afe;/<em>浅蓝色阴影，用十六进制颜色表示法</em>/ </p><p>box-shadow: 10px 10px 10px 5px blue;/<em>蓝色阴影，用颜色单词表示</em>/</p><ol start="6"><li>inset 【可选】<br>默认情况下，我们设置的阴影都是外部阴影，而这个属性值的作用是将外部阴影转换成内部阴影。</li></ol><p>box-shadow: 10px 10px 10px 5px blue; /<em>默认为外部阴影</em>/ </p><p>box-shadow: 10px 10px 10px 5px blue inset;/<em>将外部阴影切换为内部阴影</em>/</p><p>内容以共享、参考、研究为目的,不存在任何商业目的。其版权属原作者所有,如有侵权,请与小编联系!情况属实本人将予以删除!</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css效果 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
